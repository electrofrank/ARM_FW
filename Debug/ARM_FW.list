
ARM_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000925c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08009430  08009430  00019430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098e4  080098e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080098e4  080098e4  000198e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098ec  080098ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098ec  080098ec  000198ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098f0  080098f0  000198f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080098f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001dc  08009ad0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08009ad0  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147d1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028de  00000000  00000000  000349dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  000372c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00038400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255cf  00000000  00000000  00039448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013510  00000000  00000000  0005ea17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3905  00000000  00000000  00071f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015582c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af8  00000000  00000000  00155880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0015b378  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0015b3b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009414 	.word	0x08009414

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009414 	.word	0x08009414

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <HAL_Init+0x40>)
 8000f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_Init+0x40>)
 8000f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_Init+0x40>)
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 fef5 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f005 f894 	bl	80060e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023c00 	.word	0x40023c00

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 ff0d 	bl	8001e02 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 fed5 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000008 	.word	0x20000008
 800101c:	20000004 	.word	0x20000004
 8001020:	20000000 	.word	0x20000000

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000004 	.word	0x20000004
 8001048:	20000204 	.word	0x20000204

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000204 	.word	0x20000204

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_Delay+0x44>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108a:	bf00      	nop
 800108c:	f7ff ffde 	bl	800104c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e033      	b.n	800112a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d109      	bne.n	80010de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f005 f830 	bl	8006130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d118      	bne.n	800111c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f2:	f023 0302 	bic.w	r3, r3, #2
 80010f6:	f043 0202 	orr.w	r2, r3, #2
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f94a 	bl	8001398 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f023 0303 	bic.w	r3, r3, #3
 8001112:	f043 0201 	orr.w	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
 800111a:	e001      	b.n	8001120 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x1c>
 800114c:	2302      	movs	r3, #2
 800114e:	e113      	b.n	8001378 <HAL_ADC_ConfigChannel+0x244>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b09      	cmp	r3, #9
 800115e:	d925      	bls.n	80011ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68d9      	ldr	r1, [r3, #12]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	3b1e      	subs	r3, #30
 8001176:	2207      	movs	r2, #7
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43da      	mvns	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	400a      	ands	r2, r1
 8001184:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68d9      	ldr	r1, [r3, #12]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	b29b      	uxth	r3, r3
 8001196:	4618      	mov	r0, r3
 8001198:	4603      	mov	r3, r0
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4403      	add	r3, r0
 800119e:	3b1e      	subs	r3, #30
 80011a0:	409a      	lsls	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	e022      	b.n	80011f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6919      	ldr	r1, [r3, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	2207      	movs	r2, #7
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	400a      	ands	r2, r1
 80011ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6919      	ldr	r1, [r3, #16]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	4603      	mov	r3, r0
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4403      	add	r3, r0
 80011e8:	409a      	lsls	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d824      	bhi.n	8001244 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	3b05      	subs	r3, #5
 800120c:	221f      	movs	r2, #31
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	400a      	ands	r2, r1
 800121a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3b05      	subs	r3, #5
 8001236:	fa00 f203 	lsl.w	r2, r0, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
 8001242:	e04c      	b.n	80012de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b0c      	cmp	r3, #12
 800124a:	d824      	bhi.n	8001296 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	3b23      	subs	r3, #35	; 0x23
 800125e:	221f      	movs	r2, #31
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43da      	mvns	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	400a      	ands	r2, r1
 800126c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	b29b      	uxth	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	3b23      	subs	r3, #35	; 0x23
 8001288:	fa00 f203 	lsl.w	r2, r0, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
 8001294:	e023      	b.n	80012de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3b41      	subs	r3, #65	; 0x41
 80012a8:	221f      	movs	r2, #31
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	400a      	ands	r2, r1
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	3b41      	subs	r3, #65	; 0x41
 80012d2:	fa00 f203 	lsl.w	r2, r0, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012de:	4b29      	ldr	r3, [pc, #164]	; (8001384 <HAL_ADC_ConfigChannel+0x250>)
 80012e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a28      	ldr	r2, [pc, #160]	; (8001388 <HAL_ADC_ConfigChannel+0x254>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d10f      	bne.n	800130c <HAL_ADC_ConfigChannel+0x1d8>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b12      	cmp	r3, #18
 80012f2:	d10b      	bne.n	800130c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <HAL_ADC_ConfigChannel+0x254>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12b      	bne.n	800136e <HAL_ADC_ConfigChannel+0x23a>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a1c      	ldr	r2, [pc, #112]	; (800138c <HAL_ADC_ConfigChannel+0x258>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d003      	beq.n	8001328 <HAL_ADC_ConfigChannel+0x1f4>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b11      	cmp	r3, #17
 8001326:	d122      	bne.n	800136e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a11      	ldr	r2, [pc, #68]	; (800138c <HAL_ADC_ConfigChannel+0x258>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d111      	bne.n	800136e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_ADC_ConfigChannel+0x25c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a11      	ldr	r2, [pc, #68]	; (8001394 <HAL_ADC_ConfigChannel+0x260>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	0c9a      	lsrs	r2, r3, #18
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001360:	e002      	b.n	8001368 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3b01      	subs	r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f9      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40012300 	.word	0x40012300
 8001388:	40012000 	.word	0x40012000
 800138c:	10000012 	.word	0x10000012
 8001390:	20000008 	.word	0x20000008
 8001394:	431bde83 	.word	0x431bde83

08001398 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013a0:	4b79      	ldr	r3, [pc, #484]	; (8001588 <ADC_Init+0x1f0>)
 80013a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	431a      	orrs	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	021a      	lsls	r2, r3, #8
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6899      	ldr	r1, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	4a58      	ldr	r2, [pc, #352]	; (800158c <ADC_Init+0x1f4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d022      	beq.n	8001476 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800143e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6899      	ldr	r1, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6899      	ldr	r1, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	e00f      	b.n	8001496 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001494:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0202 	bic.w	r2, r2, #2
 80014a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6899      	ldr	r1, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7e1b      	ldrb	r3, [r3, #24]
 80014b0:	005a      	lsls	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01b      	beq.n	80014fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6859      	ldr	r1, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	3b01      	subs	r3, #1
 80014f0:	035a      	lsls	r2, r3, #13
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	e007      	b.n	800150c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800150a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	3b01      	subs	r3, #1
 8001528:	051a      	lsls	r2, r3, #20
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6899      	ldr	r1, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800154e:	025a      	lsls	r2, r3, #9
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6899      	ldr	r1, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	029a      	lsls	r2, r3, #10
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	609a      	str	r2, [r3, #8]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40012300 	.word	0x40012300
 800158c:	0f000001 	.word	0x0f000001

08001590 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0ed      	b.n	800177e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f004 fe02 	bl	80061b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0202 	bic.w	r2, r2, #2
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c4:	f7ff fd42 	bl	800104c <HAL_GetTick>
 80015c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ca:	e012      	b.n	80015f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015cc:	f7ff fd3e 	bl	800104c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	d90b      	bls.n	80015f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2205      	movs	r2, #5
 80015ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e0c5      	b.n	800177e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e5      	bne.n	80015cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001610:	f7ff fd1c 	bl	800104c <HAL_GetTick>
 8001614:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001616:	e012      	b.n	800163e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001618:	f7ff fd18 	bl	800104c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b0a      	cmp	r3, #10
 8001624:	d90b      	bls.n	800163e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2205      	movs	r2, #5
 8001636:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e09f      	b.n	800177e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0e5      	beq.n	8001618 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7e1b      	ldrb	r3, [r3, #24]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d108      	bne.n	8001666 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e007      	b.n	8001676 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7e5b      	ldrb	r3, [r3, #25]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d108      	bne.n	8001690 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e007      	b.n	80016a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800169e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7e9b      	ldrb	r3, [r3, #26]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d108      	bne.n	80016ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0220 	orr.w	r2, r2, #32
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e007      	b.n	80016ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0220 	bic.w	r2, r2, #32
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7edb      	ldrb	r3, [r3, #27]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0210 	bic.w	r2, r2, #16
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e007      	b.n	80016f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0210 	orr.w	r2, r2, #16
 80016f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7f1b      	ldrb	r3, [r3, #28]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0208 	orr.w	r2, r2, #8
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e007      	b.n	800171e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0208 	bic.w	r2, r2, #8
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7f5b      	ldrb	r3, [r3, #29]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0204 	orr.w	r2, r2, #4
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e007      	b.n	8001748 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0204 	bic.w	r2, r2, #4
 8001746:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	ea42 0103 	orr.w	r1, r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	1e5a      	subs	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b08a      	sub	sp, #40	; 0x28
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d07c      	beq.n	80018c6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d023      	beq.n	800181e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2201      	movs	r2, #1
 80017dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f983 	bl	8001af4 <HAL_CAN_TxMailbox0CompleteCallback>
 80017ee:	e016      	b.n	800181e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
 8001802:	e00c      	b.n	800181e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d004      	beq.n	8001818 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
 8001816:	e002      	b.n	800181e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f989 	bl	8001b30 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d024      	beq.n	8001872 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001830:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f963 	bl	8001b08 <HAL_CAN_TxMailbox1CompleteCallback>
 8001842:	e016      	b.n	8001872 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184a:	2b00      	cmp	r3, #0
 800184c:	d004      	beq.n	8001858 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
 8001856:	e00c      	b.n	8001872 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800185e:	2b00      	cmp	r3, #0
 8001860:	d004      	beq.n	800186c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
 800186a:	e002      	b.n	8001872 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f969 	bl	8001b44 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d024      	beq.n	80018c6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001884:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f943 	bl	8001b1c <HAL_CAN_TxMailbox2CompleteCallback>
 8001896:	e016      	b.n	80018c6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
 80018aa:	e00c      	b.n	80018c6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	e002      	b.n	80018c6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f949 	bl	8001b58 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00c      	beq.n	80018ea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d007      	beq.n	80018ea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2210      	movs	r2, #16
 80018e8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00b      	beq.n	800190c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2208      	movs	r2, #8
 8001904:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f93a 	bl	8001b80 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f921 	bl	8001b6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00c      	beq.n	800194e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001944:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2210      	movs	r2, #16
 800194c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	f003 0320 	and.w	r3, r3, #32
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00b      	beq.n	8001970 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d006      	beq.n	8001970 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2208      	movs	r2, #8
 8001968:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f91c 	bl	8001ba8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f903 	bl	8001b94 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00b      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2210      	movs	r2, #16
 80019a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f906 	bl	8001bbc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2208      	movs	r2, #8
 80019ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f8ff 	bl	8001bd0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d07b      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d072      	beq.n	8001acc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d043      	beq.n	8001acc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d03e      	beq.n	8001acc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a54:	2b60      	cmp	r3, #96	; 0x60
 8001a56:	d02b      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0x32a>
 8001a58:	2b60      	cmp	r3, #96	; 0x60
 8001a5a:	d82e      	bhi.n	8001aba <HAL_CAN_IRQHandler+0x334>
 8001a5c:	2b50      	cmp	r3, #80	; 0x50
 8001a5e:	d022      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x320>
 8001a60:	2b50      	cmp	r3, #80	; 0x50
 8001a62:	d82a      	bhi.n	8001aba <HAL_CAN_IRQHandler+0x334>
 8001a64:	2b40      	cmp	r3, #64	; 0x40
 8001a66:	d019      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x316>
 8001a68:	2b40      	cmp	r3, #64	; 0x40
 8001a6a:	d826      	bhi.n	8001aba <HAL_CAN_IRQHandler+0x334>
 8001a6c:	2b30      	cmp	r3, #48	; 0x30
 8001a6e:	d010      	beq.n	8001a92 <HAL_CAN_IRQHandler+0x30c>
 8001a70:	2b30      	cmp	r3, #48	; 0x30
 8001a72:	d822      	bhi.n	8001aba <HAL_CAN_IRQHandler+0x334>
 8001a74:	2b10      	cmp	r3, #16
 8001a76:	d002      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x2f8>
 8001a78:	2b20      	cmp	r3, #32
 8001a7a:	d005      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a7c:	e01d      	b.n	8001aba <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a86:	e019      	b.n	8001abc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	f043 0310 	orr.w	r3, r3, #16
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a90:	e014      	b.n	8001abc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	f043 0320 	orr.w	r3, r3, #32
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a9a:	e00f      	b.n	8001abc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001aa4:	e00a      	b.n	8001abc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001aae:	e005      	b.n	8001abc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ab8:	e000      	b.n	8001abc <HAL_CAN_IRQHandler+0x336>
            break;
 8001aba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001aca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d008      	beq.n	8001aec <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f87c 	bl	8001be4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	; 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	; (8001c94 <__NVIC_EnableIRQ+0x38>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f7ff ff8e 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff29 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff3e 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff8e 	bl	8001cec <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5d 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff31 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa2 	bl	8001d54 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e165      	b.n	8002104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	f040 8154 	bne.w	80020fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d005      	beq.n	8001e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d130      	bne.n	8001ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 0201 	and.w	r2, r3, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d017      	beq.n	8001f0c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d123      	bne.n	8001f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	08da      	lsrs	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3208      	adds	r2, #8
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0203 	and.w	r2, r3, #3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80ae 	beq.w	80020fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <HAL_GPIO_Init+0x300>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a5c      	ldr	r2, [pc, #368]	; (800211c <HAL_GPIO_Init+0x300>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b5a      	ldr	r3, [pc, #360]	; (800211c <HAL_GPIO_Init+0x300>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fbe:	4a58      	ldr	r2, [pc, #352]	; (8002120 <HAL_GPIO_Init+0x304>)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4f      	ldr	r2, [pc, #316]	; (8002124 <HAL_GPIO_Init+0x308>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d025      	beq.n	8002036 <HAL_GPIO_Init+0x21a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4e      	ldr	r2, [pc, #312]	; (8002128 <HAL_GPIO_Init+0x30c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01f      	beq.n	8002032 <HAL_GPIO_Init+0x216>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4d      	ldr	r2, [pc, #308]	; (800212c <HAL_GPIO_Init+0x310>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x212>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4c      	ldr	r2, [pc, #304]	; (8002130 <HAL_GPIO_Init+0x314>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4b      	ldr	r2, [pc, #300]	; (8002134 <HAL_GPIO_Init+0x318>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x20a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4a      	ldr	r2, [pc, #296]	; (8002138 <HAL_GPIO_Init+0x31c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x206>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a49      	ldr	r2, [pc, #292]	; (800213c <HAL_GPIO_Init+0x320>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x202>
 800201a:	2306      	movs	r3, #6
 800201c:	e00c      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800201e:	2307      	movs	r3, #7
 8002020:	e00a      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002022:	2305      	movs	r3, #5
 8002024:	e008      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002026:	2304      	movs	r3, #4
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800202a:	2303      	movs	r3, #3
 800202c:	e004      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800202e:	2302      	movs	r3, #2
 8002030:	e002      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002036:	2300      	movs	r3, #0
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	4093      	lsls	r3, r2
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002048:	4935      	ldr	r1, [pc, #212]	; (8002120 <HAL_GPIO_Init+0x304>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002056:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <HAL_GPIO_Init+0x324>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800207a:	4a31      	ldr	r2, [pc, #196]	; (8002140 <HAL_GPIO_Init+0x324>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002080:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <HAL_GPIO_Init+0x324>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020a4:	4a26      	ldr	r2, [pc, #152]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020aa:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ce:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f8:	4a11      	ldr	r2, [pc, #68]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	f67f ae96 	bls.w	8001e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40013800 	.word	0x40013800
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400
 800212c:	40020800 	.word	0x40020800
 8002130:	40020c00 	.word	0x40020c00
 8002134:	40021000 	.word	0x40021000
 8002138:	40021400 	.word	0x40021400
 800213c:	40021800 	.word	0x40021800
 8002140:	40013c00 	.word	0x40013c00

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002160:	e003      	b.n	800216a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	619a      	str	r2, [r3, #24]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002176:	b480      	push	{r7}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002188:	887a      	ldrh	r2, [r7, #2]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4013      	ands	r3, r2
 800218e:	041a      	lsls	r2, r3, #16
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	43d9      	mvns	r1, r3
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	400b      	ands	r3, r1
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0cc      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b68      	ldr	r3, [pc, #416]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d90c      	bls.n	80021e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b65      	ldr	r3, [pc, #404]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b63      	ldr	r3, [pc, #396]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0b8      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002200:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a58      	ldr	r2, [pc, #352]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800220a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002218:	4b53      	ldr	r3, [pc, #332]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a52      	ldr	r2, [pc, #328]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002224:	4b50      	ldr	r3, [pc, #320]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	494d      	ldr	r1, [pc, #308]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d044      	beq.n	80022cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d119      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e07f      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d003      	beq.n	800226a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002266:	2b03      	cmp	r3, #3
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226a:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e06f      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227a:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e067      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228a:	4b37      	ldr	r3, [pc, #220]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f023 0203 	bic.w	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4934      	ldr	r1, [pc, #208]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	4313      	orrs	r3, r2
 800229a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800229c:	f7fe fed6 	bl	800104c <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a4:	f7fe fed2 	bl	800104c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e04f      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 020c 	and.w	r2, r3, #12
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d1eb      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d20c      	bcs.n	80022f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b22      	ldr	r3, [pc, #136]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e032      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4916      	ldr	r1, [pc, #88]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	490e      	ldr	r1, [pc, #56]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002332:	f000 f855 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 8002336:	4602      	mov	r2, r0
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	490a      	ldr	r1, [pc, #40]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	5ccb      	ldrb	r3, [r1, r3]
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	4a09      	ldr	r2, [pc, #36]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fe36 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023c00 	.word	0x40023c00
 8002368:	40023800 	.word	0x40023800
 800236c:	080094e8 	.word	0x080094e8
 8002370:	20000008 	.word	0x20000008
 8002374:	20000000 	.word	0x20000000

08002378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_RCC_GetHCLKFreq+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000008 	.word	0x20000008

08002390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002394:	f7ff fff0 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0a9b      	lsrs	r3, r3, #10
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4903      	ldr	r1, [pc, #12]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40023800 	.word	0x40023800
 80023b4:	080094f8 	.word	0x080094f8

080023b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023bc:	f7ff ffdc 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	0b5b      	lsrs	r3, r3, #13
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	4903      	ldr	r1, [pc, #12]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ce:	5ccb      	ldrb	r3, [r1, r3]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800
 80023dc:	080094f8 	.word	0x080094f8

080023e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e4:	b088      	sub	sp, #32
 80023e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023fc:	4bce      	ldr	r3, [pc, #824]	; (8002738 <HAL_RCC_GetSysClockFreq+0x358>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b0c      	cmp	r3, #12
 8002406:	f200 818d 	bhi.w	8002724 <HAL_RCC_GetSysClockFreq+0x344>
 800240a:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <HAL_RCC_GetSysClockFreq+0x30>)
 800240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002410:	08002445 	.word	0x08002445
 8002414:	08002725 	.word	0x08002725
 8002418:	08002725 	.word	0x08002725
 800241c:	08002725 	.word	0x08002725
 8002420:	0800244b 	.word	0x0800244b
 8002424:	08002725 	.word	0x08002725
 8002428:	08002725 	.word	0x08002725
 800242c:	08002725 	.word	0x08002725
 8002430:	08002451 	.word	0x08002451
 8002434:	08002725 	.word	0x08002725
 8002438:	08002725 	.word	0x08002725
 800243c:	08002725 	.word	0x08002725
 8002440:	080025c5 	.word	0x080025c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002444:	4bbd      	ldr	r3, [pc, #756]	; (800273c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002446:	61bb      	str	r3, [r7, #24]
       break;
 8002448:	e16f      	b.n	800272a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244a:	4bbd      	ldr	r3, [pc, #756]	; (8002740 <HAL_RCC_GetSysClockFreq+0x360>)
 800244c:	61bb      	str	r3, [r7, #24]
      break;
 800244e:	e16c      	b.n	800272a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002450:	4bb9      	ldr	r3, [pc, #740]	; (8002738 <HAL_RCC_GetSysClockFreq+0x358>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002458:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800245a:	4bb7      	ldr	r3, [pc, #732]	; (8002738 <HAL_RCC_GetSysClockFreq+0x358>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d053      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002466:	4bb4      	ldr	r3, [pc, #720]	; (8002738 <HAL_RCC_GetSysClockFreq+0x358>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	099b      	lsrs	r3, r3, #6
 800246c:	461a      	mov	r2, r3
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002476:	f04f 0100 	mov.w	r1, #0
 800247a:	ea02 0400 	and.w	r4, r2, r0
 800247e:	603c      	str	r4, [r7, #0]
 8002480:	400b      	ands	r3, r1
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002488:	4620      	mov	r0, r4
 800248a:	4629      	mov	r1, r5
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	014b      	lsls	r3, r1, #5
 8002496:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800249a:	0142      	lsls	r2, r0, #5
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	4623      	mov	r3, r4
 80024a2:	1ac0      	subs	r0, r0, r3
 80024a4:	462b      	mov	r3, r5
 80024a6:	eb61 0103 	sbc.w	r1, r1, r3
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	018b      	lsls	r3, r1, #6
 80024b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024b8:	0182      	lsls	r2, r0, #6
 80024ba:	1a12      	subs	r2, r2, r0
 80024bc:	eb63 0301 	sbc.w	r3, r3, r1
 80024c0:	f04f 0000 	mov.w	r0, #0
 80024c4:	f04f 0100 	mov.w	r1, #0
 80024c8:	00d9      	lsls	r1, r3, #3
 80024ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024ce:	00d0      	lsls	r0, r2, #3
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4621      	mov	r1, r4
 80024d6:	1852      	adds	r2, r2, r1
 80024d8:	4629      	mov	r1, r5
 80024da:	eb43 0101 	adc.w	r1, r3, r1
 80024de:	460b      	mov	r3, r1
 80024e0:	f04f 0000 	mov.w	r0, #0
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	0259      	lsls	r1, r3, #9
 80024ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80024ee:	0250      	lsls	r0, r2, #9
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	f7fe fbc2 	bl	8000c88 <__aeabi_uldivmod>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4613      	mov	r3, r2
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	e04c      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250e:	4b8a      	ldr	r3, [pc, #552]	; (8002738 <HAL_RCC_GetSysClockFreq+0x358>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	099b      	lsrs	r3, r3, #6
 8002514:	461a      	mov	r2, r3
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800251e:	f04f 0100 	mov.w	r1, #0
 8002522:	ea02 0a00 	and.w	sl, r2, r0
 8002526:	ea03 0b01 	and.w	fp, r3, r1
 800252a:	4650      	mov	r0, sl
 800252c:	4659      	mov	r1, fp
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	014b      	lsls	r3, r1, #5
 8002538:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800253c:	0142      	lsls	r2, r0, #5
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	ebb0 000a 	subs.w	r0, r0, sl
 8002546:	eb61 010b 	sbc.w	r1, r1, fp
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	018b      	lsls	r3, r1, #6
 8002554:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002558:	0182      	lsls	r2, r0, #6
 800255a:	1a12      	subs	r2, r2, r0
 800255c:	eb63 0301 	sbc.w	r3, r3, r1
 8002560:	f04f 0000 	mov.w	r0, #0
 8002564:	f04f 0100 	mov.w	r1, #0
 8002568:	00d9      	lsls	r1, r3, #3
 800256a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800256e:	00d0      	lsls	r0, r2, #3
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	eb12 020a 	adds.w	r2, r2, sl
 8002578:	eb43 030b 	adc.w	r3, r3, fp
 800257c:	f04f 0000 	mov.w	r0, #0
 8002580:	f04f 0100 	mov.w	r1, #0
 8002584:	0299      	lsls	r1, r3, #10
 8002586:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800258a:	0290      	lsls	r0, r2, #10
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	461a      	mov	r2, r3
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	f7fe fb74 	bl	8000c88 <__aeabi_uldivmod>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4613      	mov	r3, r2
 80025a6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025a8:	4b63      	ldr	r3, [pc, #396]	; (8002738 <HAL_RCC_GetSysClockFreq+0x358>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	0c1b      	lsrs	r3, r3, #16
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	3301      	adds	r3, #1
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	61bb      	str	r3, [r7, #24]
      break;
 80025c2:	e0b2      	b.n	800272a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025c4:	4b5c      	ldr	r3, [pc, #368]	; (8002738 <HAL_RCC_GetSysClockFreq+0x358>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025cc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ce:	4b5a      	ldr	r3, [pc, #360]	; (8002738 <HAL_RCC_GetSysClockFreq+0x358>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d04d      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025da:	4b57      	ldr	r3, [pc, #348]	; (8002738 <HAL_RCC_GetSysClockFreq+0x358>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	461a      	mov	r2, r3
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	ea02 0800 	and.w	r8, r2, r0
 80025f2:	ea03 0901 	and.w	r9, r3, r1
 80025f6:	4640      	mov	r0, r8
 80025f8:	4649      	mov	r1, r9
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	014b      	lsls	r3, r1, #5
 8002604:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002608:	0142      	lsls	r2, r0, #5
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	ebb0 0008 	subs.w	r0, r0, r8
 8002612:	eb61 0109 	sbc.w	r1, r1, r9
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	018b      	lsls	r3, r1, #6
 8002620:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002624:	0182      	lsls	r2, r0, #6
 8002626:	1a12      	subs	r2, r2, r0
 8002628:	eb63 0301 	sbc.w	r3, r3, r1
 800262c:	f04f 0000 	mov.w	r0, #0
 8002630:	f04f 0100 	mov.w	r1, #0
 8002634:	00d9      	lsls	r1, r3, #3
 8002636:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800263a:	00d0      	lsls	r0, r2, #3
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	eb12 0208 	adds.w	r2, r2, r8
 8002644:	eb43 0309 	adc.w	r3, r3, r9
 8002648:	f04f 0000 	mov.w	r0, #0
 800264c:	f04f 0100 	mov.w	r1, #0
 8002650:	0259      	lsls	r1, r3, #9
 8002652:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002656:	0250      	lsls	r0, r2, #9
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	461a      	mov	r2, r3
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	f7fe fb0e 	bl	8000c88 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4613      	mov	r3, r2
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	e04a      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_RCC_GetSysClockFreq+0x358>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	461a      	mov	r2, r3
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002686:	f04f 0100 	mov.w	r1, #0
 800268a:	ea02 0400 	and.w	r4, r2, r0
 800268e:	ea03 0501 	and.w	r5, r3, r1
 8002692:	4620      	mov	r0, r4
 8002694:	4629      	mov	r1, r5
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	014b      	lsls	r3, r1, #5
 80026a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026a4:	0142      	lsls	r2, r0, #5
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	1b00      	subs	r0, r0, r4
 80026ac:	eb61 0105 	sbc.w	r1, r1, r5
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	018b      	lsls	r3, r1, #6
 80026ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026be:	0182      	lsls	r2, r0, #6
 80026c0:	1a12      	subs	r2, r2, r0
 80026c2:	eb63 0301 	sbc.w	r3, r3, r1
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	00d9      	lsls	r1, r3, #3
 80026d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026d4:	00d0      	lsls	r0, r2, #3
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	1912      	adds	r2, r2, r4
 80026dc:	eb45 0303 	adc.w	r3, r5, r3
 80026e0:	f04f 0000 	mov.w	r0, #0
 80026e4:	f04f 0100 	mov.w	r1, #0
 80026e8:	0299      	lsls	r1, r3, #10
 80026ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026ee:	0290      	lsls	r0, r2, #10
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	f7fe fac2 	bl	8000c88 <__aeabi_uldivmod>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4613      	mov	r3, r2
 800270a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_RCC_GetSysClockFreq+0x358>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0f1b      	lsrs	r3, r3, #28
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	61bb      	str	r3, [r7, #24]
      break;
 8002722:	e002      	b.n	800272a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002726:	61bb      	str	r3, [r7, #24]
      break;
 8002728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272a:	69bb      	ldr	r3, [r7, #24]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	00f42400 	.word	0x00f42400
 8002740:	007a1200 	.word	0x007a1200

08002744 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e28d      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8083 	beq.w	800286a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002764:	4b94      	ldr	r3, [pc, #592]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b04      	cmp	r3, #4
 800276e:	d019      	beq.n	80027a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002770:	4b91      	ldr	r3, [pc, #580]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002778:	2b08      	cmp	r3, #8
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800277c:	4b8e      	ldr	r3, [pc, #568]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002788:	d00c      	beq.n	80027a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278a:	4b8b      	ldr	r3, [pc, #556]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d112      	bne.n	80027bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002796:	4b88      	ldr	r3, [pc, #544]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027a2:	d10b      	bne.n	80027bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a4:	4b84      	ldr	r3, [pc, #528]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d05b      	beq.n	8002868 <HAL_RCC_OscConfig+0x124>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d157      	bne.n	8002868 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e25a      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c4:	d106      	bne.n	80027d4 <HAL_RCC_OscConfig+0x90>
 80027c6:	4b7c      	ldr	r3, [pc, #496]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7b      	ldr	r2, [pc, #492]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e01d      	b.n	8002810 <HAL_RCC_OscConfig+0xcc>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0xb4>
 80027de:	4b76      	ldr	r3, [pc, #472]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a75      	ldr	r2, [pc, #468]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 80027e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b73      	ldr	r3, [pc, #460]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a72      	ldr	r2, [pc, #456]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e00b      	b.n	8002810 <HAL_RCC_OscConfig+0xcc>
 80027f8:	4b6f      	ldr	r3, [pc, #444]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a6e      	ldr	r2, [pc, #440]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 80027fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b6c      	ldr	r3, [pc, #432]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a6b      	ldr	r2, [pc, #428]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 800280a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fc18 	bl	800104c <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002820:	f7fe fc14 	bl	800104c <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	; 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e21f      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b61      	ldr	r3, [pc, #388]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0xdc>
 800283e:	e014      	b.n	800286a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fc04 	bl	800104c <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002848:	f7fe fc00 	bl	800104c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	; 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e20b      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285a:	4b57      	ldr	r3, [pc, #348]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x104>
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d06f      	beq.n	8002956 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002876:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b00      	cmp	r3, #0
 8002880:	d017      	beq.n	80028b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002882:	4b4d      	ldr	r3, [pc, #308]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800288a:	2b08      	cmp	r3, #8
 800288c:	d105      	bne.n	800289a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800288e:	4b4a      	ldr	r3, [pc, #296]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d11c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a6:	4b44      	ldr	r3, [pc, #272]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d116      	bne.n	80028e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b2:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_RCC_OscConfig+0x186>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d001      	beq.n	80028ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e1d3      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ca:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4937      	ldr	r1, [pc, #220]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028de:	e03a      	b.n	8002956 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d020      	beq.n	800292a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e8:	4b34      	ldr	r3, [pc, #208]	; (80029bc <HAL_RCC_OscConfig+0x278>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe fbad 	bl	800104c <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f6:	f7fe fba9 	bl	800104c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e1b4      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002914:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4925      	ldr	r1, [pc, #148]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 8002924:	4313      	orrs	r3, r2
 8002926:	600b      	str	r3, [r1, #0]
 8002928:	e015      	b.n	8002956 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800292a:	4b24      	ldr	r3, [pc, #144]	; (80029bc <HAL_RCC_OscConfig+0x278>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe fb8c 	bl	800104c <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002938:	f7fe fb88 	bl	800104c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e193      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d036      	beq.n	80029d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d016      	beq.n	8002998 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_RCC_OscConfig+0x27c>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002970:	f7fe fb6c 	bl	800104c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002978:	f7fe fb68 	bl	800104c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e173      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 800298c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x234>
 8002996:	e01b      	b.n	80029d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_RCC_OscConfig+0x27c>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7fe fb55 	bl	800104c <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a4:	e00e      	b.n	80029c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a6:	f7fe fb51 	bl	800104c <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d907      	bls.n	80029c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e15c      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
 80029b8:	40023800 	.word	0x40023800
 80029bc:	42470000 	.word	0x42470000
 80029c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c4:	4b8a      	ldr	r3, [pc, #552]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 80029c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ea      	bne.n	80029a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8097 	beq.w	8002b0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e2:	4b83      	ldr	r3, [pc, #524]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10f      	bne.n	8002a0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	4b7f      	ldr	r3, [pc, #508]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	4a7e      	ldr	r2, [pc, #504]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 80029f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fc:	6413      	str	r3, [r2, #64]	; 0x40
 80029fe:	4b7c      	ldr	r3, [pc, #496]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0e:	4b79      	ldr	r3, [pc, #484]	; (8002bf4 <HAL_RCC_OscConfig+0x4b0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d118      	bne.n	8002a4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1a:	4b76      	ldr	r3, [pc, #472]	; (8002bf4 <HAL_RCC_OscConfig+0x4b0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a75      	ldr	r2, [pc, #468]	; (8002bf4 <HAL_RCC_OscConfig+0x4b0>)
 8002a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a26:	f7fe fb11 	bl	800104c <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2e:	f7fe fb0d 	bl	800104c <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e118      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	4b6c      	ldr	r3, [pc, #432]	; (8002bf4 <HAL_RCC_OscConfig+0x4b0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_OscConfig+0x31e>
 8002a54:	4b66      	ldr	r3, [pc, #408]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	4a65      	ldr	r2, [pc, #404]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a60:	e01c      	b.n	8002a9c <HAL_RCC_OscConfig+0x358>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x340>
 8002a6a:	4b61      	ldr	r3, [pc, #388]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	4a60      	ldr	r2, [pc, #384]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	6713      	str	r3, [r2, #112]	; 0x70
 8002a76:	4b5e      	ldr	r3, [pc, #376]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	4a5d      	ldr	r2, [pc, #372]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6713      	str	r3, [r2, #112]	; 0x70
 8002a82:	e00b      	b.n	8002a9c <HAL_RCC_OscConfig+0x358>
 8002a84:	4b5a      	ldr	r3, [pc, #360]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a59      	ldr	r2, [pc, #356]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a90:	4b57      	ldr	r3, [pc, #348]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a56      	ldr	r2, [pc, #344]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002a96:	f023 0304 	bic.w	r3, r3, #4
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d015      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7fe fad2 	bl	800104c <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7fe face 	bl	800104c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e0d7      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac2:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0ee      	beq.n	8002aac <HAL_RCC_OscConfig+0x368>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fabc 	bl	800104c <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fe fab8 	bl	800104c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0c1      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aee:	4b40      	ldr	r3, [pc, #256]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ee      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d105      	bne.n	8002b0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b00:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	4a3a      	ldr	r2, [pc, #232]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80ad 	beq.w	8002c70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b16:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d060      	beq.n	8002be4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d145      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2a:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <HAL_RCC_OscConfig+0x4b4>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fa8c 	bl	800104c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe fa88 	bl	800104c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e093      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	4b29      	ldr	r3, [pc, #164]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	019b      	lsls	r3, r3, #6
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	085b      	lsrs	r3, r3, #1
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	041b      	lsls	r3, r3, #16
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	061b      	lsls	r3, r3, #24
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	071b      	lsls	r3, r3, #28
 8002b82:	491b      	ldr	r1, [pc, #108]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <HAL_RCC_OscConfig+0x4b4>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fa5d 	bl	800104c <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b96:	f7fe fa59 	bl	800104c <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e064      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x452>
 8002bb4:	e05c      	b.n	8002c70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb6:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <HAL_RCC_OscConfig+0x4b4>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fa46 	bl	800104c <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe fa42 	bl	800104c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e04d      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_RCC_OscConfig+0x4ac>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x480>
 8002be2:	e045      	b.n	8002c70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d107      	bne.n	8002bfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e040      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40007000 	.word	0x40007000
 8002bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bfc:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <HAL_RCC_OscConfig+0x538>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d030      	beq.n	8002c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d129      	bne.n	8002c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d122      	bne.n	8002c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d119      	bne.n	8002c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	085b      	lsrs	r3, r3, #1
 8002c44:	3b01      	subs	r3, #1
 8002c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d10f      	bne.n	8002c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d001      	beq.n	8002c70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800

08002c80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07b      	b.n	8002d8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d108      	bne.n	8002cac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ca2:	d009      	beq.n	8002cb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61da      	str	r2, [r3, #28]
 8002caa:	e005      	b.n	8002cb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f003 fac0 	bl	8006258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	ea42 0103 	orr.w	r1, r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	f003 0104 	and.w	r1, r3, #4
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	f003 0210 	and.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b088      	sub	sp, #32
 8002d96:	af02      	add	r7, sp, #8
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dae:	d112      	bne.n	8002dd6 <HAL_SPI_Receive+0x44>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10e      	bne.n	8002dd6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2204      	movs	r2, #4
 8002dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002dc0:	88fa      	ldrh	r2, [r7, #6]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f8f1 	bl	8002fb4 <HAL_SPI_TransmitReceive>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	e0ea      	b.n	8002fac <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_SPI_Receive+0x52>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e0e3      	b.n	8002fac <HAL_SPI_Receive+0x21a>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dec:	f7fe f92e 	bl	800104c <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d002      	beq.n	8002e04 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e02:	e0ca      	b.n	8002f9a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_SPI_Receive+0x7e>
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e14:	e0c1      	b.n	8002f9a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	88fa      	ldrh	r2, [r7, #6]
 8002e2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e5c:	d10f      	bne.n	8002e7e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e7c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b40      	cmp	r3, #64	; 0x40
 8002e8a:	d007      	beq.n	8002e9c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d162      	bne.n	8002f6a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ea4:	e02e      	b.n	8002f04 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d115      	bne.n	8002ee0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f103 020c 	add.w	r2, r3, #12
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	7812      	ldrb	r2, [r2, #0]
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ede:	e011      	b.n	8002f04 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ee0:	f7fe f8b4 	bl	800104c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d803      	bhi.n	8002ef8 <HAL_SPI_Receive+0x166>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d102      	bne.n	8002efe <HAL_SPI_Receive+0x16c>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d102      	bne.n	8002f04 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f02:	e04a      	b.n	8002f9a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1cb      	bne.n	8002ea6 <HAL_SPI_Receive+0x114>
 8002f0e:	e031      	b.n	8002f74 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d113      	bne.n	8002f46 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	b292      	uxth	r2, r2
 8002f2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	1c9a      	adds	r2, r3, #2
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f44:	e011      	b.n	8002f6a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f46:	f7fe f881 	bl	800104c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d803      	bhi.n	8002f5e <HAL_SPI_Receive+0x1cc>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5c:	d102      	bne.n	8002f64 <HAL_SPI_Receive+0x1d2>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f68:	e017      	b.n	8002f9a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1cd      	bne.n	8002f10 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 fa45 	bl	8003408 <SPI_EndRxTransaction>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	75fb      	strb	r3, [r7, #23]
 8002f96:	e000      	b.n	8002f9a <HAL_SPI_Receive+0x208>
  }

error :
 8002f98:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	; 0x30
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x26>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e18a      	b.n	80032f0 <HAL_SPI_TransmitReceive+0x33c>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fe2:	f7fe f833 	bl	800104c <HAL_GetTick>
 8002fe6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003000:	2b01      	cmp	r3, #1
 8003002:	d00f      	beq.n	8003024 <HAL_SPI_TransmitReceive+0x70>
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800300a:	d107      	bne.n	800301c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d103      	bne.n	800301c <HAL_SPI_TransmitReceive+0x68>
 8003014:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003018:	2b04      	cmp	r3, #4
 800301a:	d003      	beq.n	8003024 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800301c:	2302      	movs	r3, #2
 800301e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003022:	e15b      	b.n	80032dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_SPI_TransmitReceive+0x82>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_SPI_TransmitReceive+0x82>
 8003030:	887b      	ldrh	r3, [r7, #2]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d103      	bne.n	800303e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800303c:	e14e      	b.n	80032dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b04      	cmp	r3, #4
 8003048:	d003      	beq.n	8003052 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2205      	movs	r2, #5
 800304e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	887a      	ldrh	r2, [r7, #2]
 8003062:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	887a      	ldrh	r2, [r7, #2]
 800307a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d007      	beq.n	80030a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ae:	d178      	bne.n	80031a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_SPI_TransmitReceive+0x10a>
 80030b8:	8b7b      	ldrh	r3, [r7, #26]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d166      	bne.n	800318c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	881a      	ldrh	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	1c9a      	adds	r2, r3, #2
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030e2:	e053      	b.n	800318c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d11b      	bne.n	800312a <HAL_SPI_TransmitReceive+0x176>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d016      	beq.n	800312a <HAL_SPI_TransmitReceive+0x176>
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d113      	bne.n	800312a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	881a      	ldrh	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	1c9a      	adds	r2, r3, #2
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d119      	bne.n	800316c <HAL_SPI_TransmitReceive+0x1b8>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d014      	beq.n	800316c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	b292      	uxth	r2, r2
 800314e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	1c9a      	adds	r2, r3, #2
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003168:	2301      	movs	r3, #1
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800316c:	f7fd ff6e 	bl	800104c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003178:	429a      	cmp	r2, r3
 800317a:	d807      	bhi.n	800318c <HAL_SPI_TransmitReceive+0x1d8>
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d003      	beq.n	800318c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800318a:	e0a7      	b.n	80032dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1a6      	bne.n	80030e4 <HAL_SPI_TransmitReceive+0x130>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1a1      	bne.n	80030e4 <HAL_SPI_TransmitReceive+0x130>
 80031a0:	e07c      	b.n	800329c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0x1fc>
 80031aa:	8b7b      	ldrh	r3, [r7, #26]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d16b      	bne.n	8003288 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	7812      	ldrb	r2, [r2, #0]
 80031bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031d6:	e057      	b.n	8003288 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d11c      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x26c>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d017      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x26c>
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d114      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	330c      	adds	r3, #12
 8003200:	7812      	ldrb	r2, [r2, #0]
 8003202:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d119      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x2ae>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d014      	beq.n	8003262 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800325e:	2301      	movs	r3, #1
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003262:	f7fd fef3 	bl	800104c <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800326e:	429a      	cmp	r2, r3
 8003270:	d803      	bhi.n	800327a <HAL_SPI_TransmitReceive+0x2c6>
 8003272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d102      	bne.n	8003280 <HAL_SPI_TransmitReceive+0x2cc>
 800327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327c:	2b00      	cmp	r3, #0
 800327e:	d103      	bne.n	8003288 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003286:	e029      	b.n	80032dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1a2      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x224>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d19d      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800329c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f917 	bl	80034d4 <SPI_EndRxTxTransaction>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d006      	beq.n	80032ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2220      	movs	r2, #32
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80032b8:	e010      	b.n	80032dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	e000      	b.n	80032dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80032da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3730      	adds	r7, #48	; 0x30
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003308:	f7fd fea0 	bl	800104c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	4413      	add	r3, r2
 8003316:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003318:	f7fd fe98 	bl	800104c <HAL_GetTick>
 800331c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800331e:	4b39      	ldr	r3, [pc, #228]	; (8003404 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	015b      	lsls	r3, r3, #5
 8003324:	0d1b      	lsrs	r3, r3, #20
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800332e:	e054      	b.n	80033da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d050      	beq.n	80033da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003338:	f7fd fe88 	bl	800104c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	429a      	cmp	r2, r3
 8003346:	d902      	bls.n	800334e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d13d      	bne.n	80033ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800335c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003366:	d111      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003370:	d004      	beq.n	800337c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337a:	d107      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800338a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003394:	d10f      	bne.n	80033b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e017      	b.n	80033fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4013      	ands	r3, r2
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d19b      	bne.n	8003330 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000008 	.word	0x20000008

08003408 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341c:	d111      	bne.n	8003442 <SPI_EndRxTransaction+0x3a>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003426:	d004      	beq.n	8003432 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003430:	d107      	bne.n	8003442 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003440:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344a:	d12a      	bne.n	80034a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003454:	d012      	beq.n	800347c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2200      	movs	r2, #0
 800345e:	2180      	movs	r1, #128	; 0x80
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f7ff ff49 	bl	80032f8 <SPI_WaitFlagStateUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d02d      	beq.n	80034c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e026      	b.n	80034ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2200      	movs	r2, #0
 8003484:	2101      	movs	r1, #1
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f7ff ff36 	bl	80032f8 <SPI_WaitFlagStateUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d01a      	beq.n	80034c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	f043 0220 	orr.w	r2, r3, #32
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e013      	b.n	80034ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2101      	movs	r1, #1
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff ff23 	bl	80032f8 <SPI_WaitFlagStateUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e000      	b.n	80034ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034e0:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <SPI_EndRxTxTransaction+0x7c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <SPI_EndRxTxTransaction+0x80>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	0d5b      	lsrs	r3, r3, #21
 80034ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034f0:	fb02 f303 	mul.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034fe:	d112      	bne.n	8003526 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2200      	movs	r2, #0
 8003508:	2180      	movs	r1, #128	; 0x80
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff fef4 	bl	80032f8 <SPI_WaitFlagStateUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e00f      	b.n	8003546 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3b01      	subs	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	2b80      	cmp	r3, #128	; 0x80
 800353e:	d0f2      	beq.n	8003526 <SPI_EndRxTxTransaction+0x52>
 8003540:	e000      	b.n	8003544 <SPI_EndRxTxTransaction+0x70>
        break;
 8003542:	bf00      	nop
  }

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000008 	.word	0x20000008
 8003554:	165e9f81 	.word	0x165e9f81

08003558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e041      	b.n	80035ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f002 fee2 	bl	8006348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f000 fd20 	bl	8003fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d001      	beq.n	8003610 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e046      	b.n	800369e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a23      	ldr	r2, [pc, #140]	; (80036ac <HAL_TIM_Base_Start+0xb4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d022      	beq.n	8003668 <HAL_TIM_Base_Start+0x70>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362a:	d01d      	beq.n	8003668 <HAL_TIM_Base_Start+0x70>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1f      	ldr	r2, [pc, #124]	; (80036b0 <HAL_TIM_Base_Start+0xb8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d018      	beq.n	8003668 <HAL_TIM_Base_Start+0x70>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1e      	ldr	r2, [pc, #120]	; (80036b4 <HAL_TIM_Base_Start+0xbc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d013      	beq.n	8003668 <HAL_TIM_Base_Start+0x70>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <HAL_TIM_Base_Start+0xc0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00e      	beq.n	8003668 <HAL_TIM_Base_Start+0x70>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1b      	ldr	r2, [pc, #108]	; (80036bc <HAL_TIM_Base_Start+0xc4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d009      	beq.n	8003668 <HAL_TIM_Base_Start+0x70>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <HAL_TIM_Base_Start+0xc8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <HAL_TIM_Base_Start+0x70>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <HAL_TIM_Base_Start+0xcc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d111      	bne.n	800368c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b06      	cmp	r3, #6
 8003678:	d010      	beq.n	800369c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368a:	e007      	b.n	800369c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40010000 	.word	0x40010000
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000800 	.word	0x40000800
 80036b8:	40000c00 	.word	0x40000c00
 80036bc:	40010400 	.word	0x40010400
 80036c0:	40014000 	.word	0x40014000
 80036c4:	40001800 	.word	0x40001800

080036c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d001      	beq.n	80036e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e04e      	b.n	800377e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a23      	ldr	r2, [pc, #140]	; (800378c <HAL_TIM_Base_Start_IT+0xc4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d022      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370a:	d01d      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <HAL_TIM_Base_Start_IT+0xc8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d018      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <HAL_TIM_Base_Start_IT+0xcc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d013      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1c      	ldr	r2, [pc, #112]	; (8003798 <HAL_TIM_Base_Start_IT+0xd0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00e      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1b      	ldr	r2, [pc, #108]	; (800379c <HAL_TIM_Base_Start_IT+0xd4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d009      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d111      	bne.n	800376c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b06      	cmp	r3, #6
 8003758:	d010      	beq.n	800377c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376a:	e007      	b.n	800377c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40010000 	.word	0x40010000
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800
 8003798:	40000c00 	.word	0x40000c00
 800379c:	40010400 	.word	0x40010400
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40001800 	.word	0x40001800

080037a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e041      	b.n	800383e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f002 fdfe 	bl	80063d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f000 fbf8 	bl	8003fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_TIM_PWM_Start+0x24>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e022      	b.n	80038b2 <HAL_TIM_PWM_Start+0x6a>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b04      	cmp	r3, #4
 8003870:	d109      	bne.n	8003886 <HAL_TIM_PWM_Start+0x3e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b01      	cmp	r3, #1
 800387c:	bf14      	ite	ne
 800387e:	2301      	movne	r3, #1
 8003880:	2300      	moveq	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	e015      	b.n	80038b2 <HAL_TIM_PWM_Start+0x6a>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d109      	bne.n	80038a0 <HAL_TIM_PWM_Start+0x58>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e008      	b.n	80038b2 <HAL_TIM_PWM_Start+0x6a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	bf14      	ite	ne
 80038ac:	2301      	movne	r3, #1
 80038ae:	2300      	moveq	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e07c      	b.n	80039b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_TIM_PWM_Start+0x82>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c8:	e013      	b.n	80038f2 <HAL_TIM_PWM_Start+0xaa>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d104      	bne.n	80038da <HAL_TIM_PWM_Start+0x92>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d8:	e00b      	b.n	80038f2 <HAL_TIM_PWM_Start+0xaa>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d104      	bne.n	80038ea <HAL_TIM_PWM_Start+0xa2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e8:	e003      	b.n	80038f2 <HAL_TIM_PWM_Start+0xaa>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2201      	movs	r2, #1
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fe58 	bl	80045b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a2d      	ldr	r2, [pc, #180]	; (80039bc <HAL_TIM_PWM_Start+0x174>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <HAL_TIM_PWM_Start+0xcc>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a2c      	ldr	r2, [pc, #176]	; (80039c0 <HAL_TIM_PWM_Start+0x178>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_TIM_PWM_Start+0xd0>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <HAL_TIM_PWM_Start+0xd2>
 8003918:	2300      	movs	r3, #0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a22      	ldr	r2, [pc, #136]	; (80039bc <HAL_TIM_PWM_Start+0x174>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d022      	beq.n	800397e <HAL_TIM_PWM_Start+0x136>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003940:	d01d      	beq.n	800397e <HAL_TIM_PWM_Start+0x136>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <HAL_TIM_PWM_Start+0x17c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d018      	beq.n	800397e <HAL_TIM_PWM_Start+0x136>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1d      	ldr	r2, [pc, #116]	; (80039c8 <HAL_TIM_PWM_Start+0x180>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <HAL_TIM_PWM_Start+0x136>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1c      	ldr	r2, [pc, #112]	; (80039cc <HAL_TIM_PWM_Start+0x184>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00e      	beq.n	800397e <HAL_TIM_PWM_Start+0x136>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a16      	ldr	r2, [pc, #88]	; (80039c0 <HAL_TIM_PWM_Start+0x178>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d009      	beq.n	800397e <HAL_TIM_PWM_Start+0x136>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_TIM_PWM_Start+0x188>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d004      	beq.n	800397e <HAL_TIM_PWM_Start+0x136>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <HAL_TIM_PWM_Start+0x18c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d111      	bne.n	80039a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b06      	cmp	r3, #6
 800398e:	d010      	beq.n	80039b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a0:	e007      	b.n	80039b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40010000 	.word	0x40010000
 80039c0:	40010400 	.word	0x40010400
 80039c4:	40000400 	.word	0x40000400
 80039c8:	40000800 	.word	0x40000800
 80039cc:	40000c00 	.word	0x40000c00
 80039d0:	40014000 	.word	0x40014000
 80039d4:	40001800 	.word	0x40001800

080039d8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e041      	b.n	8003a70 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f002 fc71 	bl	80062e8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3304      	adds	r3, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4610      	mov	r0, r2
 8003a1a:	f000 fadf 	bl	8003fdc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0208 	bic.w	r2, r2, #8
 8003a2c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6819      	ldr	r1, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d122      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0202 	mvn.w	r2, #2
 8003aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fa70 	bl	8003fa0 <HAL_TIM_IC_CaptureCallback>
 8003ac0:	e005      	b.n	8003ace <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fa62 	bl	8003f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fa73 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d122      	bne.n	8003b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d11b      	bne.n	8003b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0204 	mvn.w	r2, #4
 8003af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2202      	movs	r2, #2
 8003afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fa46 	bl	8003fa0 <HAL_TIM_IC_CaptureCallback>
 8003b14:	e005      	b.n	8003b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fa38 	bl	8003f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fa49 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d122      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d11b      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0208 	mvn.w	r2, #8
 8003b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2204      	movs	r2, #4
 8003b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fa1c 	bl	8003fa0 <HAL_TIM_IC_CaptureCallback>
 8003b68:	e005      	b.n	8003b76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fa0e 	bl	8003f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fa1f 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b10      	cmp	r3, #16
 8003b88:	d122      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d11b      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0210 	mvn.w	r2, #16
 8003ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f9f2 	bl	8003fa0 <HAL_TIM_IC_CaptureCallback>
 8003bbc:	e005      	b.n	8003bca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f9e4 	bl	8003f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f9f5 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d10e      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d107      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0201 	mvn.w	r2, #1
 8003bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f002 f98a 	bl	8005f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c06:	2b80      	cmp	r3, #128	; 0x80
 8003c08:	d10e      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c14:	2b80      	cmp	r3, #128	; 0x80
 8003c16:	d107      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fdc2 	bl	80047ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b40      	cmp	r3, #64	; 0x40
 8003c34:	d10e      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d107      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f9ba 	bl	8003fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d10e      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d107      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0220 	mvn.w	r2, #32
 8003c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fd8c 	bl	8004798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c80:	bf00      	nop
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e0ac      	b.n	8003dfc <HAL_TIM_PWM_ConfigChannel+0x174>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	f200 809f 	bhi.w	8003df0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003cb2:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003ced 	.word	0x08003ced
 8003cbc:	08003df1 	.word	0x08003df1
 8003cc0:	08003df1 	.word	0x08003df1
 8003cc4:	08003df1 	.word	0x08003df1
 8003cc8:	08003d2d 	.word	0x08003d2d
 8003ccc:	08003df1 	.word	0x08003df1
 8003cd0:	08003df1 	.word	0x08003df1
 8003cd4:	08003df1 	.word	0x08003df1
 8003cd8:	08003d6f 	.word	0x08003d6f
 8003cdc:	08003df1 	.word	0x08003df1
 8003ce0:	08003df1 	.word	0x08003df1
 8003ce4:	08003df1 	.word	0x08003df1
 8003ce8:	08003daf 	.word	0x08003daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fa12 	bl	800411c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0208 	orr.w	r2, r2, #8
 8003d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0204 	bic.w	r2, r2, #4
 8003d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6999      	ldr	r1, [r3, #24]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	619a      	str	r2, [r3, #24]
      break;
 8003d2a:	e062      	b.n	8003df2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fa62 	bl	80041fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6999      	ldr	r1, [r3, #24]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	021a      	lsls	r2, r3, #8
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	619a      	str	r2, [r3, #24]
      break;
 8003d6c:	e041      	b.n	8003df2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fab7 	bl	80042e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0208 	orr.w	r2, r2, #8
 8003d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0204 	bic.w	r2, r2, #4
 8003d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69d9      	ldr	r1, [r3, #28]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	61da      	str	r2, [r3, #28]
      break;
 8003dac:	e021      	b.n	8003df2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fb0b 	bl	80043d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69d9      	ldr	r1, [r3, #28]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	021a      	lsls	r2, r3, #8
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	61da      	str	r2, [r3, #28]
      break;
 8003dee:	e000      	b.n	8003df2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003df0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_TIM_ConfigClockSource+0x18>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e0b3      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x180>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e54:	d03e      	beq.n	8003ed4 <HAL_TIM_ConfigClockSource+0xd0>
 8003e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5a:	f200 8087 	bhi.w	8003f6c <HAL_TIM_ConfigClockSource+0x168>
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e62:	f000 8085 	beq.w	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6a:	d87f      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x168>
 8003e6c:	2b70      	cmp	r3, #112	; 0x70
 8003e6e:	d01a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0xa2>
 8003e70:	2b70      	cmp	r3, #112	; 0x70
 8003e72:	d87b      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x168>
 8003e74:	2b60      	cmp	r3, #96	; 0x60
 8003e76:	d050      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0x116>
 8003e78:	2b60      	cmp	r3, #96	; 0x60
 8003e7a:	d877      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x168>
 8003e7c:	2b50      	cmp	r3, #80	; 0x50
 8003e7e:	d03c      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0xf6>
 8003e80:	2b50      	cmp	r3, #80	; 0x50
 8003e82:	d873      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x168>
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d058      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0x136>
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	d86f      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x168>
 8003e8c:	2b30      	cmp	r3, #48	; 0x30
 8003e8e:	d064      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x156>
 8003e90:	2b30      	cmp	r3, #48	; 0x30
 8003e92:	d86b      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x168>
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d060      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x156>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d867      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x168>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05c      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x156>
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d05a      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ea4:	e062      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6899      	ldr	r1, [r3, #8]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f000 fb5b 	bl	8004570 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ec8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	609a      	str	r2, [r3, #8]
      break;
 8003ed2:	e04e      	b.n	8003f72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6899      	ldr	r1, [r3, #8]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f000 fb44 	bl	8004570 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ef6:	609a      	str	r2, [r3, #8]
      break;
 8003ef8:	e03b      	b.n	8003f72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6859      	ldr	r1, [r3, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f000 fab8 	bl	800447c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2150      	movs	r1, #80	; 0x50
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fb11 	bl	800453a <TIM_ITRx_SetConfig>
      break;
 8003f18:	e02b      	b.n	8003f72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6859      	ldr	r1, [r3, #4]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	461a      	mov	r2, r3
 8003f28:	f000 fad7 	bl	80044da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2160      	movs	r1, #96	; 0x60
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fb01 	bl	800453a <TIM_ITRx_SetConfig>
      break;
 8003f38:	e01b      	b.n	8003f72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f000 fa98 	bl	800447c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2140      	movs	r1, #64	; 0x40
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 faf1 	bl	800453a <TIM_ITRx_SetConfig>
      break;
 8003f58:	e00b      	b.n	8003f72 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f000 fae8 	bl	800453a <TIM_ITRx_SetConfig>
        break;
 8003f6a:	e002      	b.n	8003f72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f6c:	bf00      	nop
 8003f6e:	e000      	b.n	8003f72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a40      	ldr	r2, [pc, #256]	; (80040f0 <TIM_Base_SetConfig+0x114>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffa:	d00f      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3d      	ldr	r2, [pc, #244]	; (80040f4 <TIM_Base_SetConfig+0x118>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00b      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3c      	ldr	r2, [pc, #240]	; (80040f8 <TIM_Base_SetConfig+0x11c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d007      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a3b      	ldr	r2, [pc, #236]	; (80040fc <TIM_Base_SetConfig+0x120>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d003      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a3a      	ldr	r2, [pc, #232]	; (8004100 <TIM_Base_SetConfig+0x124>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d108      	bne.n	800402e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2f      	ldr	r2, [pc, #188]	; (80040f0 <TIM_Base_SetConfig+0x114>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d02b      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403c:	d027      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <TIM_Base_SetConfig+0x118>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d023      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a2b      	ldr	r2, [pc, #172]	; (80040f8 <TIM_Base_SetConfig+0x11c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01f      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a2a      	ldr	r2, [pc, #168]	; (80040fc <TIM_Base_SetConfig+0x120>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01b      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a29      	ldr	r2, [pc, #164]	; (8004100 <TIM_Base_SetConfig+0x124>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d017      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a28      	ldr	r2, [pc, #160]	; (8004104 <TIM_Base_SetConfig+0x128>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a27      	ldr	r2, [pc, #156]	; (8004108 <TIM_Base_SetConfig+0x12c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00f      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a26      	ldr	r2, [pc, #152]	; (800410c <TIM_Base_SetConfig+0x130>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00b      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a25      	ldr	r2, [pc, #148]	; (8004110 <TIM_Base_SetConfig+0x134>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a24      	ldr	r2, [pc, #144]	; (8004114 <TIM_Base_SetConfig+0x138>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d003      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a23      	ldr	r2, [pc, #140]	; (8004118 <TIM_Base_SetConfig+0x13c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d108      	bne.n	80040a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a0a      	ldr	r2, [pc, #40]	; (80040f0 <TIM_Base_SetConfig+0x114>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d003      	beq.n	80040d4 <TIM_Base_SetConfig+0xf8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a0c      	ldr	r2, [pc, #48]	; (8004100 <TIM_Base_SetConfig+0x124>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d103      	bne.n	80040dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	615a      	str	r2, [r3, #20]
}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40000400 	.word	0x40000400
 80040f8:	40000800 	.word	0x40000800
 80040fc:	40000c00 	.word	0x40000c00
 8004100:	40010400 	.word	0x40010400
 8004104:	40014000 	.word	0x40014000
 8004108:	40014400 	.word	0x40014400
 800410c:	40014800 	.word	0x40014800
 8004110:	40001800 	.word	0x40001800
 8004114:	40001c00 	.word	0x40001c00
 8004118:	40002000 	.word	0x40002000

0800411c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0201 	bic.w	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0303 	bic.w	r3, r3, #3
 8004152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f023 0302 	bic.w	r3, r3, #2
 8004164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a20      	ldr	r2, [pc, #128]	; (80041f4 <TIM_OC1_SetConfig+0xd8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_OC1_SetConfig+0x64>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <TIM_OC1_SetConfig+0xdc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d10c      	bne.n	800419a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f023 0308 	bic.w	r3, r3, #8
 8004186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f023 0304 	bic.w	r3, r3, #4
 8004198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <TIM_OC1_SetConfig+0xd8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d003      	beq.n	80041aa <TIM_OC1_SetConfig+0x8e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <TIM_OC1_SetConfig+0xdc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d111      	bne.n	80041ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40010400 	.word	0x40010400

080041fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f023 0210 	bic.w	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0320 	bic.w	r3, r3, #32
 8004246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <TIM_OC2_SetConfig+0xe4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d003      	beq.n	8004264 <TIM_OC2_SetConfig+0x68>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a21      	ldr	r2, [pc, #132]	; (80042e4 <TIM_OC2_SetConfig+0xe8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d10d      	bne.n	8004280 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800426a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <TIM_OC2_SetConfig+0xe4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_OC2_SetConfig+0x94>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <TIM_OC2_SetConfig+0xe8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d113      	bne.n	80042b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800429e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40010000 	.word	0x40010000
 80042e4:	40010400 	.word	0x40010400

080042e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0303 	bic.w	r3, r3, #3
 800431e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a21      	ldr	r2, [pc, #132]	; (80043c8 <TIM_OC3_SetConfig+0xe0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_OC3_SetConfig+0x66>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a20      	ldr	r2, [pc, #128]	; (80043cc <TIM_OC3_SetConfig+0xe4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d10d      	bne.n	800436a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a16      	ldr	r2, [pc, #88]	; (80043c8 <TIM_OC3_SetConfig+0xe0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d003      	beq.n	800437a <TIM_OC3_SetConfig+0x92>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a15      	ldr	r2, [pc, #84]	; (80043cc <TIM_OC3_SetConfig+0xe4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d113      	bne.n	80043a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	621a      	str	r2, [r3, #32]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40010400 	.word	0x40010400

080043d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800441a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	031b      	lsls	r3, r3, #12
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a12      	ldr	r2, [pc, #72]	; (8004474 <TIM_OC4_SetConfig+0xa4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_OC4_SetConfig+0x68>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a11      	ldr	r2, [pc, #68]	; (8004478 <TIM_OC4_SetConfig+0xa8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d109      	bne.n	800444c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800443e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	019b      	lsls	r3, r3, #6
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	621a      	str	r2, [r3, #32]
}
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40010000 	.word	0x40010000
 8004478:	40010400 	.word	0x40010400

0800447c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0201 	bic.w	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f023 030a 	bic.w	r3, r3, #10
 80044b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044da:	b480      	push	{r7}
 80044dc:	b087      	sub	sp, #28
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f023 0210 	bic.w	r2, r3, #16
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	031b      	lsls	r3, r3, #12
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004516:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800453a:	b480      	push	{r7}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	f043 0307 	orr.w	r3, r3, #7
 800455c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	609a      	str	r2, [r3, #8]
}
 8004564:	bf00      	nop
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800458a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	021a      	lsls	r2, r3, #8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	431a      	orrs	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4313      	orrs	r3, r2
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	609a      	str	r2, [r3, #8]
}
 80045a4:	bf00      	nop
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 031f 	and.w	r3, r3, #31
 80045c2:	2201      	movs	r2, #1
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a1a      	ldr	r2, [r3, #32]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	401a      	ands	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1a      	ldr	r2, [r3, #32]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	fa01 f303 	lsl.w	r3, r1, r3
 80045e8:	431a      	orrs	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004610:	2302      	movs	r3, #2
 8004612:	e05a      	b.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d022      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004660:	d01d      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d018      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1b      	ldr	r2, [pc, #108]	; (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d013      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1a      	ldr	r2, [pc, #104]	; (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00e      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a17      	ldr	r2, [pc, #92]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d004      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a15      	ldr	r2, [pc, #84]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10c      	bne.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40000c00 	.word	0x40000c00
 80046e8:	40010400 	.word	0x40010400
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40001800 	.word	0x40001800

080046f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800470c:	2302      	movs	r3, #2
 800470e:	e03d      	b.n	800478c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e03f      	b.n	8004852 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f001 fe4e 	bl	8006488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2224      	movs	r2, #36	; 0x24
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f9a7 	bl	8004b58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695a      	ldr	r2, [r3, #20]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b08a      	sub	sp, #40	; 0x28
 800485e:	af02      	add	r7, sp, #8
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	603b      	str	r3, [r7, #0]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b20      	cmp	r3, #32
 8004878:	d17c      	bne.n	8004974 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_UART_Transmit+0x2c>
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e075      	b.n	8004976 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_UART_Transmit+0x3e>
 8004894:	2302      	movs	r3, #2
 8004896:	e06e      	b.n	8004976 <HAL_UART_Transmit+0x11c>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2221      	movs	r2, #33	; 0x21
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ae:	f7fc fbcd 	bl	800104c <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	88fa      	ldrh	r2, [r7, #6]
 80048be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c8:	d108      	bne.n	80048dc <HAL_UART_Transmit+0x82>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d104      	bne.n	80048dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	e003      	b.n	80048e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048ec:	e02a      	b.n	8004944 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2200      	movs	r2, #0
 80048f6:	2180      	movs	r1, #128	; 0x80
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 f8e2 	bl	8004ac2 <UART_WaitOnFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e036      	b.n	8004976 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800491c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	3302      	adds	r3, #2
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	e007      	b.n	8004936 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	3301      	adds	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1cf      	bne.n	80048ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2200      	movs	r2, #0
 8004956:	2140      	movs	r1, #64	; 0x40
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f8b2 	bl	8004ac2 <UART_WaitOnFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e006      	b.n	8004976 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	e000      	b.n	8004976 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004974:	2302      	movs	r3, #2
  }
}
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b08a      	sub	sp, #40	; 0x28
 8004982:	af02      	add	r7, sp, #8
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b20      	cmp	r3, #32
 800499c:	f040 808c 	bne.w	8004ab8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_UART_Receive+0x2e>
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e084      	b.n	8004aba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_UART_Receive+0x40>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e07d      	b.n	8004aba <HAL_UART_Receive+0x13c>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2222      	movs	r2, #34	; 0x22
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049da:	f7fc fb37 	bl	800104c <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	88fa      	ldrh	r2, [r7, #6]
 80049ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f4:	d108      	bne.n	8004a08 <HAL_UART_Receive+0x8a>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d104      	bne.n	8004a08 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	e003      	b.n	8004a10 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004a18:	e043      	b.n	8004aa2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2200      	movs	r2, #0
 8004a22:	2120      	movs	r1, #32
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f84c 	bl	8004ac2 <UART_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e042      	b.n	8004aba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10c      	bne.n	8004a54 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	3302      	adds	r3, #2
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	e01f      	b.n	8004a94 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5c:	d007      	beq.n	8004a6e <HAL_UART_Receive+0xf0>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <HAL_UART_Receive+0xfe>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	e008      	b.n	8004a8e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	3301      	adds	r3, #1
 8004a92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1b6      	bne.n	8004a1a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e000      	b.n	8004aba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004ab8:	2302      	movs	r3, #2
  }
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3720      	adds	r7, #32
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad2:	e02c      	b.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ada:	d028      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ae2:	f7fc fab3 	bl	800104c <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d21d      	bcs.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b00:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695a      	ldr	r2, [r3, #20]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e00f      	b.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4013      	ands	r3, r2
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	bf0c      	ite	eq
 8004b3e:	2301      	moveq	r3, #1
 8004b40:	2300      	movne	r3, #0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d0c3      	beq.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	b09f      	sub	sp, #124	; 0x7c
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6e:	68d9      	ldr	r1, [r3, #12]
 8004b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	ea40 0301 	orr.w	r3, r0, r1
 8004b78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b9c:	f021 010c 	bic.w	r1, r1, #12
 8004ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb6:	6999      	ldr	r1, [r3, #24]
 8004bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	ea40 0301 	orr.w	r3, r0, r1
 8004bc0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4bc5      	ldr	r3, [pc, #788]	; (8004edc <UART_SetConfig+0x384>)
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d004      	beq.n	8004bd6 <UART_SetConfig+0x7e>
 8004bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4bc3      	ldr	r3, [pc, #780]	; (8004ee0 <UART_SetConfig+0x388>)
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d103      	bne.n	8004bde <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bd6:	f7fd fbef 	bl	80023b8 <HAL_RCC_GetPCLK2Freq>
 8004bda:	6778      	str	r0, [r7, #116]	; 0x74
 8004bdc:	e002      	b.n	8004be4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bde:	f7fd fbd7 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8004be2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bec:	f040 80b6 	bne.w	8004d5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf2:	461c      	mov	r4, r3
 8004bf4:	f04f 0500 	mov.w	r5, #0
 8004bf8:	4622      	mov	r2, r4
 8004bfa:	462b      	mov	r3, r5
 8004bfc:	1891      	adds	r1, r2, r2
 8004bfe:	6439      	str	r1, [r7, #64]	; 0x40
 8004c00:	415b      	adcs	r3, r3
 8004c02:	647b      	str	r3, [r7, #68]	; 0x44
 8004c04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c08:	1912      	adds	r2, r2, r4
 8004c0a:	eb45 0303 	adc.w	r3, r5, r3
 8004c0e:	f04f 0000 	mov.w	r0, #0
 8004c12:	f04f 0100 	mov.w	r1, #0
 8004c16:	00d9      	lsls	r1, r3, #3
 8004c18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c1c:	00d0      	lsls	r0, r2, #3
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	1911      	adds	r1, r2, r4
 8004c24:	6639      	str	r1, [r7, #96]	; 0x60
 8004c26:	416b      	adcs	r3, r5
 8004c28:	667b      	str	r3, [r7, #100]	; 0x64
 8004c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c44:	f7fc f820 	bl	8000c88 <__aeabi_uldivmod>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4ba5      	ldr	r3, [pc, #660]	; (8004ee4 <UART_SetConfig+0x38c>)
 8004c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	011e      	lsls	r6, r3, #4
 8004c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c58:	461c      	mov	r4, r3
 8004c5a:	f04f 0500 	mov.w	r5, #0
 8004c5e:	4622      	mov	r2, r4
 8004c60:	462b      	mov	r3, r5
 8004c62:	1891      	adds	r1, r2, r2
 8004c64:	6339      	str	r1, [r7, #48]	; 0x30
 8004c66:	415b      	adcs	r3, r3
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
 8004c6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c6e:	1912      	adds	r2, r2, r4
 8004c70:	eb45 0303 	adc.w	r3, r5, r3
 8004c74:	f04f 0000 	mov.w	r0, #0
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	00d9      	lsls	r1, r3, #3
 8004c7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c82:	00d0      	lsls	r0, r2, #3
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	1911      	adds	r1, r2, r4
 8004c8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c8c:	416b      	adcs	r3, r5
 8004c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	461a      	mov	r2, r3
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	1891      	adds	r1, r2, r2
 8004c9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c9e:	415b      	adcs	r3, r3
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ca6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004caa:	f7fb ffed 	bl	8000c88 <__aeabi_uldivmod>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4b8c      	ldr	r3, [pc, #560]	; (8004ee4 <UART_SetConfig+0x38c>)
 8004cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	2164      	movs	r1, #100	; 0x64
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	3332      	adds	r3, #50	; 0x32
 8004cc6:	4a87      	ldr	r2, [pc, #540]	; (8004ee4 <UART_SetConfig+0x38c>)
 8004cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cd4:	441e      	add	r6, r3
 8004cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f04f 0100 	mov.w	r1, #0
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	1894      	adds	r4, r2, r2
 8004ce4:	623c      	str	r4, [r7, #32]
 8004ce6:	415b      	adcs	r3, r3
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cee:	1812      	adds	r2, r2, r0
 8004cf0:	eb41 0303 	adc.w	r3, r1, r3
 8004cf4:	f04f 0400 	mov.w	r4, #0
 8004cf8:	f04f 0500 	mov.w	r5, #0
 8004cfc:	00dd      	lsls	r5, r3, #3
 8004cfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d02:	00d4      	lsls	r4, r2, #3
 8004d04:	4622      	mov	r2, r4
 8004d06:	462b      	mov	r3, r5
 8004d08:	1814      	adds	r4, r2, r0
 8004d0a:	653c      	str	r4, [r7, #80]	; 0x50
 8004d0c:	414b      	adcs	r3, r1
 8004d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	1891      	adds	r1, r2, r2
 8004d1c:	61b9      	str	r1, [r7, #24]
 8004d1e:	415b      	adcs	r3, r3
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d2a:	f7fb ffad 	bl	8000c88 <__aeabi_uldivmod>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4b6c      	ldr	r3, [pc, #432]	; (8004ee4 <UART_SetConfig+0x38c>)
 8004d34:	fba3 1302 	umull	r1, r3, r3, r2
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	2164      	movs	r1, #100	; 0x64
 8004d3c:	fb01 f303 	mul.w	r3, r1, r3
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	3332      	adds	r3, #50	; 0x32
 8004d46:	4a67      	ldr	r2, [pc, #412]	; (8004ee4 <UART_SetConfig+0x38c>)
 8004d48:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	f003 0207 	and.w	r2, r3, #7
 8004d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4432      	add	r2, r6
 8004d58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d5a:	e0b9      	b.n	8004ed0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d5e:	461c      	mov	r4, r3
 8004d60:	f04f 0500 	mov.w	r5, #0
 8004d64:	4622      	mov	r2, r4
 8004d66:	462b      	mov	r3, r5
 8004d68:	1891      	adds	r1, r2, r2
 8004d6a:	6139      	str	r1, [r7, #16]
 8004d6c:	415b      	adcs	r3, r3
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d74:	1912      	adds	r2, r2, r4
 8004d76:	eb45 0303 	adc.w	r3, r5, r3
 8004d7a:	f04f 0000 	mov.w	r0, #0
 8004d7e:	f04f 0100 	mov.w	r1, #0
 8004d82:	00d9      	lsls	r1, r3, #3
 8004d84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d88:	00d0      	lsls	r0, r2, #3
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	eb12 0804 	adds.w	r8, r2, r4
 8004d92:	eb43 0905 	adc.w	r9, r3, r5
 8004d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f04f 0100 	mov.w	r1, #0
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	008b      	lsls	r3, r1, #2
 8004daa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dae:	0082      	lsls	r2, r0, #2
 8004db0:	4640      	mov	r0, r8
 8004db2:	4649      	mov	r1, r9
 8004db4:	f7fb ff68 	bl	8000c88 <__aeabi_uldivmod>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4b49      	ldr	r3, [pc, #292]	; (8004ee4 <UART_SetConfig+0x38c>)
 8004dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	011e      	lsls	r6, r3, #4
 8004dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	1894      	adds	r4, r2, r2
 8004dd4:	60bc      	str	r4, [r7, #8]
 8004dd6:	415b      	adcs	r3, r3
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dde:	1812      	adds	r2, r2, r0
 8004de0:	eb41 0303 	adc.w	r3, r1, r3
 8004de4:	f04f 0400 	mov.w	r4, #0
 8004de8:	f04f 0500 	mov.w	r5, #0
 8004dec:	00dd      	lsls	r5, r3, #3
 8004dee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004df2:	00d4      	lsls	r4, r2, #3
 8004df4:	4622      	mov	r2, r4
 8004df6:	462b      	mov	r3, r5
 8004df8:	1814      	adds	r4, r2, r0
 8004dfa:	64bc      	str	r4, [r7, #72]	; 0x48
 8004dfc:	414b      	adcs	r3, r1
 8004dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f04f 0100 	mov.w	r1, #0
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	008b      	lsls	r3, r1, #2
 8004e14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e18:	0082      	lsls	r2, r0, #2
 8004e1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e1e:	f7fb ff33 	bl	8000c88 <__aeabi_uldivmod>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <UART_SetConfig+0x38c>)
 8004e28:	fba3 1302 	umull	r1, r3, r3, r2
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	2164      	movs	r1, #100	; 0x64
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	3332      	adds	r3, #50	; 0x32
 8004e3a:	4a2a      	ldr	r2, [pc, #168]	; (8004ee4 <UART_SetConfig+0x38c>)
 8004e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e46:	441e      	add	r6, r3
 8004e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f04f 0100 	mov.w	r1, #0
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	1894      	adds	r4, r2, r2
 8004e56:	603c      	str	r4, [r7, #0]
 8004e58:	415b      	adcs	r3, r3
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e60:	1812      	adds	r2, r2, r0
 8004e62:	eb41 0303 	adc.w	r3, r1, r3
 8004e66:	f04f 0400 	mov.w	r4, #0
 8004e6a:	f04f 0500 	mov.w	r5, #0
 8004e6e:	00dd      	lsls	r5, r3, #3
 8004e70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e74:	00d4      	lsls	r4, r2, #3
 8004e76:	4622      	mov	r2, r4
 8004e78:	462b      	mov	r3, r5
 8004e7a:	eb12 0a00 	adds.w	sl, r2, r0
 8004e7e:	eb43 0b01 	adc.w	fp, r3, r1
 8004e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f04f 0100 	mov.w	r1, #0
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	008b      	lsls	r3, r1, #2
 8004e96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e9a:	0082      	lsls	r2, r0, #2
 8004e9c:	4650      	mov	r0, sl
 8004e9e:	4659      	mov	r1, fp
 8004ea0:	f7fb fef2 	bl	8000c88 <__aeabi_uldivmod>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4b0e      	ldr	r3, [pc, #56]	; (8004ee4 <UART_SetConfig+0x38c>)
 8004eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	2164      	movs	r1, #100	; 0x64
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	3332      	adds	r3, #50	; 0x32
 8004ebc:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <UART_SetConfig+0x38c>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	f003 020f 	and.w	r2, r3, #15
 8004ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4432      	add	r2, r6
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	377c      	adds	r7, #124	; 0x7c
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eda:	bf00      	nop
 8004edc:	40011000 	.word	0x40011000
 8004ee0:	40011400 	.word	0x40011400
 8004ee4:	51eb851f 	.word	0x51eb851f

08004ee8 <makeNSteps>:
#define T_CLOCK 	128000000 //apb1 timer clock
#define RES			1600
#define MAX_SPEED	3600
#define INITIAL_PERIOD 4

void makeNSteps(StepperMotor *motor, int steps, GPIO_PinState direction) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	71fb      	strb	r3, [r7, #7]
	//exit if:
	// 1. Speed is zero.
	// 2. Zero number of steps.
	// 3. Direction is set wrong.
	if (steps == 0 || motor->speed == 0 || direction < 0 || direction > 1)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80a2 	beq.w	8005042 <makeNSteps+0x15a>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	edd3 7a04 	vldr	s15, [r3, #16]
 8004f04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0c:	f000 8099 	beq.w	8005042 <makeNSteps+0x15a>
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	f200 8095 	bhi.w	8005042 <makeNSteps+0x15a>
		return;

	//if steps is negative, change direction and continue
	if (steps < 0) {
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	da0a      	bge.n	8004f34 <makeNSteps+0x4c>
		steps = steps * (-1);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	425b      	negs	r3, r3
 8004f22:	60bb      	str	r3, [r7, #8]
		if (direction == 1) {
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d102      	bne.n	8004f30 <makeNSteps+0x48>
			direction = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	71fb      	strb	r3, [r7, #7]
 8004f2e:	e001      	b.n	8004f34 <makeNSteps+0x4c>
		} else {
			direction = 1;
 8004f30:	2301      	movs	r3, #1
 8004f32:	71fb      	strb	r3, [r7, #7]
		}
	}

	// set given direction
	HAL_GPIO_WritePin(motor->dir_Port, motor->dir_Pin, direction);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6858      	ldr	r0, [r3, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	79fa      	ldrb	r2, [r7, #7]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f7fd f900 	bl	8002144 <HAL_GPIO_WritePin>

	while (steps > 256) {
 8004f44:	e03d      	b.n	8004fc2 <makeNSteps+0xda>
		motor->htim->Instance->RCR = 255;			// set number of PWM signals
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	22ff      	movs	r2, #255	; 0xff
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
		motor->htim->Instance->EGR = TIM_EGR_UG;		// update timer settings
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2201      	movs	r2, #1
 8004f58:	615a      	str	r2, [r3, #20]
		TIM_CHANNEL_STATE_SET_ALL(motor->htim, HAL_TIM_CHANNEL_STATE_READY);// set channel state to ready
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		motor->htim->Instance->SR &= 0xFFFE;// clear UIF - update interrupt flag
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6919      	ldr	r1, [r3, #16]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004f94:	400b      	ands	r3, r1
 8004f96:	6113      	str	r3, [r2, #16]
		HAL_TIM_PWM_Start(motor->htim, motor->stepChannel);	// generate PWM signals
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	f7fe fc50 	bl	8003848 <HAL_TIM_PWM_Start>
		steps -= 256;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fae:	60bb      	str	r3, [r7, #8]

		while ((motor->htim->Instance->SR & 0x01) == 0) {
 8004fb0:	bf00      	nop
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0f7      	beq.n	8004fb2 <makeNSteps+0xca>
	while (steps > 256) {
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc8:	dcbd      	bgt.n	8004f46 <makeNSteps+0x5e>
			//wait until 256 pulses are generated.
		}
	}

	motor->htim->Instance->RCR = steps - 1;			// set number of PWM signals
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	1e5a      	subs	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30
	motor->htim->Instance->EGR = TIM_EGR_UG;			// update timer settings
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	615a      	str	r2, [r3, #20]
	TIM_CHANNEL_STATE_SET_ALL(motor->htim, HAL_TIM_CHANNEL_STATE_READY);// set channel state to ready
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	motor->htim->Instance->SR &= 0xFFFE;	// clear UIF - update interrupt flag
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6919      	ldr	r1, [r3, #16]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800501a:	400b      	ands	r3, r1
 800501c:	6113      	str	r3, [r2, #16]
	HAL_TIM_PWM_Start(motor->htim, motor->stepChannel);	// generate PWM signals
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f7fe fc0d 	bl	8003848 <HAL_TIM_PWM_Start>
	while ((motor->htim->Instance->SR & 0x01) == 0) {
 800502e:	bf00      	nop
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f7      	beq.n	8005030 <makeNSteps+0x148>
 8005040:	e000      	b.n	8005044 <makeNSteps+0x15c>
		return;
 8005042:	bf00      	nop
		//wait until pulses are generated.
	}

}
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	0000      	movs	r0, r0
 800504c:	0000      	movs	r0, r0
	...

08005050 <rotate>:

float rotate(StepperMotor *motor, float rotationAngle, GPIO_PinState direction) {
 8005050:	b5b0      	push	{r4, r5, r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	ed87 0a02 	vstr	s0, [r7, #8]
 800505c:	460b      	mov	r3, r1
 800505e:	71fb      	strb	r3, [r7, #7]
	float stepAngle = (float) 360 / RES;		// rotation angle of each step
 8005060:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <rotate+0xc8>)
 8005062:	617b      	str	r3, [r7, #20]

//	int steps = round(rotationAngle * 3 * 30 * 2 / stepAngle);// whole number of steps for given rotation angle


	int steps = round(rotationAngle * 250.25 * 2 / stepAngle);// joint 2 arm
 8005064:	68b8      	ldr	r0, [r7, #8]
 8005066:	f7fb fa8f 	bl	8000588 <__aeabi_f2d>
 800506a:	a329      	add	r3, pc, #164	; (adr r3, 8005110 <rotate+0xc0>)
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f7fb fae2 	bl	8000638 <__aeabi_dmul>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	f7fb f924 	bl	80002cc <__adddf3>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4614      	mov	r4, r2
 800508a:	461d      	mov	r5, r3
 800508c:	6978      	ldr	r0, [r7, #20]
 800508e:	f7fb fa7b 	bl	8000588 <__aeabi_f2d>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4620      	mov	r0, r4
 8005098:	4629      	mov	r1, r5
 800509a:	f7fb fbf7 	bl	800088c <__aeabi_ddiv>
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	ec43 2b17 	vmov	d7, r2, r3
 80050a6:	eeb0 0a47 	vmov.f32	s0, s14
 80050aa:	eef0 0a67 	vmov.f32	s1, s15
 80050ae:	f004 f959 	bl	8009364 <round>
 80050b2:	ec53 2b10 	vmov	r2, r3, d0
 80050b6:	4610      	mov	r0, r2
 80050b8:	4619      	mov	r1, r3
 80050ba:	f7fb fd6d 	bl	8000b98 <__aeabi_d2iz>
 80050be:	4603      	mov	r3, r0
 80050c0:	613b      	str	r3, [r7, #16]


	//if rotation angle is less than one step angle, return rotationAngle
	if (steps == 0 || motor->speed == 0) {
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <rotate+0x88>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80050ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80050d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d6:	d102      	bne.n	80050de <rotate+0x8e>
		return rotationAngle;
 80050d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80050dc:	e012      	b.n	8005104 <rotate+0xb4>
	} else {
		//else make calculated whole number of steps
		makeNSteps(motor, steps, direction);
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	461a      	mov	r2, r3
 80050e2:	6939      	ldr	r1, [r7, #16]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff feff 	bl	8004ee8 <makeNSteps>
	}
	//return remaminder of the rotation angle
	return rotationAngle - steps * stepAngle;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	ee07 3a90 	vmov	s15, r3
 80050f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80050f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8005100:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005104:	eeb0 0a67 	vmov.f32	s0, s15
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bdb0      	pop	{r4, r5, r7, pc}
 800510e:	bf00      	nop
 8005110:	00000000 	.word	0x00000000
 8005114:	406f4800 	.word	0x406f4800
 8005118:	3e666666 	.word	0x3e666666
 800511c:	00000000 	.word	0x00000000

08005120 <setSpeed>:

void setSpeed(StepperMotor *motor, float speed) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	; 0x28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	ed87 0a00 	vstr	s0, [r7]
	float pulseFreq;								// frequency of single pulse
	int period = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
	int tmpPeriod = INITIAL_PERIOD;					// temporary period
 8005130:	2304      	movs	r3, #4
 8005132:	623b      	str	r3, [r7, #32]
	int prescalar;
	int tmpPrescalar;								// temporary prescalar 
	float tmpDeviation;								// temporary deviation
	float deviation = speed;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	61bb      	str	r3, [r7, #24]
	uint8_t flag = 1;
 8005138:	2301      	movs	r3, #1
 800513a:	75fb      	strb	r3, [r7, #23]

	// exit if speed is negative
	if (speed < 0)
 800513c:	edd7 7a00 	vldr	s15, [r7]
 8005140:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005148:	f100 80a6 	bmi.w	8005298 <setSpeed+0x178>
		return;
	//if speed is zero, assign speed and exit
	if (speed == 0) {
 800514c:	edd7 7a00 	vldr	s15, [r7]
 8005150:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005158:	d104      	bne.n	8005164 <setSpeed+0x44>
		motor->speed = 0;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	611a      	str	r2, [r3, #16]
		return;
 8005162:	e09a      	b.n	800529a <setSpeed+0x17a>
	}
	// if speed is greater than MAX_SPEED, decrease speed value to MAX_SPEED
	if (speed > MAX_SPEED) {
 8005164:	edd7 7a00 	vldr	s15, [r7]
 8005168:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80052a8 <setSpeed+0x188>
 800516c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005174:	dd01      	ble.n	800517a <setSpeed+0x5a>
		speed = MAX_SPEED;
 8005176:	4b4d      	ldr	r3, [pc, #308]	; (80052ac <setSpeed+0x18c>)
 8005178:	603b      	str	r3, [r7, #0]
	}
	//frequency of pwm signal
	pulseFreq = (float) speed * RES / 60;
 800517a:	edd7 7a00 	vldr	s15, [r7]
 800517e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80052b0 <setSpeed+0x190>
 8005182:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005186:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80052b4 <setSpeed+0x194>
 800518a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800518e:	edc7 7a04 	vstr	s15, [r7, #16]

	//searching suitable value of period and prescalar with less deviation.
	while (tmpPeriod < 65535 && flag) {
 8005192:	e060      	b.n	8005256 <setSpeed+0x136>
		tmpPrescalar = round(T_CLOCK / (pulseFreq * tmpPeriod));//calculating temporary Prescalar
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800519e:	edd7 7a04 	vldr	s15, [r7, #16]
 80051a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80052b8 <setSpeed+0x198>
 80051aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80051ae:	ee16 0a90 	vmov	r0, s13
 80051b2:	f7fb f9e9 	bl	8000588 <__aeabi_f2d>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	ec43 2b10 	vmov	d0, r2, r3
 80051be:	f004 f8d1 	bl	8009364 <round>
 80051c2:	ec53 2b10 	vmov	r2, r3, d0
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	f7fb fce5 	bl	8000b98 <__aeabi_d2iz>
 80051ce:	4603      	mov	r3, r0
 80051d0:	60fb      	str	r3, [r7, #12]
		tmpDeviation =
				abs(
						(int) (pulseFreq
								- (float) T_CLOCK / (tmpPeriod * tmpPrescalar)));//calculating deviation from desired speed
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	fb02 f303 	mul.w	r3, r2, r3
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051e2:	eddf 6a35 	vldr	s13, [pc, #212]	; 80052b8 <setSpeed+0x198>
 80051e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80051ee:	ee77 7a67 	vsub.f32	s15, s14, s15
						(int) (pulseFreq
 80051f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051f6:	ee17 3a90 	vmov	r3, s15
				abs(
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	bfb8      	it	lt
 80051fe:	425b      	neglt	r3, r3
		tmpDeviation =
 8005200:	ee07 3a90 	vmov	s15, r3
 8005204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005208:	edc7 7a02 	vstr	s15, [r7, #8]

		//if calculated deviation is less than previous deviation, save prescalar and period
		if (tmpDeviation < deviation && tmpPrescalar < 65535) {
 800520c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005210:	edd7 7a06 	vldr	s15, [r7, #24]
 8005214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521c:	d50a      	bpl.n	8005234 <setSpeed+0x114>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005224:	4293      	cmp	r3, r2
 8005226:	dc05      	bgt.n	8005234 <setSpeed+0x114>
			deviation = tmpDeviation;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	61bb      	str	r3, [r7, #24]
			prescalar = tmpPrescalar;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	61fb      	str	r3, [r7, #28]
			period = tmpPeriod;
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
		}

		//exit from while loop if speed value deviation is zero.
		if (deviation >= 0.0001) {
 8005234:	69b8      	ldr	r0, [r7, #24]
 8005236:	f7fb f9a7 	bl	8000588 <__aeabi_f2d>
 800523a:	a319      	add	r3, pc, #100	; (adr r3, 80052a0 <setSpeed+0x180>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f7fb fc80 	bl	8000b44 <__aeabi_dcmpge>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <setSpeed+0x132>
			tmpPeriod++;
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	3301      	adds	r3, #1
 800524e:	623b      	str	r3, [r7, #32]
 8005250:	e001      	b.n	8005256 <setSpeed+0x136>
		} else {
			flag = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	75fb      	strb	r3, [r7, #23]
	while (tmpPeriod < 65535 && flag) {
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800525c:	4293      	cmp	r3, r2
 800525e:	dc02      	bgt.n	8005266 <setSpeed+0x146>
 8005260:	7dfb      	ldrb	r3, [r7, #23]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d196      	bne.n	8005194 <setSpeed+0x74>
		}
	}

	//set calculated timer settings
	motor->htim->Instance->PSC = prescalar - 1;
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	1e5a      	subs	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	629a      	str	r2, [r3, #40]	; 0x28
	motor->htim->Instance->ARR = period - 1;
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	1e5a      	subs	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	62da      	str	r2, [r3, #44]	; 0x2c
	motor->htim->Instance->CCR1 = period / 2;
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	0fda      	lsrs	r2, r3, #31
 8005282:	4413      	add	r3, r2
 8005284:	105b      	asrs	r3, r3, #1
 8005286:	461a      	mov	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	635a      	str	r2, [r3, #52]	; 0x34
	motor->speed = speed;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	611a      	str	r2, [r3, #16]
 8005296:	e000      	b.n	800529a <setSpeed+0x17a>
		return;
 8005298:	bf00      	nop
}
 800529a:	3728      	adds	r7, #40	; 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	eb1c432d 	.word	0xeb1c432d
 80052a4:	3f1a36e2 	.word	0x3f1a36e2
 80052a8:	45610000 	.word	0x45610000
 80052ac:	45610000 	.word	0x45610000
 80052b0:	44c80000 	.word	0x44c80000
 80052b4:	42700000 	.word	0x42700000
 80052b8:	4cf42400 	.word	0x4cf42400

080052bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80052c0:	f7fb fe5e 	bl	8000f80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80052c4:	f000 f830 	bl	8005328 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80052c8:	f000 fae6 	bl	8005898 <MX_GPIO_Init>
	MX_CAN1_Init();
 80052cc:	f000 f8ec 	bl	80054a8 <MX_CAN1_Init>
	MX_SPI1_Init();
 80052d0:	f000 f920 	bl	8005514 <MX_SPI1_Init>
	MX_TIM1_Init();
 80052d4:	f000 f954 	bl	8005580 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 80052d8:	f000 fab4 	bl	8005844 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80052dc:	f000 f98c 	bl	80055f8 <MX_TIM2_Init>
	MX_TIM3_Init();
 80052e0:	f000 f9d6 	bl	8005690 <MX_TIM3_Init>
	MX_TIM8_Init();
 80052e4:	f000 fa22 	bl	800572c <MX_TIM8_Init>
	MX_ADC1_Init();
 80052e8:	f000 f88c 	bl	8005404 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	RetargetInit(&huart2);
 80052ec:	480a      	ldr	r0, [pc, #40]	; (8005318 <main+0x5c>)
 80052ee:	f000 fe31 	bl	8005f54 <RetargetInit>

	printf("Stepper Board \n");
 80052f2:	480a      	ldr	r0, [pc, #40]	; (800531c <main+0x60>)
 80052f4:	f001 ff00 	bl	80070f8 <puts>

	HAL_TIM_Base_Start(&htim8);
 80052f8:	4809      	ldr	r0, [pc, #36]	; (8005320 <main+0x64>)
 80052fa:	f7fe f97d 	bl	80035f8 <HAL_TIM_Base_Start>

	init_steppers();
 80052fe:	f000 fdaf 	bl	8005e60 <init_steppers>

	encoders_check();
 8005302:	f000 fd4d 	bl	8005da0 <encoders_check>

	HAL_Delay(2000);
 8005306:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800530a:	f7fb feab 	bl	8001064 <HAL_Delay>

	HAL_TIM_Base_Start_IT(&htim2);
 800530e:	4805      	ldr	r0, [pc, #20]	; (8005324 <main+0x68>)
 8005310:	f7fe f9da 	bl	80036c8 <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8005314:	e7fe      	b.n	8005314 <main+0x58>
 8005316:	bf00      	nop
 8005318:	2000044c 	.word	0x2000044c
 800531c:	08009430 	.word	0x08009430
 8005320:	20000208 	.word	0x20000208
 8005324:	200003c8 	.word	0x200003c8

08005328 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b094      	sub	sp, #80	; 0x50
 800532c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800532e:	f107 031c 	add.w	r3, r7, #28
 8005332:	2234      	movs	r2, #52	; 0x34
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f001 f9e6 	bl	8006708 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800533c:	f107 0308 	add.w	r3, r7, #8
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	609a      	str	r2, [r3, #8]
 8005348:	60da      	str	r2, [r3, #12]
 800534a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800534c:	2300      	movs	r3, #0
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	4b2a      	ldr	r3, [pc, #168]	; (80053fc <SystemClock_Config+0xd4>)
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	4a29      	ldr	r2, [pc, #164]	; (80053fc <SystemClock_Config+0xd4>)
 8005356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535a:	6413      	str	r3, [r2, #64]	; 0x40
 800535c:	4b27      	ldr	r3, [pc, #156]	; (80053fc <SystemClock_Config+0xd4>)
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005364:	607b      	str	r3, [r7, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005368:	2300      	movs	r3, #0
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4b24      	ldr	r3, [pc, #144]	; (8005400 <SystemClock_Config+0xd8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005374:	4a22      	ldr	r2, [pc, #136]	; (8005400 <SystemClock_Config+0xd8>)
 8005376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4b20      	ldr	r3, [pc, #128]	; (8005400 <SystemClock_Config+0xd8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005384:	603b      	str	r3, [r7, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005388:	2301      	movs	r3, #1
 800538a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800538c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005390:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005392:	2302      	movs	r3, #2
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005396:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800539a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 800539c:	2304      	movs	r3, #4
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 128;
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053a4:	2302      	movs	r3, #2
 80053a6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80053a8:	2302      	movs	r3, #2
 80053aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80053ac:	2302      	movs	r3, #2
 80053ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80053b0:	f107 031c 	add.w	r3, r7, #28
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fd f9c5 	bl	8002744 <HAL_RCC_OscConfig>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <SystemClock_Config+0x9c>
		Error_Handler();
 80053c0:	f000 fdbe 	bl	8005f40 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80053c4:	230f      	movs	r3, #15
 80053c6:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053c8:	2302      	movs	r3, #2
 80053ca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80053d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80053d4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80053d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053da:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80053dc:	f107 0308 	add.w	r3, r7, #8
 80053e0:	2104      	movs	r1, #4
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fc fee2 	bl	80021ac <HAL_RCC_ClockConfig>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <SystemClock_Config+0xca>
		Error_Handler();
 80053ee:	f000 fda7 	bl	8005f40 <Error_Handler>
	}
}
 80053f2:	bf00      	nop
 80053f4:	3750      	adds	r7, #80	; 0x50
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40023800 	.word	0x40023800
 8005400:	40007000 	.word	0x40007000

08005404 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800540a:	463b      	mov	r3, r7
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	605a      	str	r2, [r3, #4]
 8005412:	609a      	str	r2, [r3, #8]
 8005414:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8005416:	4b21      	ldr	r3, [pc, #132]	; (800549c <MX_ADC1_Init+0x98>)
 8005418:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <MX_ADC1_Init+0x9c>)
 800541a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800541c:	4b1f      	ldr	r3, [pc, #124]	; (800549c <MX_ADC1_Init+0x98>)
 800541e:	2200      	movs	r2, #0
 8005420:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005422:	4b1e      	ldr	r3, [pc, #120]	; (800549c <MX_ADC1_Init+0x98>)
 8005424:	2200      	movs	r2, #0
 8005426:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8005428:	4b1c      	ldr	r3, [pc, #112]	; (800549c <MX_ADC1_Init+0x98>)
 800542a:	2200      	movs	r2, #0
 800542c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800542e:	4b1b      	ldr	r3, [pc, #108]	; (800549c <MX_ADC1_Init+0x98>)
 8005430:	2200      	movs	r2, #0
 8005432:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005434:	4b19      	ldr	r3, [pc, #100]	; (800549c <MX_ADC1_Init+0x98>)
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800543c:	4b17      	ldr	r3, [pc, #92]	; (800549c <MX_ADC1_Init+0x98>)
 800543e:	2200      	movs	r2, #0
 8005440:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005442:	4b16      	ldr	r3, [pc, #88]	; (800549c <MX_ADC1_Init+0x98>)
 8005444:	4a17      	ldr	r2, [pc, #92]	; (80054a4 <MX_ADC1_Init+0xa0>)
 8005446:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005448:	4b14      	ldr	r3, [pc, #80]	; (800549c <MX_ADC1_Init+0x98>)
 800544a:	2200      	movs	r2, #0
 800544c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800544e:	4b13      	ldr	r3, [pc, #76]	; (800549c <MX_ADC1_Init+0x98>)
 8005450:	2201      	movs	r2, #1
 8005452:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8005454:	4b11      	ldr	r3, [pc, #68]	; (800549c <MX_ADC1_Init+0x98>)
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800545c:	4b0f      	ldr	r3, [pc, #60]	; (800549c <MX_ADC1_Init+0x98>)
 800545e:	2201      	movs	r2, #1
 8005460:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8005462:	480e      	ldr	r0, [pc, #56]	; (800549c <MX_ADC1_Init+0x98>)
 8005464:	f7fb fe22 	bl	80010ac <HAL_ADC_Init>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <MX_ADC1_Init+0x6e>
		Error_Handler();
 800546e:	f000 fd67 	bl	8005f40 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8005472:	2300      	movs	r3, #0
 8005474:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8005476:	2301      	movs	r3, #1
 8005478:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800547e:	463b      	mov	r3, r7
 8005480:	4619      	mov	r1, r3
 8005482:	4806      	ldr	r0, [pc, #24]	; (800549c <MX_ADC1_Init+0x98>)
 8005484:	f7fb fe56 	bl	8001134 <HAL_ADC_ConfigChannel>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <MX_ADC1_Init+0x8e>
		Error_Handler();
 800548e:	f000 fd57 	bl	8005f40 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8005492:	bf00      	nop
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	200002b0 	.word	0x200002b0
 80054a0:	40012000 	.word	0x40012000
 80054a4:	0f000001 	.word	0x0f000001

080054a8 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80054ac:	4b17      	ldr	r3, [pc, #92]	; (800550c <MX_CAN1_Init+0x64>)
 80054ae:	4a18      	ldr	r2, [pc, #96]	; (8005510 <MX_CAN1_Init+0x68>)
 80054b0:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 80054b2:	4b16      	ldr	r3, [pc, #88]	; (800550c <MX_CAN1_Init+0x64>)
 80054b4:	2210      	movs	r2, #16
 80054b6:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80054b8:	4b14      	ldr	r3, [pc, #80]	; (800550c <MX_CAN1_Init+0x64>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80054be:	4b13      	ldr	r3, [pc, #76]	; (800550c <MX_CAN1_Init+0x64>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80054c4:	4b11      	ldr	r3, [pc, #68]	; (800550c <MX_CAN1_Init+0x64>)
 80054c6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80054ca:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80054cc:	4b0f      	ldr	r3, [pc, #60]	; (800550c <MX_CAN1_Init+0x64>)
 80054ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80054d2:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80054d4:	4b0d      	ldr	r3, [pc, #52]	; (800550c <MX_CAN1_Init+0x64>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80054da:	4b0c      	ldr	r3, [pc, #48]	; (800550c <MX_CAN1_Init+0x64>)
 80054dc:	2200      	movs	r2, #0
 80054de:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80054e0:	4b0a      	ldr	r3, [pc, #40]	; (800550c <MX_CAN1_Init+0x64>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 80054e6:	4b09      	ldr	r3, [pc, #36]	; (800550c <MX_CAN1_Init+0x64>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80054ec:	4b07      	ldr	r3, [pc, #28]	; (800550c <MX_CAN1_Init+0x64>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80054f2:	4b06      	ldr	r3, [pc, #24]	; (800550c <MX_CAN1_Init+0x64>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80054f8:	4804      	ldr	r0, [pc, #16]	; (800550c <MX_CAN1_Init+0x64>)
 80054fa:	f7fc f849 	bl	8001590 <HAL_CAN_Init>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <MX_CAN1_Init+0x60>
		Error_Handler();
 8005504:	f000 fd1c 	bl	8005f40 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8005508:	bf00      	nop
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000490 	.word	0x20000490
 8005510:	40006400 	.word	0x40006400

08005514 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8005518:	4b17      	ldr	r3, [pc, #92]	; (8005578 <MX_SPI1_Init+0x64>)
 800551a:	4a18      	ldr	r2, [pc, #96]	; (800557c <MX_SPI1_Init+0x68>)
 800551c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800551e:	4b16      	ldr	r3, [pc, #88]	; (8005578 <MX_SPI1_Init+0x64>)
 8005520:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005524:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <MX_SPI1_Init+0x64>)
 8005528:	2200      	movs	r2, #0
 800552a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800552c:	4b12      	ldr	r3, [pc, #72]	; (8005578 <MX_SPI1_Init+0x64>)
 800552e:	2200      	movs	r2, #0
 8005530:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005532:	4b11      	ldr	r3, [pc, #68]	; (8005578 <MX_SPI1_Init+0x64>)
 8005534:	2200      	movs	r2, #0
 8005536:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005538:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <MX_SPI1_Init+0x64>)
 800553a:	2200      	movs	r2, #0
 800553c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800553e:	4b0e      	ldr	r3, [pc, #56]	; (8005578 <MX_SPI1_Init+0x64>)
 8005540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005544:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005546:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <MX_SPI1_Init+0x64>)
 8005548:	2238      	movs	r2, #56	; 0x38
 800554a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800554c:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <MX_SPI1_Init+0x64>)
 800554e:	2200      	movs	r2, #0
 8005550:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005552:	4b09      	ldr	r3, [pc, #36]	; (8005578 <MX_SPI1_Init+0x64>)
 8005554:	2200      	movs	r2, #0
 8005556:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005558:	4b07      	ldr	r3, [pc, #28]	; (8005578 <MX_SPI1_Init+0x64>)
 800555a:	2200      	movs	r2, #0
 800555c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <MX_SPI1_Init+0x64>)
 8005560:	220a      	movs	r2, #10
 8005562:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8005564:	4804      	ldr	r0, [pc, #16]	; (8005578 <MX_SPI1_Init+0x64>)
 8005566:	f7fd fb8b 	bl	8002c80 <HAL_SPI_Init>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <MX_SPI1_Init+0x60>
		Error_Handler();
 8005570:	f000 fce6 	bl	8005f40 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8005574:	bf00      	nop
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20000358 	.word	0x20000358
 800557c:	40013000 	.word	0x40013000

08005580 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005586:	463b      	mov	r3, r7
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800558e:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <MX_TIM1_Init+0x70>)
 8005590:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <MX_TIM1_Init+0x74>)
 8005592:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 32000 - 1;
 8005594:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <MX_TIM1_Init+0x70>)
 8005596:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800559a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800559c:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <MX_TIM1_Init+0x70>)
 800559e:	2200      	movs	r2, #0
 80055a0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 250 - 1;
 80055a2:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <MX_TIM1_Init+0x70>)
 80055a4:	22f9      	movs	r2, #249	; 0xf9
 80055a6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055a8:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <MX_TIM1_Init+0x70>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 10;
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <MX_TIM1_Init+0x70>)
 80055b0:	220a      	movs	r2, #10
 80055b2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055b4:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <MX_TIM1_Init+0x70>)
 80055b6:	2280      	movs	r2, #128	; 0x80
 80055b8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK) {
 80055ba:	2108      	movs	r1, #8
 80055bc:	480c      	ldr	r0, [pc, #48]	; (80055f0 <MX_TIM1_Init+0x70>)
 80055be:	f7fe fa0b 	bl	80039d8 <HAL_TIM_OnePulse_Init>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_TIM1_Init+0x4c>
		Error_Handler();
 80055c8:	f000 fcba 	bl	8005f40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80055cc:	2320      	movs	r3, #32
 80055ce:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80055d4:	463b      	mov	r3, r7
 80055d6:	4619      	mov	r1, r3
 80055d8:	4805      	ldr	r0, [pc, #20]	; (80055f0 <MX_TIM1_Init+0x70>)
 80055da:	f7ff f80f 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <MX_TIM1_Init+0x68>
			!= HAL_OK) {
		Error_Handler();
 80055e4:	f000 fcac 	bl	8005f40 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80055e8:	bf00      	nop
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20000310 	.word	0x20000310
 80055f4:	40010000 	.word	0x40010000

080055f8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80055fe:	f107 0308 	add.w	r3, r7, #8
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	605a      	str	r2, [r3, #4]
 8005608:	609a      	str	r2, [r3, #8]
 800560a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800560c:	463b      	mov	r3, r7
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8005614:	4b1d      	ldr	r3, [pc, #116]	; (800568c <MX_TIM2_Init+0x94>)
 8005616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800561a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 64 - 1;
 800561c:	4b1b      	ldr	r3, [pc, #108]	; (800568c <MX_TIM2_Init+0x94>)
 800561e:	223f      	movs	r2, #63	; 0x3f
 8005620:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005622:	4b1a      	ldr	r3, [pc, #104]	; (800568c <MX_TIM2_Init+0x94>)
 8005624:	2200      	movs	r2, #0
 8005626:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000 - 1;
 8005628:	4b18      	ldr	r3, [pc, #96]	; (800568c <MX_TIM2_Init+0x94>)
 800562a:	f242 720f 	movw	r2, #9999	; 0x270f
 800562e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005630:	4b16      	ldr	r3, [pc, #88]	; (800568c <MX_TIM2_Init+0x94>)
 8005632:	2200      	movs	r2, #0
 8005634:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005636:	4b15      	ldr	r3, [pc, #84]	; (800568c <MX_TIM2_Init+0x94>)
 8005638:	2200      	movs	r2, #0
 800563a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800563c:	4813      	ldr	r0, [pc, #76]	; (800568c <MX_TIM2_Init+0x94>)
 800563e:	f7fd ff8b 	bl	8003558 <HAL_TIM_Base_Init>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <MX_TIM2_Init+0x54>
		Error_Handler();
 8005648:	f000 fc7a 	bl	8005f40 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800564c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005650:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8005652:	f107 0308 	add.w	r3, r7, #8
 8005656:	4619      	mov	r1, r3
 8005658:	480c      	ldr	r0, [pc, #48]	; (800568c <MX_TIM2_Init+0x94>)
 800565a:	f7fe fbd3 	bl	8003e04 <HAL_TIM_ConfigClockSource>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <MX_TIM2_Init+0x70>
		Error_Handler();
 8005664:	f000 fc6c 	bl	8005f40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005668:	2300      	movs	r3, #0
 800566a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800566c:	2300      	movs	r3, #0
 800566e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8005670:	463b      	mov	r3, r7
 8005672:	4619      	mov	r1, r3
 8005674:	4805      	ldr	r0, [pc, #20]	; (800568c <MX_TIM2_Init+0x94>)
 8005676:	f7fe ffc1 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8005680:	f000 fc5e 	bl	8005f40 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8005684:	bf00      	nop
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	200003c8 	.word	0x200003c8

08005690 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005696:	f107 0308 	add.w	r3, r7, #8
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	605a      	str	r2, [r3, #4]
 80056a0:	609a      	str	r2, [r3, #8]
 80056a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80056a4:	463b      	mov	r3, r7
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80056ac:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <MX_TIM3_Init+0x94>)
 80056ae:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <MX_TIM3_Init+0x98>)
 80056b0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80056b2:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <MX_TIM3_Init+0x94>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056b8:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <MX_TIM3_Init+0x94>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80056be:	4b19      	ldr	r3, [pc, #100]	; (8005724 <MX_TIM3_Init+0x94>)
 80056c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056c4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056c6:	4b17      	ldr	r3, [pc, #92]	; (8005724 <MX_TIM3_Init+0x94>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056cc:	4b15      	ldr	r3, [pc, #84]	; (8005724 <MX_TIM3_Init+0x94>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80056d2:	4814      	ldr	r0, [pc, #80]	; (8005724 <MX_TIM3_Init+0x94>)
 80056d4:	f7fd ff40 	bl	8003558 <HAL_TIM_Base_Init>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <MX_TIM3_Init+0x52>
		Error_Handler();
 80056de:	f000 fc2f 	bl	8005f40 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056e6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80056e8:	f107 0308 	add.w	r3, r7, #8
 80056ec:	4619      	mov	r1, r3
 80056ee:	480d      	ldr	r0, [pc, #52]	; (8005724 <MX_TIM3_Init+0x94>)
 80056f0:	f7fe fb88 	bl	8003e04 <HAL_TIM_ConfigClockSource>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <MX_TIM3_Init+0x6e>
		Error_Handler();
 80056fa:	f000 fc21 	bl	8005f40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056fe:	2300      	movs	r3, #0
 8005700:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005702:	2300      	movs	r3, #0
 8005704:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8005706:	463b      	mov	r3, r7
 8005708:	4619      	mov	r1, r3
 800570a:	4806      	ldr	r0, [pc, #24]	; (8005724 <MX_TIM3_Init+0x94>)
 800570c:	f7fe ff76 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8005716:	f000 fc13 	bl	8005f40 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800571a:	bf00      	nop
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000268 	.word	0x20000268
 8005728:	40000400 	.word	0x40000400

0800572c <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b092      	sub	sp, #72	; 0x48
 8005730:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005732:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800573c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	605a      	str	r2, [r3, #4]
 8005746:	609a      	str	r2, [r3, #8]
 8005748:	60da      	str	r2, [r3, #12]
 800574a:	611a      	str	r2, [r3, #16]
 800574c:	615a      	str	r2, [r3, #20]
 800574e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8005750:	1d3b      	adds	r3, r7, #4
 8005752:	2220      	movs	r2, #32
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f000 ffd6 	bl	8006708 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800575c:	4b37      	ldr	r3, [pc, #220]	; (800583c <MX_TIM8_Init+0x110>)
 800575e:	4a38      	ldr	r2, [pc, #224]	; (8005840 <MX_TIM8_Init+0x114>)
 8005760:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 32000 - 1;
 8005762:	4b36      	ldr	r3, [pc, #216]	; (800583c <MX_TIM8_Init+0x110>)
 8005764:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8005768:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800576a:	4b34      	ldr	r3, [pc, #208]	; (800583c <MX_TIM8_Init+0x110>)
 800576c:	2200      	movs	r2, #0
 800576e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 250 - 1;
 8005770:	4b32      	ldr	r3, [pc, #200]	; (800583c <MX_TIM8_Init+0x110>)
 8005772:	22f9      	movs	r2, #249	; 0xf9
 8005774:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005776:	4b31      	ldr	r3, [pc, #196]	; (800583c <MX_TIM8_Init+0x110>)
 8005778:	2200      	movs	r2, #0
 800577a:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 10;
 800577c:	4b2f      	ldr	r3, [pc, #188]	; (800583c <MX_TIM8_Init+0x110>)
 800577e:	220a      	movs	r2, #10
 8005780:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005782:	4b2e      	ldr	r3, [pc, #184]	; (800583c <MX_TIM8_Init+0x110>)
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8005788:	482c      	ldr	r0, [pc, #176]	; (800583c <MX_TIM8_Init+0x110>)
 800578a:	f7fe f80d 	bl	80037a8 <HAL_TIM_PWM_Init>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <MX_TIM8_Init+0x6c>
		Error_Handler();
 8005794:	f000 fbd4 	bl	8005f40 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK) {
 8005798:	2108      	movs	r1, #8
 800579a:	4828      	ldr	r0, [pc, #160]	; (800583c <MX_TIM8_Init+0x110>)
 800579c:	f7fe f91c 	bl	80039d8 <HAL_TIM_OnePulse_Init>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <MX_TIM8_Init+0x7e>
		Error_Handler();
 80057a6:	f000 fbcb 	bl	8005f40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80057aa:	2320      	movs	r3, #32
 80057ac:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80057b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80057b6:	4619      	mov	r1, r3
 80057b8:	4820      	ldr	r0, [pc, #128]	; (800583c <MX_TIM8_Init+0x110>)
 80057ba:	f7fe ff1f 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <MX_TIM8_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80057c4:	f000 fbbc 	bl	8005f40 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057c8:	2360      	movs	r3, #96	; 0x60
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057d0:	2300      	movs	r3, #0
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80057d4:	2300      	movs	r3, #0
 80057d6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80057d8:	2300      	movs	r3, #0
 80057da:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80057dc:	2300      	movs	r3, #0
 80057de:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80057e0:	2300      	movs	r3, #0
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 80057e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e8:	2200      	movs	r2, #0
 80057ea:	4619      	mov	r1, r3
 80057ec:	4813      	ldr	r0, [pc, #76]	; (800583c <MX_TIM8_Init+0x110>)
 80057ee:	f7fe fa4b 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <MX_TIM8_Init+0xd0>
			!= HAL_OK) {
		Error_Handler();
 80057f8:	f000 fba2 	bl	8005f40 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80057fc:	2300      	movs	r3, #0
 80057fe:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005800:	2300      	movs	r3, #0
 8005802:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005814:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005816:	2300      	movs	r3, #0
 8005818:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800581a:	1d3b      	adds	r3, r7, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4807      	ldr	r0, [pc, #28]	; (800583c <MX_TIM8_Init+0x110>)
 8005820:	f7fe ff68 	bl	80046f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <MX_TIM8_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 800582a:	f000 fb89 	bl	8005f40 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 800582e:	4803      	ldr	r0, [pc, #12]	; (800583c <MX_TIM8_Init+0x110>)
 8005830:	f000 fdf0 	bl	8006414 <HAL_TIM_MspPostInit>

}
 8005834:	bf00      	nop
 8005836:	3748      	adds	r7, #72	; 0x48
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000208 	.word	0x20000208
 8005840:	40010400 	.word	0x40010400

08005844 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8005848:	4b11      	ldr	r3, [pc, #68]	; (8005890 <MX_USART2_UART_Init+0x4c>)
 800584a:	4a12      	ldr	r2, [pc, #72]	; (8005894 <MX_USART2_UART_Init+0x50>)
 800584c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800584e:	4b10      	ldr	r3, [pc, #64]	; (8005890 <MX_USART2_UART_Init+0x4c>)
 8005850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005854:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005856:	4b0e      	ldr	r3, [pc, #56]	; (8005890 <MX_USART2_UART_Init+0x4c>)
 8005858:	2200      	movs	r2, #0
 800585a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800585c:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <MX_USART2_UART_Init+0x4c>)
 800585e:	2200      	movs	r2, #0
 8005860:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8005862:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <MX_USART2_UART_Init+0x4c>)
 8005864:	2200      	movs	r2, #0
 8005866:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8005868:	4b09      	ldr	r3, [pc, #36]	; (8005890 <MX_USART2_UART_Init+0x4c>)
 800586a:	220c      	movs	r2, #12
 800586c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800586e:	4b08      	ldr	r3, [pc, #32]	; (8005890 <MX_USART2_UART_Init+0x4c>)
 8005870:	2200      	movs	r2, #0
 8005872:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005874:	4b06      	ldr	r3, [pc, #24]	; (8005890 <MX_USART2_UART_Init+0x4c>)
 8005876:	2200      	movs	r2, #0
 8005878:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800587a:	4805      	ldr	r0, [pc, #20]	; (8005890 <MX_USART2_UART_Init+0x4c>)
 800587c:	f7fe ffa0 	bl	80047c0 <HAL_UART_Init>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8005886:	f000 fb5b 	bl	8005f40 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800588a:	bf00      	nop
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	2000044c 	.word	0x2000044c
 8005894:	40004400 	.word	0x40004400

08005898 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	; 0x28
 800589c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800589e:	f107 0314 	add.w	r3, r7, #20
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	605a      	str	r2, [r3, #4]
 80058a8:	609a      	str	r2, [r3, #8]
 80058aa:	60da      	str	r2, [r3, #12]
 80058ac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	4b42      	ldr	r3, [pc, #264]	; (80059bc <MX_GPIO_Init+0x124>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	4a41      	ldr	r2, [pc, #260]	; (80059bc <MX_GPIO_Init+0x124>)
 80058b8:	f043 0304 	orr.w	r3, r3, #4
 80058bc:	6313      	str	r3, [r2, #48]	; 0x30
 80058be:	4b3f      	ldr	r3, [pc, #252]	; (80059bc <MX_GPIO_Init+0x124>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	4b3b      	ldr	r3, [pc, #236]	; (80059bc <MX_GPIO_Init+0x124>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	4a3a      	ldr	r2, [pc, #232]	; (80059bc <MX_GPIO_Init+0x124>)
 80058d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d8:	6313      	str	r3, [r2, #48]	; 0x30
 80058da:	4b38      	ldr	r3, [pc, #224]	; (80059bc <MX_GPIO_Init+0x124>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]
 80058ea:	4b34      	ldr	r3, [pc, #208]	; (80059bc <MX_GPIO_Init+0x124>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	4a33      	ldr	r2, [pc, #204]	; (80059bc <MX_GPIO_Init+0x124>)
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	6313      	str	r3, [r2, #48]	; 0x30
 80058f6:	4b31      	ldr	r3, [pc, #196]	; (80059bc <MX_GPIO_Init+0x124>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	60bb      	str	r3, [r7, #8]
 8005900:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005902:	2300      	movs	r3, #0
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <MX_GPIO_Init+0x124>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	4a2c      	ldr	r2, [pc, #176]	; (80059bc <MX_GPIO_Init+0x124>)
 800590c:	f043 0302 	orr.w	r3, r3, #2
 8005910:	6313      	str	r3, [r2, #48]	; 0x30
 8005912:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <MX_GPIO_Init+0x124>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	607b      	str	r3, [r7, #4]
 800591c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, SPI1_CS_Pin | DIR_Pin, GPIO_PIN_RESET);
 800591e:	2200      	movs	r2, #0
 8005920:	2190      	movs	r1, #144	; 0x90
 8005922:	4827      	ldr	r0, [pc, #156]	; (80059c0 <MX_GPIO_Init+0x128>)
 8005924:	f7fc fc0e 	bl	8002144 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, TEMP_SENSOR_PIN_Pin | EN_Pin, GPIO_PIN_RESET);
 8005928:	2200      	movs	r2, #0
 800592a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800592e:	4825      	ldr	r0, [pc, #148]	; (80059c4 <MX_GPIO_Init+0x12c>)
 8005930:	f7fc fc08 	bl	8002144 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8005934:	2200      	movs	r2, #0
 8005936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800593a:	4823      	ldr	r0, [pc, #140]	; (80059c8 <MX_GPIO_Init+0x130>)
 800593c:	f7fc fc02 	bl	8002144 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8005940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005944:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005946:	4b21      	ldr	r3, [pc, #132]	; (80059cc <MX_GPIO_Init+0x134>)
 8005948:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800594e:	f107 0314 	add.w	r3, r7, #20
 8005952:	4619      	mov	r1, r3
 8005954:	481a      	ldr	r0, [pc, #104]	; (80059c0 <MX_GPIO_Init+0x128>)
 8005956:	f7fc fa61 	bl	8001e1c <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_CS_Pin DIR_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin | DIR_Pin;
 800595a:	2390      	movs	r3, #144	; 0x90
 800595c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800595e:	2301      	movs	r3, #1
 8005960:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005962:	2300      	movs	r3, #0
 8005964:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005966:	2300      	movs	r3, #0
 8005968:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800596a:	f107 0314 	add.w	r3, r7, #20
 800596e:	4619      	mov	r1, r3
 8005970:	4813      	ldr	r0, [pc, #76]	; (80059c0 <MX_GPIO_Init+0x128>)
 8005972:	f7fc fa53 	bl	8001e1c <HAL_GPIO_Init>

	/*Configure GPIO pins : TEMP_SENSOR_PIN_Pin EN_Pin */
	GPIO_InitStruct.Pin = TEMP_SENSOR_PIN_Pin | EN_Pin;
 8005976:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800597a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800597c:	2301      	movs	r3, #1
 800597e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005980:	2300      	movs	r3, #0
 8005982:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005984:	2300      	movs	r3, #0
 8005986:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005988:	f107 0314 	add.w	r3, r7, #20
 800598c:	4619      	mov	r1, r3
 800598e:	480d      	ldr	r0, [pc, #52]	; (80059c4 <MX_GPIO_Init+0x12c>)
 8005990:	f7fc fa44 	bl	8001e1c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005998:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800599a:	2301      	movs	r3, #1
 800599c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059a2:	2300      	movs	r3, #0
 80059a4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059a6:	f107 0314 	add.w	r3, r7, #20
 80059aa:	4619      	mov	r1, r3
 80059ac:	4806      	ldr	r0, [pc, #24]	; (80059c8 <MX_GPIO_Init+0x130>)
 80059ae:	f7fc fa35 	bl	8001e1c <HAL_GPIO_Init>

}
 80059b2:	bf00      	nop
 80059b4:	3728      	adds	r7, #40	; 0x28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40023800 	.word	0x40023800
 80059c0:	40020800 	.word	0x40020800
 80059c4:	40020400 	.word	0x40020400
 80059c8:	40020000 	.word	0x40020000
 80059cc:	10210000 	.word	0x10210000

080059d0 <amt222_readPos>:

/* USER CODE BEGIN 4 */
uint16_t amt222_readPos(uint8_t encoder_index) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	71fb      	strb	r3, [r7, #7]

	uint8_t buff1 = 0x00;
 80059da:	2300      	movs	r3, #0
 80059dc:	77fb      	strb	r3, [r7, #31]
	uint8_t buff2 = 0x00;
 80059de:	2300      	movs	r3, #0
 80059e0:	77bb      	strb	r3, [r7, #30]

	uint8_t binaryArray[16];

	//devo dichiarare un array di spi_cs pin

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); // pull cs low
 80059e2:	2200      	movs	r2, #0
 80059e4:	2110      	movs	r1, #16
 80059e6:	4841      	ldr	r0, [pc, #260]	; (8005aec <amt222_readPos+0x11c>)
 80059e8:	f7fc fbac 	bl	8002144 <HAL_GPIO_WritePin>

	HAL_Delay(0.01);
 80059ec:	2000      	movs	r0, #0
 80059ee:	f7fb fb39 	bl	8001064 <HAL_Delay>

	HAL_SPI_Receive(&hspi1, &buff1, 1, 100);  // receive 1 bytes data
 80059f2:	f107 011f 	add.w	r1, r7, #31
 80059f6:	2364      	movs	r3, #100	; 0x64
 80059f8:	2201      	movs	r2, #1
 80059fa:	483d      	ldr	r0, [pc, #244]	; (8005af0 <amt222_readPos+0x120>)
 80059fc:	f7fd f9c9 	bl	8002d92 <HAL_SPI_Receive>

	HAL_Delay(0.01);
 8005a00:	2000      	movs	r0, #0
 8005a02:	f7fb fb2f 	bl	8001064 <HAL_Delay>

	HAL_SPI_Receive(&hspi1, &buff2, 1, 100);  // receive 1 bytes data
 8005a06:	f107 011e 	add.w	r1, r7, #30
 8005a0a:	2364      	movs	r3, #100	; 0x64
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	4838      	ldr	r0, [pc, #224]	; (8005af0 <amt222_readPos+0x120>)
 8005a10:	f7fd f9bf 	bl	8002d92 <HAL_SPI_Receive>

	HAL_Delay(0.01);
 8005a14:	2000      	movs	r0, #0
 8005a16:	f7fb fb25 	bl	8001064 <HAL_Delay>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); // pull cs high
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	2110      	movs	r1, #16
 8005a1e:	4833      	ldr	r0, [pc, #204]	; (8005aec <amt222_readPos+0x11c>)
 8005a20:	f7fc fb90 	bl	8002144 <HAL_GPIO_WritePin>

	currPos = ((uint16_t) buff1 << 8) | ((uint16_t) buff2);
 8005a24:	7ffb      	ldrb	r3, [r7, #31]
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	b21a      	sxth	r2, r3
 8005a2a:	7fbb      	ldrb	r3, [r7, #30]
 8005a2c:	b21b      	sxth	r3, r3
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	b21b      	sxth	r3, r3
 8005a32:	84fb      	strh	r3, [r7, #38]	; 0x26

	//// CRC ////

	for (int i = 0; i < 16; i++)
 8005a34:	2300      	movs	r3, #0
 8005a36:	623b      	str	r3, [r7, #32]
 8005a38:	e010      	b.n	8005a5c <amt222_readPos+0x8c>
		binaryArray[i] = (0x01) & (currPos >> (i));
 8005a3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	fa42 f303 	asr.w	r3, r2, r3
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	b2d9      	uxtb	r1, r3
 8005a4a:	f107 020c 	add.w	r2, r7, #12
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	4413      	add	r3, r2
 8005a52:	460a      	mov	r2, r1
 8005a54:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	2b0f      	cmp	r3, #15
 8005a60:	ddeb      	ble.n	8005a3a <amt222_readPos+0x6a>

	//using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
	if ((binaryArray[15]
 8005a62:	7efb      	ldrb	r3, [r7, #27]
 8005a64:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8005a66:	7e7a      	ldrb	r2, [r7, #25]
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
 8005a6a:	4053      	eors	r3, r2
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	7d7b      	ldrb	r3, [r7, #21]
 8005a70:	4053      	eors	r3, r2
 8005a72:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8005a76:	4053      	eors	r3, r2
 8005a78:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8005a7a:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8005a7c:	4053      	eors	r3, r2
 8005a7e:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8005a82:	4053      	eors	r3, r2
 8005a84:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 8005a86:	7b7b      	ldrb	r3, [r7, #13]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	bf0c      	ite	eq
 8005a8c:	2301      	moveq	r3, #1
 8005a8e:	2300      	movne	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 8005a92:	4299      	cmp	r1, r3
 8005a94:	d121      	bne.n	8005ada <amt222_readPos+0x10a>
			&& (binaryArray[14]
 8005a96:	7ebb      	ldrb	r3, [r7, #26]
 8005a98:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8005a9a:	7e3a      	ldrb	r2, [r7, #24]
 8005a9c:	7dbb      	ldrb	r3, [r7, #22]
 8005a9e:	4053      	eors	r3, r2
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	7d3b      	ldrb	r3, [r7, #20]
 8005aa4:	4053      	eors	r3, r2
 8005aa6:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8005aa8:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8005aaa:	4053      	eors	r3, r2
 8005aac:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8005aae:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8005ab0:	4053      	eors	r3, r2
 8005ab2:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8005ab4:	7bbb      	ldrb	r3, [r7, #14]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8005ab6:	4053      	eors	r3, r2
 8005ab8:	b2da      	uxtb	r2, r3
							^ binaryArray[0])))
 8005aba:	7b3b      	ldrb	r3, [r7, #12]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	bf0c      	ite	eq
 8005ac0:	2301      	moveq	r3, #1
 8005ac2:	2300      	movne	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 8005ac6:	4299      	cmp	r1, r3
 8005ac8:	d107      	bne.n	8005ada <amt222_readPos+0x10a>

			{
		//we got back a good position, so just mask away the checkbits
		currPos &= 0x3FFF;
 8005aca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005acc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005ad0:	84fb      	strh	r3, [r7, #38]	; 0x26
		// 12 bit resolution sensor, shift 2 bit needed
		currPos = currPos >> 2;
 8005ad2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ad4:	089b      	lsrs	r3, r3, #2
 8005ad6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005ad8:	e002      	b.n	8005ae0 <amt222_readPos+0x110>
	} else {
		currPos = 0xFFFF; //bad position
 8005ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ade:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	return currPos;
 8005ae0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3728      	adds	r7, #40	; 0x28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40020800 	.word	0x40020800
 8005af0:	20000358 	.word	0x20000358
 8005af4:	00000000 	.word	0x00000000

08005af8 <position_controller>:

void position_controller() {
 8005af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005afc:	b08c      	sub	sp, #48	; 0x30
 8005afe:	af08      	add	r7, sp, #32
	int i;
	//shoulder position control (stepper actuated)
	for (i = 0; i < 6; i++) {
 8005b00:	2300      	movs	r3, #0
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	e120      	b.n	8005d48 <position_controller+0x250>
		q[i] = 360.0 - ((amt222_readPos(i) / 4096.0) * 360.0); // amtreadpos has to be modified with an argument
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff ff60 	bl	80059d0 <amt222_readPos>
 8005b10:	4603      	mov	r3, r0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fa fd26 	bl	8000564 <__aeabi_i2d>
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	4b92      	ldr	r3, [pc, #584]	; (8005d68 <position_controller+0x270>)
 8005b1e:	f7fa feb5 	bl	800088c <__aeabi_ddiv>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4610      	mov	r0, r2
 8005b28:	4619      	mov	r1, r3
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	4b8f      	ldr	r3, [pc, #572]	; (8005d6c <position_controller+0x274>)
 8005b30:	f7fa fd82 	bl	8000638 <__aeabi_dmul>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	f04f 0000 	mov.w	r0, #0
 8005b3c:	498b      	ldr	r1, [pc, #556]	; (8005d6c <position_controller+0x274>)
 8005b3e:	f7fa fbc3 	bl	80002c8 <__aeabi_dsub>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4610      	mov	r0, r2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f7fb f84d 	bl	8000be8 <__aeabi_d2f>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	4987      	ldr	r1, [pc, #540]	; (8005d70 <position_controller+0x278>)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	440b      	add	r3, r1
 8005b58:	601a      	str	r2, [r3, #0]

		if (q[i] == 360.0)
 8005b5a:	4a85      	ldr	r2, [pc, #532]	; (8005d70 <position_controller+0x278>)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	edd3 7a00 	vldr	s15, [r3]
 8005b66:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8005d74 <position_controller+0x27c>
 8005b6a:	eef4 7a47 	vcmp.f32	s15, s14
 8005b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b72:	d106      	bne.n	8005b82 <position_controller+0x8a>
			q[i] = 0;
 8005b74:	4a7e      	ldr	r2, [pc, #504]	; (8005d70 <position_controller+0x278>)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
		//compute error


		Pos_error[i] = q_target[i] - q[i];
 8005b82:	4a7d      	ldr	r2, [pc, #500]	; (8005d78 <position_controller+0x280>)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	ed93 7a00 	vldr	s14, [r3]
 8005b8e:	4a78      	ldr	r2, [pc, #480]	; (8005d70 <position_controller+0x278>)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	edd3 7a00 	vldr	s15, [r3]
 8005b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b9e:	4a77      	ldr	r2, [pc, #476]	; (8005d7c <position_controller+0x284>)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	edc3 7a00 	vstr	s15, [r3]

		if (q[i] > 340 && q[i] < 359)
 8005baa:	4a71      	ldr	r2, [pc, #452]	; (8005d70 <position_controller+0x278>)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	edd3 7a00 	vldr	s15, [r3]
 8005bb6:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8005d80 <position_controller+0x288>
 8005bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc2:	dd1a      	ble.n	8005bfa <position_controller+0x102>
 8005bc4:	4a6a      	ldr	r2, [pc, #424]	; (8005d70 <position_controller+0x278>)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	edd3 7a00 	vldr	s15, [r3]
 8005bd0:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8005d84 <position_controller+0x28c>
 8005bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bdc:	d50d      	bpl.n	8005bfa <position_controller+0x102>
			Pos_error[i] = -Pos_error[i];
 8005bde:	4a67      	ldr	r2, [pc, #412]	; (8005d7c <position_controller+0x284>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	edd3 7a00 	vldr	s15, [r3]
 8005bea:	eef1 7a67 	vneg.f32	s15, s15
 8005bee:	4a63      	ldr	r2, [pc, #396]	; (8005d7c <position_controller+0x284>)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	edc3 7a00 	vstr	s15, [r3]

		Pos_integral[i] += Pos_error[i];
 8005bfa:	4a60      	ldr	r2, [pc, #384]	; (8005d7c <position_controller+0x284>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	ed93 7a00 	vldr	s14, [r3]
 8005c06:	4a60      	ldr	r2, [pc, #384]	; (8005d88 <position_controller+0x290>)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	edd3 7a00 	vldr	s15, [r3]
 8005c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c16:	4a5c      	ldr	r2, [pc, #368]	; (8005d88 <position_controller+0x290>)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	edc3 7a00 	vstr	s15, [r3]

		u[i] = (KP * Pos_error[i] + KI * Pos_integral[i]);
 8005c22:	4a56      	ldr	r2, [pc, #344]	; (8005d7c <position_controller+0x284>)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fa fcab 	bl	8000588 <__aeabi_f2d>
 8005c32:	a34b      	add	r3, pc, #300	; (adr r3, 8005d60 <position_controller+0x268>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa fcfe 	bl	8000638 <__aeabi_dmul>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4614      	mov	r4, r2
 8005c42:	461d      	mov	r5, r3
 8005c44:	4a50      	ldr	r2, [pc, #320]	; (8005d88 <position_controller+0x290>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	edd3 7a00 	vldr	s15, [r3]
 8005c50:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005d8c <position_controller+0x294>
 8005c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c58:	ee17 0a90 	vmov	r0, s15
 8005c5c:	f7fa fc94 	bl	8000588 <__aeabi_f2d>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4620      	mov	r0, r4
 8005c66:	4629      	mov	r1, r5
 8005c68:	f7fa fb30 	bl	80002cc <__adddf3>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4610      	mov	r0, r2
 8005c72:	4619      	mov	r1, r3
 8005c74:	f7fa ffb8 	bl	8000be8 <__aeabi_d2f>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	4945      	ldr	r1, [pc, #276]	; (8005d90 <position_controller+0x298>)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	601a      	str	r2, [r3, #0]

		printf("JOINT: %d - Target = %.2f - Curr = %.2f - Err = %.2f - Int = %.2f - Comm = %.4f \n",i, q_target[i], q[i], Pos_error[i], Pos_integral[i], u[i]);
 8005c84:	4a3c      	ldr	r2, [pc, #240]	; (8005d78 <position_controller+0x280>)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fa fc7a 	bl	8000588 <__aeabi_f2d>
 8005c94:	e9c7 0100 	strd	r0, r1, [r7]
 8005c98:	4a35      	ldr	r2, [pc, #212]	; (8005d70 <position_controller+0x278>)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fa fc70 	bl	8000588 <__aeabi_f2d>
 8005ca8:	4604      	mov	r4, r0
 8005caa:	460d      	mov	r5, r1
 8005cac:	4a33      	ldr	r2, [pc, #204]	; (8005d7c <position_controller+0x284>)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fa fc66 	bl	8000588 <__aeabi_f2d>
 8005cbc:	4680      	mov	r8, r0
 8005cbe:	4689      	mov	r9, r1
 8005cc0:	4a31      	ldr	r2, [pc, #196]	; (8005d88 <position_controller+0x290>)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fa fc5c 	bl	8000588 <__aeabi_f2d>
 8005cd0:	4682      	mov	sl, r0
 8005cd2:	468b      	mov	fp, r1
 8005cd4:	4a2e      	ldr	r2, [pc, #184]	; (8005d90 <position_controller+0x298>)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fa fc52 	bl	8000588 <__aeabi_f2d>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005cec:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8005cf0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005cf4:	e9cd 4500 	strd	r4, r5, [sp]
 8005cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cfc:	68f9      	ldr	r1, [r7, #12]
 8005cfe:	4825      	ldr	r0, [pc, #148]	; (8005d94 <position_controller+0x29c>)
 8005d00:	f001 f974 	bl	8006fec <iprintf>

		HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8005d04:	2201      	movs	r2, #1
 8005d06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d0a:	4823      	ldr	r0, [pc, #140]	; (8005d98 <position_controller+0x2a0>)
 8005d0c:	f7fc fa1a 	bl	8002144 <HAL_GPIO_WritePin>

		rotate(&motor[i], u[i], 0);
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4a20      	ldr	r2, [pc, #128]	; (8005d9c <position_controller+0x2a4>)
 8005d1c:	441a      	add	r2, r3
 8005d1e:	491c      	ldr	r1, [pc, #112]	; (8005d90 <position_controller+0x298>)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	edd3 7a00 	vldr	s15, [r3]
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d30:	4610      	mov	r0, r2
 8005d32:	f7ff f98d 	bl	8005050 <rotate>

		HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8005d36:	2200      	movs	r2, #0
 8005d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d3c:	4816      	ldr	r0, [pc, #88]	; (8005d98 <position_controller+0x2a0>)
 8005d3e:	f7fc fa01 	bl	8002144 <HAL_GPIO_WritePin>
	for (i = 0; i < 6; i++) {
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3301      	adds	r3, #1
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b05      	cmp	r3, #5
 8005d4c:	f77f aedb 	ble.w	8005b06 <position_controller+0xe>
	}
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d5c:	f3af 8000 	nop.w
 8005d60:	47ae147b 	.word	0x47ae147b
 8005d64:	3f747ae1 	.word	0x3f747ae1
 8005d68:	40b00000 	.word	0x40b00000
 8005d6c:	40768000 	.word	0x40768000
 8005d70:	200004d0 	.word	0x200004d0
 8005d74:	43b40000 	.word	0x43b40000
 8005d78:	20000250 	.word	0x20000250
 8005d7c:	200004b8 	.word	0x200004b8
 8005d80:	43aa0000 	.word	0x43aa0000
 8005d84:	43b38000 	.word	0x43b38000
 8005d88:	200003b0 	.word	0x200003b0
 8005d8c:	00000000 	.word	0x00000000
 8005d90:	200004e8 	.word	0x200004e8
 8005d94:	08009440 	.word	0x08009440
 8005d98:	40020400 	.word	0x40020400
 8005d9c:	20000410 	.word	0x20000410

08005da0 <encoders_check>:

void encoders_check() {
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
for(int j = 0; j <3; j++) {
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	e049      	b.n	8005e40 <encoders_check+0xa0>
	amt222_readPos(j); // dummy read
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff fe0d 	bl	80059d0 <amt222_readPos>

	HAL_Delay(250);
 8005db6:	20fa      	movs	r0, #250	; 0xfa
 8005db8:	f7fb f954 	bl	8001064 <HAL_Delay>

	int temp = amt222_readPos(j);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fe05 	bl	80059d0 <amt222_readPos>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	60bb      	str	r3, [r7, #8]

	if (temp == 0xFFFF) {
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d103      	bne.n	8005ddc <encoders_check+0x3c>
		printf("Encoder Error\n");
 8005dd4:	481e      	ldr	r0, [pc, #120]	; (8005e50 <encoders_check+0xb0>)
 8005dd6:	f001 f98f 	bl	80070f8 <puts>
		while (1)
 8005dda:	e7fe      	b.n	8005dda <encoders_check+0x3a>
			;
	}

	else {

		float pos = 360 - (amt222_readPos(j) / 4096.0) * 360.0;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fdf5 	bl	80059d0 <amt222_readPos>
 8005de6:	4603      	mov	r3, r0
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fa fbbb 	bl	8000564 <__aeabi_i2d>
 8005dee:	f04f 0200 	mov.w	r2, #0
 8005df2:	4b18      	ldr	r3, [pc, #96]	; (8005e54 <encoders_check+0xb4>)
 8005df4:	f7fa fd4a 	bl	800088c <__aeabi_ddiv>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4619      	mov	r1, r3
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <encoders_check+0xb8>)
 8005e06:	f7fa fc17 	bl	8000638 <__aeabi_dmul>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	f04f 0000 	mov.w	r0, #0
 8005e12:	4911      	ldr	r1, [pc, #68]	; (8005e58 <encoders_check+0xb8>)
 8005e14:	f7fa fa58 	bl	80002c8 <__aeabi_dsub>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	4619      	mov	r1, r3
 8005e20:	f7fa fee2 	bl	8000be8 <__aeabi_d2f>
 8005e24:	4603      	mov	r3, r0
 8005e26:	607b      	str	r3, [r7, #4]

		printf("Encoder %d Initialized - Actual Pos: %.2f\n",j,pos);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7fa fbad 	bl	8000588 <__aeabi_f2d>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	4809      	ldr	r0, [pc, #36]	; (8005e5c <encoders_check+0xbc>)
 8005e36:	f001 f8d9 	bl	8006fec <iprintf>
for(int j = 0; j <3; j++) {
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	ddb2      	ble.n	8005dac <encoders_check+0xc>
		}
	}
}
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	08009494 	.word	0x08009494
 8005e54:	40b00000 	.word	0x40b00000
 8005e58:	40768000 	.word	0x40768000
 8005e5c:	080094a4 	.word	0x080094a4

08005e60 <init_steppers>:

void init_steppers() {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 8005e66:	2300      	movs	r3, #0
 8005e68:	607b      	str	r3, [r7, #4]
 8005e6a:	e03f      	b.n	8005eec <init_steppers+0x8c>
		motor[i].dir_Pin = DIR_Pin;
 8005e6c:	4923      	ldr	r1, [pc, #140]	; (8005efc <init_steppers+0x9c>)
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	2280      	movs	r2, #128	; 0x80
 8005e7c:	801a      	strh	r2, [r3, #0]
		motor[i].dir_Port = DIR_GPIO_Port;
 8005e7e:	491f      	ldr	r1, [pc, #124]	; (8005efc <init_steppers+0x9c>)
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4a1c      	ldr	r2, [pc, #112]	; (8005f00 <init_steppers+0xa0>)
 8005e90:	601a      	str	r2, [r3, #0]
		motor[i].htim = &htim8;
 8005e92:	491a      	ldr	r1, [pc, #104]	; (8005efc <init_steppers+0x9c>)
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	4a18      	ldr	r2, [pc, #96]	; (8005f04 <init_steppers+0xa4>)
 8005ea4:	601a      	str	r2, [r3, #0]
		motor[i].speed = 300;
 8005ea6:	4915      	ldr	r1, [pc, #84]	; (8005efc <init_steppers+0x9c>)
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	3310      	adds	r3, #16
 8005eb6:	4a14      	ldr	r2, [pc, #80]	; (8005f08 <init_steppers+0xa8>)
 8005eb8:	601a      	str	r2, [r3, #0]
		motor[i].stepChannel = TIM_CHANNEL_1;
 8005eba:	4910      	ldr	r1, [pc, #64]	; (8005efc <init_steppers+0x9c>)
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	440b      	add	r3, r1
 8005ec8:	3308      	adds	r3, #8
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]

		setSpeed(&motor[i], 150);
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4a08      	ldr	r2, [pc, #32]	; (8005efc <init_steppers+0x9c>)
 8005eda:	4413      	add	r3, r2
 8005edc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8005f0c <init_steppers+0xac>
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff f91d 	bl	8005120 <setSpeed>
	for (int i = 0; i < 3; i++) {
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	607b      	str	r3, [r7, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	ddbc      	ble.n	8005e6c <init_steppers+0xc>
	}
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	20000410 	.word	0x20000410
 8005f00:	40020800 	.word	0x40020800
 8005f04:	20000208 	.word	0x20000208
 8005f08:	43960000 	.word	0x43960000
 8005f0c:	43160000 	.word	0x43160000

08005f10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim2) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a07      	ldr	r2, [pc, #28]	; (8005f38 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d106      	bne.n	8005f2e <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8005f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f24:	4805      	ldr	r0, [pc, #20]	; (8005f3c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005f26:	f7fc f926 	bl	8002176 <HAL_GPIO_TogglePin>
		position_controller();
 8005f2a:	f7ff fde5 	bl	8005af8 <position_controller>

	}
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	200003c8 	.word	0x200003c8
 8005f3c:	40020000 	.word	0x40020000

08005f40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("Erron Handler triggered\n");
 8005f44:	4802      	ldr	r0, [pc, #8]	; (8005f50 <Error_Handler+0x10>)
 8005f46:	f001 f8d7 	bl	80070f8 <puts>
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
 8005f4a:	bf00      	nop
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	080094d0 	.word	0x080094d0

08005f54 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
	gHuart = huart;
 8005f5c:	4a07      	ldr	r2, [pc, #28]	; (8005f7c <RetargetInit+0x28>)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6013      	str	r3, [r2, #0]

	/* Disable I/O buffering for STDOUT stream, so that
	 * chars are sent out as soon as they are printed. */
	setvbuf(stdout, NULL, _IONBF, 0);
 8005f62:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <RetargetInit+0x2c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6898      	ldr	r0, [r3, #8]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	f001 f8cb 	bl	8007108 <setvbuf>
}
 8005f72:	bf00      	nop
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000500 	.word	0x20000500
 8005f80:	2000000c 	.word	0x2000000c

08005f84 <_isatty>:

int _isatty(int fd) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	db04      	blt.n	8005f9c <_isatty+0x18>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	dc01      	bgt.n	8005f9c <_isatty+0x18>
		return 1;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e005      	b.n	8005fa8 <_isatty+0x24>

	errno = EBADF;
 8005f9c:	f000 fb8a 	bl	80066b4 <__errno>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2209      	movs	r2, #9
 8005fa4:	601a      	str	r2, [r3, #0]
	return 0;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <_write>:

int _write(int fd, char *ptr, int len) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d002      	beq.n	8005fc8 <_write+0x18>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d111      	bne.n	8005fec <_write+0x3c>
		hstatus = HAL_UART_Transmit(gHuart, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8005fc8:	4b0e      	ldr	r3, [pc, #56]	; (8006004 <_write+0x54>)
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	f7fe fc40 	bl	800485a <HAL_UART_Transmit>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <_write+0x38>
			return len;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	e008      	b.n	8005ffa <_write+0x4a>
		else
			return EIO;
 8005fe8:	2305      	movs	r3, #5
 8005fea:	e006      	b.n	8005ffa <_write+0x4a>
	}
	errno = EBADF;
 8005fec:	f000 fb62 	bl	80066b4 <__errno>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2209      	movs	r2, #9
 8005ff4:	601a      	str	r2, [r3, #0]
	return -1;
 8005ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000500 	.word	0x20000500

08006008 <_close>:

int _close(int fd) {
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	db04      	blt.n	8006020 <_close+0x18>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b02      	cmp	r3, #2
 800601a:	dc01      	bgt.n	8006020 <_close+0x18>
		return 0;
 800601c:	2300      	movs	r3, #0
 800601e:	e006      	b.n	800602e <_close+0x26>

	errno = EBADF;
 8006020:	f000 fb48 	bl	80066b4 <__errno>
 8006024:	4603      	mov	r3, r0
 8006026:	2209      	movs	r2, #9
 8006028:	601a      	str	r2, [r3, #0]
	return -1;
 800602a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
	(void) fd;
	(void) ptr;
	(void) dir;

	errno = EBADF;
 8006042:	f000 fb37 	bl	80066b4 <__errno>
 8006046:	4603      	mov	r3, r0
 8006048:	2209      	movs	r2, #9
 800604a:	601a      	str	r2, [r3, #0]
	return -1;
 800604c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <_read>:

int _read(int fd, char *ptr, int len) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDIN_FILENO) {
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d110      	bne.n	800608c <_read+0x34>
		hstatus = HAL_UART_Receive(gHuart, (uint8_t*) ptr, 1, HAL_MAX_DELAY);
 800606a:	4b0e      	ldr	r3, [pc, #56]	; (80060a4 <_read+0x4c>)
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	f04f 33ff 	mov.w	r3, #4294967295
 8006072:	2201      	movs	r2, #1
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	f7fe fc82 	bl	800497e <HAL_UART_Receive>
 800607a:	4603      	mov	r3, r0
 800607c:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <_read+0x30>
			return 1;
 8006084:	2301      	movs	r3, #1
 8006086:	e008      	b.n	800609a <_read+0x42>
		else
			return EIO;
 8006088:	2305      	movs	r3, #5
 800608a:	e006      	b.n	800609a <_read+0x42>
	}
	errno = EBADF;
 800608c:	f000 fb12 	bl	80066b4 <__errno>
 8006090:	4603      	mov	r3, r0
 8006092:	2209      	movs	r2, #9
 8006094:	601a      	str	r2, [r3, #0]
	return -1;
 8006096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000500 	.word	0x20000500

080060a8 <_fstat>:

int _fstat(int fd, struct stat *st) {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	db08      	blt.n	80060ca <_fstat+0x22>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	dc05      	bgt.n	80060ca <_fstat+0x22>
		st->st_mode = S_IFCHR;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060c4:	605a      	str	r2, [r3, #4]
		return 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	e005      	b.n	80060d6 <_fstat+0x2e>
	}

	errno = EBADF;
 80060ca:	f000 faf3 	bl	80066b4 <__errno>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2209      	movs	r2, #9
 80060d2:	601a      	str	r2, [r3, #0]
	return 0;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060e6:	2300      	movs	r3, #0
 80060e8:	607b      	str	r3, [r7, #4]
 80060ea:	4b10      	ldr	r3, [pc, #64]	; (800612c <HAL_MspInit+0x4c>)
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	4a0f      	ldr	r2, [pc, #60]	; (800612c <HAL_MspInit+0x4c>)
 80060f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060f4:	6453      	str	r3, [r2, #68]	; 0x44
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <HAL_MspInit+0x4c>)
 80060f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fe:	607b      	str	r3, [r7, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006102:	2300      	movs	r3, #0
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_MspInit+0x4c>)
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	4a08      	ldr	r2, [pc, #32]	; (800612c <HAL_MspInit+0x4c>)
 800610c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006110:	6413      	str	r3, [r2, #64]	; 0x40
 8006112:	4b06      	ldr	r3, [pc, #24]	; (800612c <HAL_MspInit+0x4c>)
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800611e:	2007      	movs	r0, #7
 8006120:	f7fb fe3a 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40023800 	.word	0x40023800

08006130 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	; 0x28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006138:	f107 0314 	add.w	r3, r7, #20
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	605a      	str	r2, [r3, #4]
 8006142:	609a      	str	r2, [r3, #8]
 8006144:	60da      	str	r2, [r3, #12]
 8006146:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a17      	ldr	r2, [pc, #92]	; (80061ac <HAL_ADC_MspInit+0x7c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d127      	bne.n	80061a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	4b16      	ldr	r3, [pc, #88]	; (80061b0 <HAL_ADC_MspInit+0x80>)
 8006158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615a:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <HAL_ADC_MspInit+0x80>)
 800615c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006160:	6453      	str	r3, [r2, #68]	; 0x44
 8006162:	4b13      	ldr	r3, [pc, #76]	; (80061b0 <HAL_ADC_MspInit+0x80>)
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <HAL_ADC_MspInit+0x80>)
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	4a0e      	ldr	r2, [pc, #56]	; (80061b0 <HAL_ADC_MspInit+0x80>)
 8006178:	f043 0301 	orr.w	r3, r3, #1
 800617c:	6313      	str	r3, [r2, #48]	; 0x30
 800617e:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <HAL_ADC_MspInit+0x80>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800618a:	2301      	movs	r3, #1
 800618c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800618e:	2303      	movs	r3, #3
 8006190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006196:	f107 0314 	add.w	r3, r7, #20
 800619a:	4619      	mov	r1, r3
 800619c:	4805      	ldr	r0, [pc, #20]	; (80061b4 <HAL_ADC_MspInit+0x84>)
 800619e:	f7fb fe3d 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80061a2:	bf00      	nop
 80061a4:	3728      	adds	r7, #40	; 0x28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	40012000 	.word	0x40012000
 80061b0:	40023800 	.word	0x40023800
 80061b4:	40020000 	.word	0x40020000

080061b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08a      	sub	sp, #40	; 0x28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c0:	f107 0314 	add.w	r3, r7, #20
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	605a      	str	r2, [r3, #4]
 80061ca:	609a      	str	r2, [r3, #8]
 80061cc:	60da      	str	r2, [r3, #12]
 80061ce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1d      	ldr	r2, [pc, #116]	; (800624c <HAL_CAN_MspInit+0x94>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d134      	bne.n	8006244 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80061da:	2300      	movs	r3, #0
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	4b1c      	ldr	r3, [pc, #112]	; (8006250 <HAL_CAN_MspInit+0x98>)
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	4a1b      	ldr	r2, [pc, #108]	; (8006250 <HAL_CAN_MspInit+0x98>)
 80061e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061e8:	6413      	str	r3, [r2, #64]	; 0x40
 80061ea:	4b19      	ldr	r3, [pc, #100]	; (8006250 <HAL_CAN_MspInit+0x98>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	4b15      	ldr	r3, [pc, #84]	; (8006250 <HAL_CAN_MspInit+0x98>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	4a14      	ldr	r2, [pc, #80]	; (8006250 <HAL_CAN_MspInit+0x98>)
 8006200:	f043 0301 	orr.w	r3, r3, #1
 8006204:	6313      	str	r3, [r2, #48]	; 0x30
 8006206:	4b12      	ldr	r3, [pc, #72]	; (8006250 <HAL_CAN_MspInit+0x98>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006212:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006218:	2302      	movs	r3, #2
 800621a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800621c:	2300      	movs	r3, #0
 800621e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006220:	2303      	movs	r3, #3
 8006222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006224:	2309      	movs	r3, #9
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006228:	f107 0314 	add.w	r3, r7, #20
 800622c:	4619      	mov	r1, r3
 800622e:	4809      	ldr	r0, [pc, #36]	; (8006254 <HAL_CAN_MspInit+0x9c>)
 8006230:	f7fb fdf4 	bl	8001e1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8006234:	2200      	movs	r2, #0
 8006236:	2100      	movs	r1, #0
 8006238:	2014      	movs	r0, #20
 800623a:	f7fb fdb8 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800623e:	2014      	movs	r0, #20
 8006240:	f7fb fdd1 	bl	8001de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006244:	bf00      	nop
 8006246:	3728      	adds	r7, #40	; 0x28
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	40006400 	.word	0x40006400
 8006250:	40023800 	.word	0x40023800
 8006254:	40020000 	.word	0x40020000

08006258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006260:	f107 0314 	add.w	r3, r7, #20
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	605a      	str	r2, [r3, #4]
 800626a:	609a      	str	r2, [r3, #8]
 800626c:	60da      	str	r2, [r3, #12]
 800626e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a19      	ldr	r2, [pc, #100]	; (80062dc <HAL_SPI_MspInit+0x84>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d12b      	bne.n	80062d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800627a:	2300      	movs	r3, #0
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	4b18      	ldr	r3, [pc, #96]	; (80062e0 <HAL_SPI_MspInit+0x88>)
 8006280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006282:	4a17      	ldr	r2, [pc, #92]	; (80062e0 <HAL_SPI_MspInit+0x88>)
 8006284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006288:	6453      	str	r3, [r2, #68]	; 0x44
 800628a:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <HAL_SPI_MspInit+0x88>)
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <HAL_SPI_MspInit+0x88>)
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	4a10      	ldr	r2, [pc, #64]	; (80062e0 <HAL_SPI_MspInit+0x88>)
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	6313      	str	r3, [r2, #48]	; 0x30
 80062a6:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <HAL_SPI_MspInit+0x88>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80062b2:	23e0      	movs	r3, #224	; 0xe0
 80062b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b6:	2302      	movs	r3, #2
 80062b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062be:	2303      	movs	r3, #3
 80062c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80062c2:	2305      	movs	r3, #5
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062c6:	f107 0314 	add.w	r3, r7, #20
 80062ca:	4619      	mov	r1, r3
 80062cc:	4805      	ldr	r0, [pc, #20]	; (80062e4 <HAL_SPI_MspInit+0x8c>)
 80062ce:	f7fb fda5 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80062d2:	bf00      	nop
 80062d4:	3728      	adds	r7, #40	; 0x28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	40013000 	.word	0x40013000
 80062e0:	40023800 	.word	0x40023800
 80062e4:	40020000 	.word	0x40020000

080062e8 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a12      	ldr	r2, [pc, #72]	; (8006340 <HAL_TIM_OnePulse_MspInit+0x58>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d11d      	bne.n	8006336 <HAL_TIM_OnePulse_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	4b11      	ldr	r3, [pc, #68]	; (8006344 <HAL_TIM_OnePulse_MspInit+0x5c>)
 8006300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006302:	4a10      	ldr	r2, [pc, #64]	; (8006344 <HAL_TIM_OnePulse_MspInit+0x5c>)
 8006304:	f043 0301 	orr.w	r3, r3, #1
 8006308:	6453      	str	r3, [r2, #68]	; 0x44
 800630a:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <HAL_TIM_OnePulse_MspInit+0x5c>)
 800630c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006316:	2200      	movs	r2, #0
 8006318:	2100      	movs	r1, #0
 800631a:	2019      	movs	r0, #25
 800631c:	f7fb fd47 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006320:	2019      	movs	r0, #25
 8006322:	f7fb fd60 	bl	8001de6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8006326:	2200      	movs	r2, #0
 8006328:	2100      	movs	r1, #0
 800632a:	201b      	movs	r0, #27
 800632c:	f7fb fd3f 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006330:	201b      	movs	r0, #27
 8006332:	f7fb fd58 	bl	8001de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40010000 	.word	0x40010000
 8006344:	40023800 	.word	0x40023800

08006348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006358:	d116      	bne.n	8006388 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <HAL_TIM_Base_MspInit+0x80>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	4a19      	ldr	r2, [pc, #100]	; (80063c8 <HAL_TIM_Base_MspInit+0x80>)
 8006364:	f043 0301 	orr.w	r3, r3, #1
 8006368:	6413      	str	r3, [r2, #64]	; 0x40
 800636a:	4b17      	ldr	r3, [pc, #92]	; (80063c8 <HAL_TIM_Base_MspInit+0x80>)
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006376:	2200      	movs	r2, #0
 8006378:	2100      	movs	r1, #0
 800637a:	201c      	movs	r0, #28
 800637c:	f7fb fd17 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006380:	201c      	movs	r0, #28
 8006382:	f7fb fd30 	bl	8001de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006386:	e01a      	b.n	80063be <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a0f      	ldr	r2, [pc, #60]	; (80063cc <HAL_TIM_Base_MspInit+0x84>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d115      	bne.n	80063be <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006392:	2300      	movs	r3, #0
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <HAL_TIM_Base_MspInit+0x80>)
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	4a0b      	ldr	r2, [pc, #44]	; (80063c8 <HAL_TIM_Base_MspInit+0x80>)
 800639c:	f043 0302 	orr.w	r3, r3, #2
 80063a0:	6413      	str	r3, [r2, #64]	; 0x40
 80063a2:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <HAL_TIM_Base_MspInit+0x80>)
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	60bb      	str	r3, [r7, #8]
 80063ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80063ae:	2200      	movs	r2, #0
 80063b0:	2100      	movs	r1, #0
 80063b2:	201d      	movs	r0, #29
 80063b4:	f7fb fcfb 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80063b8:	201d      	movs	r0, #29
 80063ba:	f7fb fd14 	bl	8001de6 <HAL_NVIC_EnableIRQ>
}
 80063be:	bf00      	nop
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40023800 	.word	0x40023800
 80063cc:	40000400 	.word	0x40000400

080063d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a0b      	ldr	r2, [pc, #44]	; (800640c <HAL_TIM_PWM_MspInit+0x3c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d10d      	bne.n	80063fe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <HAL_TIM_PWM_MspInit+0x40>)
 80063e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ea:	4a09      	ldr	r2, [pc, #36]	; (8006410 <HAL_TIM_PWM_MspInit+0x40>)
 80063ec:	f043 0302 	orr.w	r3, r3, #2
 80063f0:	6453      	str	r3, [r2, #68]	; 0x44
 80063f2:	4b07      	ldr	r3, [pc, #28]	; (8006410 <HAL_TIM_PWM_MspInit+0x40>)
 80063f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80063fe:	bf00      	nop
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40010400 	.word	0x40010400
 8006410:	40023800 	.word	0x40023800

08006414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800641c:	f107 030c 	add.w	r3, r7, #12
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	605a      	str	r2, [r3, #4]
 8006426:	609a      	str	r2, [r3, #8]
 8006428:	60da      	str	r2, [r3, #12]
 800642a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a12      	ldr	r2, [pc, #72]	; (800647c <HAL_TIM_MspPostInit+0x68>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d11d      	bne.n	8006472 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	4b11      	ldr	r3, [pc, #68]	; (8006480 <HAL_TIM_MspPostInit+0x6c>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	4a10      	ldr	r2, [pc, #64]	; (8006480 <HAL_TIM_MspPostInit+0x6c>)
 8006440:	f043 0304 	orr.w	r3, r3, #4
 8006444:	6313      	str	r3, [r2, #48]	; 0x30
 8006446:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <HAL_TIM_MspPostInit+0x6c>)
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	60bb      	str	r3, [r7, #8]
 8006450:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006452:	2340      	movs	r3, #64	; 0x40
 8006454:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006456:	2302      	movs	r3, #2
 8006458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800645e:	2300      	movs	r3, #0
 8006460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006462:	2303      	movs	r3, #3
 8006464:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006466:	f107 030c 	add.w	r3, r7, #12
 800646a:	4619      	mov	r1, r3
 800646c:	4805      	ldr	r0, [pc, #20]	; (8006484 <HAL_TIM_MspPostInit+0x70>)
 800646e:	f7fb fcd5 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006472:	bf00      	nop
 8006474:	3720      	adds	r7, #32
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40010400 	.word	0x40010400
 8006480:	40023800 	.word	0x40023800
 8006484:	40020800 	.word	0x40020800

08006488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	; 0x28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006490:	f107 0314 	add.w	r3, r7, #20
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	605a      	str	r2, [r3, #4]
 800649a:	609a      	str	r2, [r3, #8]
 800649c:	60da      	str	r2, [r3, #12]
 800649e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a19      	ldr	r2, [pc, #100]	; (800650c <HAL_UART_MspInit+0x84>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d12b      	bne.n	8006502 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80064aa:	2300      	movs	r3, #0
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	4b18      	ldr	r3, [pc, #96]	; (8006510 <HAL_UART_MspInit+0x88>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	4a17      	ldr	r2, [pc, #92]	; (8006510 <HAL_UART_MspInit+0x88>)
 80064b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b8:	6413      	str	r3, [r2, #64]	; 0x40
 80064ba:	4b15      	ldr	r3, [pc, #84]	; (8006510 <HAL_UART_MspInit+0x88>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <HAL_UART_MspInit+0x88>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	4a10      	ldr	r2, [pc, #64]	; (8006510 <HAL_UART_MspInit+0x88>)
 80064d0:	f043 0301 	orr.w	r3, r3, #1
 80064d4:	6313      	str	r3, [r2, #48]	; 0x30
 80064d6:	4b0e      	ldr	r3, [pc, #56]	; (8006510 <HAL_UART_MspInit+0x88>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80064e2:	230c      	movs	r3, #12
 80064e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e6:	2302      	movs	r3, #2
 80064e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064ee:	2303      	movs	r3, #3
 80064f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80064f2:	2307      	movs	r3, #7
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064f6:	f107 0314 	add.w	r3, r7, #20
 80064fa:	4619      	mov	r1, r3
 80064fc:	4805      	ldr	r0, [pc, #20]	; (8006514 <HAL_UART_MspInit+0x8c>)
 80064fe:	f7fb fc8d 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006502:	bf00      	nop
 8006504:	3728      	adds	r7, #40	; 0x28
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	40004400 	.word	0x40004400
 8006510:	40023800 	.word	0x40023800
 8006514:	40020000 	.word	0x40020000

08006518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800651c:	e7fe      	b.n	800651c <NMI_Handler+0x4>

0800651e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800651e:	b480      	push	{r7}
 8006520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006522:	e7fe      	b.n	8006522 <HardFault_Handler+0x4>

08006524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006528:	e7fe      	b.n	8006528 <MemManage_Handler+0x4>

0800652a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800652a:	b480      	push	{r7}
 800652c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800652e:	e7fe      	b.n	800652e <BusFault_Handler+0x4>

08006530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006534:	e7fe      	b.n	8006534 <UsageFault_Handler+0x4>

08006536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006536:	b480      	push	{r7}
 8006538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800653a:	bf00      	nop
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006548:	bf00      	nop
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006552:	b480      	push	{r7}
 8006554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006556:	bf00      	nop
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006564:	f7fa fd5e 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006568:	bf00      	nop
 800656a:	bd80      	pop	{r7, pc}

0800656c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006570:	4802      	ldr	r0, [pc, #8]	; (800657c <CAN1_RX0_IRQHandler+0x10>)
 8006572:	f7fb f908 	bl	8001786 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006576:	bf00      	nop
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	20000490 	.word	0x20000490

08006580 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006584:	4802      	ldr	r0, [pc, #8]	; (8006590 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006586:	f7fd fa77 	bl	8003a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800658a:	bf00      	nop
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20000310 	.word	0x20000310

08006594 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006598:	4802      	ldr	r0, [pc, #8]	; (80065a4 <TIM1_CC_IRQHandler+0x10>)
 800659a:	f7fd fa6d 	bl	8003a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800659e:	bf00      	nop
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20000310 	.word	0x20000310

080065a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80065ac:	4802      	ldr	r0, [pc, #8]	; (80065b8 <TIM2_IRQHandler+0x10>)
 80065ae:	f7fd fa63 	bl	8003a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80065b2:	bf00      	nop
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	200003c8 	.word	0x200003c8

080065bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80065c0:	4802      	ldr	r0, [pc, #8]	; (80065cc <TIM3_IRQHandler+0x10>)
 80065c2:	f7fd fa59 	bl	8003a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80065c6:	bf00      	nop
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000268 	.word	0x20000268

080065d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065d8:	4a14      	ldr	r2, [pc, #80]	; (800662c <_sbrk+0x5c>)
 80065da:	4b15      	ldr	r3, [pc, #84]	; (8006630 <_sbrk+0x60>)
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065e4:	4b13      	ldr	r3, [pc, #76]	; (8006634 <_sbrk+0x64>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065ec:	4b11      	ldr	r3, [pc, #68]	; (8006634 <_sbrk+0x64>)
 80065ee:	4a12      	ldr	r2, [pc, #72]	; (8006638 <_sbrk+0x68>)
 80065f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065f2:	4b10      	ldr	r3, [pc, #64]	; (8006634 <_sbrk+0x64>)
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4413      	add	r3, r2
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d207      	bcs.n	8006610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006600:	f000 f858 	bl	80066b4 <__errno>
 8006604:	4603      	mov	r3, r0
 8006606:	220c      	movs	r2, #12
 8006608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800660a:	f04f 33ff 	mov.w	r3, #4294967295
 800660e:	e009      	b.n	8006624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006610:	4b08      	ldr	r3, [pc, #32]	; (8006634 <_sbrk+0x64>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006616:	4b07      	ldr	r3, [pc, #28]	; (8006634 <_sbrk+0x64>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4413      	add	r3, r2
 800661e:	4a05      	ldr	r2, [pc, #20]	; (8006634 <_sbrk+0x64>)
 8006620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006622:	68fb      	ldr	r3, [r7, #12]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	20020000 	.word	0x20020000
 8006630:	00000400 	.word	0x00000400
 8006634:	200001f8 	.word	0x200001f8
 8006638:	20000518 	.word	0x20000518

0800663c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <SystemInit+0x20>)
 8006642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006646:	4a05      	ldr	r2, [pc, #20]	; (800665c <SystemInit+0x20>)
 8006648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800664c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006650:	bf00      	nop
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	e000ed00 	.word	0xe000ed00

08006660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006698 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006664:	480d      	ldr	r0, [pc, #52]	; (800669c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006666:	490e      	ldr	r1, [pc, #56]	; (80066a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006668:	4a0e      	ldr	r2, [pc, #56]	; (80066a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800666a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800666c:	e002      	b.n	8006674 <LoopCopyDataInit>

0800666e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800666e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006672:	3304      	adds	r3, #4

08006674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006678:	d3f9      	bcc.n	800666e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800667a:	4a0b      	ldr	r2, [pc, #44]	; (80066a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800667c:	4c0b      	ldr	r4, [pc, #44]	; (80066ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800667e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006680:	e001      	b.n	8006686 <LoopFillZerobss>

08006682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006684:	3204      	adds	r2, #4

08006686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006688:	d3fb      	bcc.n	8006682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800668a:	f7ff ffd7 	bl	800663c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800668e:	f000 f817 	bl	80066c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006692:	f7fe fe13 	bl	80052bc <main>
  bx  lr    
 8006696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800669c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066a0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80066a4:	080098f4 	.word	0x080098f4
  ldr r2, =_sbss
 80066a8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80066ac:	20000514 	.word	0x20000514

080066b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066b0:	e7fe      	b.n	80066b0 <ADC_IRQHandler>
	...

080066b4 <__errno>:
 80066b4:	4b01      	ldr	r3, [pc, #4]	; (80066bc <__errno+0x8>)
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	2000000c 	.word	0x2000000c

080066c0 <__libc_init_array>:
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	4d0d      	ldr	r5, [pc, #52]	; (80066f8 <__libc_init_array+0x38>)
 80066c4:	4c0d      	ldr	r4, [pc, #52]	; (80066fc <__libc_init_array+0x3c>)
 80066c6:	1b64      	subs	r4, r4, r5
 80066c8:	10a4      	asrs	r4, r4, #2
 80066ca:	2600      	movs	r6, #0
 80066cc:	42a6      	cmp	r6, r4
 80066ce:	d109      	bne.n	80066e4 <__libc_init_array+0x24>
 80066d0:	4d0b      	ldr	r5, [pc, #44]	; (8006700 <__libc_init_array+0x40>)
 80066d2:	4c0c      	ldr	r4, [pc, #48]	; (8006704 <__libc_init_array+0x44>)
 80066d4:	f002 fe9e 	bl	8009414 <_init>
 80066d8:	1b64      	subs	r4, r4, r5
 80066da:	10a4      	asrs	r4, r4, #2
 80066dc:	2600      	movs	r6, #0
 80066de:	42a6      	cmp	r6, r4
 80066e0:	d105      	bne.n	80066ee <__libc_init_array+0x2e>
 80066e2:	bd70      	pop	{r4, r5, r6, pc}
 80066e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e8:	4798      	blx	r3
 80066ea:	3601      	adds	r6, #1
 80066ec:	e7ee      	b.n	80066cc <__libc_init_array+0xc>
 80066ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f2:	4798      	blx	r3
 80066f4:	3601      	adds	r6, #1
 80066f6:	e7f2      	b.n	80066de <__libc_init_array+0x1e>
 80066f8:	080098ec 	.word	0x080098ec
 80066fc:	080098ec 	.word	0x080098ec
 8006700:	080098ec 	.word	0x080098ec
 8006704:	080098f0 	.word	0x080098f0

08006708 <memset>:
 8006708:	4402      	add	r2, r0
 800670a:	4603      	mov	r3, r0
 800670c:	4293      	cmp	r3, r2
 800670e:	d100      	bne.n	8006712 <memset+0xa>
 8006710:	4770      	bx	lr
 8006712:	f803 1b01 	strb.w	r1, [r3], #1
 8006716:	e7f9      	b.n	800670c <memset+0x4>

08006718 <__cvt>:
 8006718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800671c:	ec55 4b10 	vmov	r4, r5, d0
 8006720:	2d00      	cmp	r5, #0
 8006722:	460e      	mov	r6, r1
 8006724:	4619      	mov	r1, r3
 8006726:	462b      	mov	r3, r5
 8006728:	bfbb      	ittet	lt
 800672a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800672e:	461d      	movlt	r5, r3
 8006730:	2300      	movge	r3, #0
 8006732:	232d      	movlt	r3, #45	; 0x2d
 8006734:	700b      	strb	r3, [r1, #0]
 8006736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006738:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800673c:	4691      	mov	r9, r2
 800673e:	f023 0820 	bic.w	r8, r3, #32
 8006742:	bfbc      	itt	lt
 8006744:	4622      	movlt	r2, r4
 8006746:	4614      	movlt	r4, r2
 8006748:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800674c:	d005      	beq.n	800675a <__cvt+0x42>
 800674e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006752:	d100      	bne.n	8006756 <__cvt+0x3e>
 8006754:	3601      	adds	r6, #1
 8006756:	2102      	movs	r1, #2
 8006758:	e000      	b.n	800675c <__cvt+0x44>
 800675a:	2103      	movs	r1, #3
 800675c:	ab03      	add	r3, sp, #12
 800675e:	9301      	str	r3, [sp, #4]
 8006760:	ab02      	add	r3, sp, #8
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	ec45 4b10 	vmov	d0, r4, r5
 8006768:	4653      	mov	r3, sl
 800676a:	4632      	mov	r2, r6
 800676c:	f000 fee0 	bl	8007530 <_dtoa_r>
 8006770:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006774:	4607      	mov	r7, r0
 8006776:	d102      	bne.n	800677e <__cvt+0x66>
 8006778:	f019 0f01 	tst.w	r9, #1
 800677c:	d022      	beq.n	80067c4 <__cvt+0xac>
 800677e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006782:	eb07 0906 	add.w	r9, r7, r6
 8006786:	d110      	bne.n	80067aa <__cvt+0x92>
 8006788:	783b      	ldrb	r3, [r7, #0]
 800678a:	2b30      	cmp	r3, #48	; 0x30
 800678c:	d10a      	bne.n	80067a4 <__cvt+0x8c>
 800678e:	2200      	movs	r2, #0
 8006790:	2300      	movs	r3, #0
 8006792:	4620      	mov	r0, r4
 8006794:	4629      	mov	r1, r5
 8006796:	f7fa f9b7 	bl	8000b08 <__aeabi_dcmpeq>
 800679a:	b918      	cbnz	r0, 80067a4 <__cvt+0x8c>
 800679c:	f1c6 0601 	rsb	r6, r6, #1
 80067a0:	f8ca 6000 	str.w	r6, [sl]
 80067a4:	f8da 3000 	ldr.w	r3, [sl]
 80067a8:	4499      	add	r9, r3
 80067aa:	2200      	movs	r2, #0
 80067ac:	2300      	movs	r3, #0
 80067ae:	4620      	mov	r0, r4
 80067b0:	4629      	mov	r1, r5
 80067b2:	f7fa f9a9 	bl	8000b08 <__aeabi_dcmpeq>
 80067b6:	b108      	cbz	r0, 80067bc <__cvt+0xa4>
 80067b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80067bc:	2230      	movs	r2, #48	; 0x30
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	454b      	cmp	r3, r9
 80067c2:	d307      	bcc.n	80067d4 <__cvt+0xbc>
 80067c4:	9b03      	ldr	r3, [sp, #12]
 80067c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067c8:	1bdb      	subs	r3, r3, r7
 80067ca:	4638      	mov	r0, r7
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	b004      	add	sp, #16
 80067d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d4:	1c59      	adds	r1, r3, #1
 80067d6:	9103      	str	r1, [sp, #12]
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e7f0      	b.n	80067be <__cvt+0xa6>

080067dc <__exponent>:
 80067dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067de:	4603      	mov	r3, r0
 80067e0:	2900      	cmp	r1, #0
 80067e2:	bfb8      	it	lt
 80067e4:	4249      	neglt	r1, r1
 80067e6:	f803 2b02 	strb.w	r2, [r3], #2
 80067ea:	bfb4      	ite	lt
 80067ec:	222d      	movlt	r2, #45	; 0x2d
 80067ee:	222b      	movge	r2, #43	; 0x2b
 80067f0:	2909      	cmp	r1, #9
 80067f2:	7042      	strb	r2, [r0, #1]
 80067f4:	dd2a      	ble.n	800684c <__exponent+0x70>
 80067f6:	f10d 0407 	add.w	r4, sp, #7
 80067fa:	46a4      	mov	ip, r4
 80067fc:	270a      	movs	r7, #10
 80067fe:	46a6      	mov	lr, r4
 8006800:	460a      	mov	r2, r1
 8006802:	fb91 f6f7 	sdiv	r6, r1, r7
 8006806:	fb07 1516 	mls	r5, r7, r6, r1
 800680a:	3530      	adds	r5, #48	; 0x30
 800680c:	2a63      	cmp	r2, #99	; 0x63
 800680e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006812:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006816:	4631      	mov	r1, r6
 8006818:	dcf1      	bgt.n	80067fe <__exponent+0x22>
 800681a:	3130      	adds	r1, #48	; 0x30
 800681c:	f1ae 0502 	sub.w	r5, lr, #2
 8006820:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006824:	1c44      	adds	r4, r0, #1
 8006826:	4629      	mov	r1, r5
 8006828:	4561      	cmp	r1, ip
 800682a:	d30a      	bcc.n	8006842 <__exponent+0x66>
 800682c:	f10d 0209 	add.w	r2, sp, #9
 8006830:	eba2 020e 	sub.w	r2, r2, lr
 8006834:	4565      	cmp	r5, ip
 8006836:	bf88      	it	hi
 8006838:	2200      	movhi	r2, #0
 800683a:	4413      	add	r3, r2
 800683c:	1a18      	subs	r0, r3, r0
 800683e:	b003      	add	sp, #12
 8006840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006846:	f804 2f01 	strb.w	r2, [r4, #1]!
 800684a:	e7ed      	b.n	8006828 <__exponent+0x4c>
 800684c:	2330      	movs	r3, #48	; 0x30
 800684e:	3130      	adds	r1, #48	; 0x30
 8006850:	7083      	strb	r3, [r0, #2]
 8006852:	70c1      	strb	r1, [r0, #3]
 8006854:	1d03      	adds	r3, r0, #4
 8006856:	e7f1      	b.n	800683c <__exponent+0x60>

08006858 <_printf_float>:
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	ed2d 8b02 	vpush	{d8}
 8006860:	b08d      	sub	sp, #52	; 0x34
 8006862:	460c      	mov	r4, r1
 8006864:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006868:	4616      	mov	r6, r2
 800686a:	461f      	mov	r7, r3
 800686c:	4605      	mov	r5, r0
 800686e:	f001 fe03 	bl	8008478 <_localeconv_r>
 8006872:	f8d0 a000 	ldr.w	sl, [r0]
 8006876:	4650      	mov	r0, sl
 8006878:	f7f9 fcca 	bl	8000210 <strlen>
 800687c:	2300      	movs	r3, #0
 800687e:	930a      	str	r3, [sp, #40]	; 0x28
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	9305      	str	r3, [sp, #20]
 8006884:	f8d8 3000 	ldr.w	r3, [r8]
 8006888:	f894 b018 	ldrb.w	fp, [r4, #24]
 800688c:	3307      	adds	r3, #7
 800688e:	f023 0307 	bic.w	r3, r3, #7
 8006892:	f103 0208 	add.w	r2, r3, #8
 8006896:	f8c8 2000 	str.w	r2, [r8]
 800689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068aa:	9307      	str	r3, [sp, #28]
 80068ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80068b0:	ee08 0a10 	vmov	s16, r0
 80068b4:	4b9f      	ldr	r3, [pc, #636]	; (8006b34 <_printf_float+0x2dc>)
 80068b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068ba:	f04f 32ff 	mov.w	r2, #4294967295
 80068be:	f7fa f955 	bl	8000b6c <__aeabi_dcmpun>
 80068c2:	bb88      	cbnz	r0, 8006928 <_printf_float+0xd0>
 80068c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068c8:	4b9a      	ldr	r3, [pc, #616]	; (8006b34 <_printf_float+0x2dc>)
 80068ca:	f04f 32ff 	mov.w	r2, #4294967295
 80068ce:	f7fa f92f 	bl	8000b30 <__aeabi_dcmple>
 80068d2:	bb48      	cbnz	r0, 8006928 <_printf_float+0xd0>
 80068d4:	2200      	movs	r2, #0
 80068d6:	2300      	movs	r3, #0
 80068d8:	4640      	mov	r0, r8
 80068da:	4649      	mov	r1, r9
 80068dc:	f7fa f91e 	bl	8000b1c <__aeabi_dcmplt>
 80068e0:	b110      	cbz	r0, 80068e8 <_printf_float+0x90>
 80068e2:	232d      	movs	r3, #45	; 0x2d
 80068e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068e8:	4b93      	ldr	r3, [pc, #588]	; (8006b38 <_printf_float+0x2e0>)
 80068ea:	4894      	ldr	r0, [pc, #592]	; (8006b3c <_printf_float+0x2e4>)
 80068ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80068f0:	bf94      	ite	ls
 80068f2:	4698      	movls	r8, r3
 80068f4:	4680      	movhi	r8, r0
 80068f6:	2303      	movs	r3, #3
 80068f8:	6123      	str	r3, [r4, #16]
 80068fa:	9b05      	ldr	r3, [sp, #20]
 80068fc:	f023 0204 	bic.w	r2, r3, #4
 8006900:	6022      	str	r2, [r4, #0]
 8006902:	f04f 0900 	mov.w	r9, #0
 8006906:	9700      	str	r7, [sp, #0]
 8006908:	4633      	mov	r3, r6
 800690a:	aa0b      	add	r2, sp, #44	; 0x2c
 800690c:	4621      	mov	r1, r4
 800690e:	4628      	mov	r0, r5
 8006910:	f000 f9d8 	bl	8006cc4 <_printf_common>
 8006914:	3001      	adds	r0, #1
 8006916:	f040 8090 	bne.w	8006a3a <_printf_float+0x1e2>
 800691a:	f04f 30ff 	mov.w	r0, #4294967295
 800691e:	b00d      	add	sp, #52	; 0x34
 8006920:	ecbd 8b02 	vpop	{d8}
 8006924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006928:	4642      	mov	r2, r8
 800692a:	464b      	mov	r3, r9
 800692c:	4640      	mov	r0, r8
 800692e:	4649      	mov	r1, r9
 8006930:	f7fa f91c 	bl	8000b6c <__aeabi_dcmpun>
 8006934:	b140      	cbz	r0, 8006948 <_printf_float+0xf0>
 8006936:	464b      	mov	r3, r9
 8006938:	2b00      	cmp	r3, #0
 800693a:	bfbc      	itt	lt
 800693c:	232d      	movlt	r3, #45	; 0x2d
 800693e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006942:	487f      	ldr	r0, [pc, #508]	; (8006b40 <_printf_float+0x2e8>)
 8006944:	4b7f      	ldr	r3, [pc, #508]	; (8006b44 <_printf_float+0x2ec>)
 8006946:	e7d1      	b.n	80068ec <_printf_float+0x94>
 8006948:	6863      	ldr	r3, [r4, #4]
 800694a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800694e:	9206      	str	r2, [sp, #24]
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	d13f      	bne.n	80069d4 <_printf_float+0x17c>
 8006954:	2306      	movs	r3, #6
 8006956:	6063      	str	r3, [r4, #4]
 8006958:	9b05      	ldr	r3, [sp, #20]
 800695a:	6861      	ldr	r1, [r4, #4]
 800695c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006960:	2300      	movs	r3, #0
 8006962:	9303      	str	r3, [sp, #12]
 8006964:	ab0a      	add	r3, sp, #40	; 0x28
 8006966:	e9cd b301 	strd	fp, r3, [sp, #4]
 800696a:	ab09      	add	r3, sp, #36	; 0x24
 800696c:	ec49 8b10 	vmov	d0, r8, r9
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	6022      	str	r2, [r4, #0]
 8006974:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006978:	4628      	mov	r0, r5
 800697a:	f7ff fecd 	bl	8006718 <__cvt>
 800697e:	9b06      	ldr	r3, [sp, #24]
 8006980:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006982:	2b47      	cmp	r3, #71	; 0x47
 8006984:	4680      	mov	r8, r0
 8006986:	d108      	bne.n	800699a <_printf_float+0x142>
 8006988:	1cc8      	adds	r0, r1, #3
 800698a:	db02      	blt.n	8006992 <_printf_float+0x13a>
 800698c:	6863      	ldr	r3, [r4, #4]
 800698e:	4299      	cmp	r1, r3
 8006990:	dd41      	ble.n	8006a16 <_printf_float+0x1be>
 8006992:	f1ab 0b02 	sub.w	fp, fp, #2
 8006996:	fa5f fb8b 	uxtb.w	fp, fp
 800699a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800699e:	d820      	bhi.n	80069e2 <_printf_float+0x18a>
 80069a0:	3901      	subs	r1, #1
 80069a2:	465a      	mov	r2, fp
 80069a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069a8:	9109      	str	r1, [sp, #36]	; 0x24
 80069aa:	f7ff ff17 	bl	80067dc <__exponent>
 80069ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069b0:	1813      	adds	r3, r2, r0
 80069b2:	2a01      	cmp	r2, #1
 80069b4:	4681      	mov	r9, r0
 80069b6:	6123      	str	r3, [r4, #16]
 80069b8:	dc02      	bgt.n	80069c0 <_printf_float+0x168>
 80069ba:	6822      	ldr	r2, [r4, #0]
 80069bc:	07d2      	lsls	r2, r2, #31
 80069be:	d501      	bpl.n	80069c4 <_printf_float+0x16c>
 80069c0:	3301      	adds	r3, #1
 80069c2:	6123      	str	r3, [r4, #16]
 80069c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d09c      	beq.n	8006906 <_printf_float+0xae>
 80069cc:	232d      	movs	r3, #45	; 0x2d
 80069ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d2:	e798      	b.n	8006906 <_printf_float+0xae>
 80069d4:	9a06      	ldr	r2, [sp, #24]
 80069d6:	2a47      	cmp	r2, #71	; 0x47
 80069d8:	d1be      	bne.n	8006958 <_printf_float+0x100>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1bc      	bne.n	8006958 <_printf_float+0x100>
 80069de:	2301      	movs	r3, #1
 80069e0:	e7b9      	b.n	8006956 <_printf_float+0xfe>
 80069e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80069e6:	d118      	bne.n	8006a1a <_printf_float+0x1c2>
 80069e8:	2900      	cmp	r1, #0
 80069ea:	6863      	ldr	r3, [r4, #4]
 80069ec:	dd0b      	ble.n	8006a06 <_printf_float+0x1ae>
 80069ee:	6121      	str	r1, [r4, #16]
 80069f0:	b913      	cbnz	r3, 80069f8 <_printf_float+0x1a0>
 80069f2:	6822      	ldr	r2, [r4, #0]
 80069f4:	07d0      	lsls	r0, r2, #31
 80069f6:	d502      	bpl.n	80069fe <_printf_float+0x1a6>
 80069f8:	3301      	adds	r3, #1
 80069fa:	440b      	add	r3, r1
 80069fc:	6123      	str	r3, [r4, #16]
 80069fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a00:	f04f 0900 	mov.w	r9, #0
 8006a04:	e7de      	b.n	80069c4 <_printf_float+0x16c>
 8006a06:	b913      	cbnz	r3, 8006a0e <_printf_float+0x1b6>
 8006a08:	6822      	ldr	r2, [r4, #0]
 8006a0a:	07d2      	lsls	r2, r2, #31
 8006a0c:	d501      	bpl.n	8006a12 <_printf_float+0x1ba>
 8006a0e:	3302      	adds	r3, #2
 8006a10:	e7f4      	b.n	80069fc <_printf_float+0x1a4>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e7f2      	b.n	80069fc <_printf_float+0x1a4>
 8006a16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a1c:	4299      	cmp	r1, r3
 8006a1e:	db05      	blt.n	8006a2c <_printf_float+0x1d4>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	6121      	str	r1, [r4, #16]
 8006a24:	07d8      	lsls	r0, r3, #31
 8006a26:	d5ea      	bpl.n	80069fe <_printf_float+0x1a6>
 8006a28:	1c4b      	adds	r3, r1, #1
 8006a2a:	e7e7      	b.n	80069fc <_printf_float+0x1a4>
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	bfd4      	ite	le
 8006a30:	f1c1 0202 	rsble	r2, r1, #2
 8006a34:	2201      	movgt	r2, #1
 8006a36:	4413      	add	r3, r2
 8006a38:	e7e0      	b.n	80069fc <_printf_float+0x1a4>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	055a      	lsls	r2, r3, #21
 8006a3e:	d407      	bmi.n	8006a50 <_printf_float+0x1f8>
 8006a40:	6923      	ldr	r3, [r4, #16]
 8006a42:	4642      	mov	r2, r8
 8006a44:	4631      	mov	r1, r6
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b8      	blx	r7
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	d12c      	bne.n	8006aa8 <_printf_float+0x250>
 8006a4e:	e764      	b.n	800691a <_printf_float+0xc2>
 8006a50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a54:	f240 80e0 	bls.w	8006c18 <_printf_float+0x3c0>
 8006a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f7fa f852 	bl	8000b08 <__aeabi_dcmpeq>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d034      	beq.n	8006ad2 <_printf_float+0x27a>
 8006a68:	4a37      	ldr	r2, [pc, #220]	; (8006b48 <_printf_float+0x2f0>)
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	4628      	mov	r0, r5
 8006a70:	47b8      	blx	r7
 8006a72:	3001      	adds	r0, #1
 8006a74:	f43f af51 	beq.w	800691a <_printf_float+0xc2>
 8006a78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	db02      	blt.n	8006a86 <_printf_float+0x22e>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	07d8      	lsls	r0, r3, #31
 8006a84:	d510      	bpl.n	8006aa8 <_printf_float+0x250>
 8006a86:	ee18 3a10 	vmov	r3, s16
 8006a8a:	4652      	mov	r2, sl
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b8      	blx	r7
 8006a92:	3001      	adds	r0, #1
 8006a94:	f43f af41 	beq.w	800691a <_printf_float+0xc2>
 8006a98:	f04f 0800 	mov.w	r8, #0
 8006a9c:	f104 091a 	add.w	r9, r4, #26
 8006aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	4543      	cmp	r3, r8
 8006aa6:	dc09      	bgt.n	8006abc <_printf_float+0x264>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	079b      	lsls	r3, r3, #30
 8006aac:	f100 8105 	bmi.w	8006cba <_printf_float+0x462>
 8006ab0:	68e0      	ldr	r0, [r4, #12]
 8006ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ab4:	4298      	cmp	r0, r3
 8006ab6:	bfb8      	it	lt
 8006ab8:	4618      	movlt	r0, r3
 8006aba:	e730      	b.n	800691e <_printf_float+0xc6>
 8006abc:	2301      	movs	r3, #1
 8006abe:	464a      	mov	r2, r9
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	47b8      	blx	r7
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	f43f af27 	beq.w	800691a <_printf_float+0xc2>
 8006acc:	f108 0801 	add.w	r8, r8, #1
 8006ad0:	e7e6      	b.n	8006aa0 <_printf_float+0x248>
 8006ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	dc39      	bgt.n	8006b4c <_printf_float+0x2f4>
 8006ad8:	4a1b      	ldr	r2, [pc, #108]	; (8006b48 <_printf_float+0x2f0>)
 8006ada:	2301      	movs	r3, #1
 8006adc:	4631      	mov	r1, r6
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b8      	blx	r7
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	f43f af19 	beq.w	800691a <_printf_float+0xc2>
 8006ae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006aec:	4313      	orrs	r3, r2
 8006aee:	d102      	bne.n	8006af6 <_printf_float+0x29e>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	07d9      	lsls	r1, r3, #31
 8006af4:	d5d8      	bpl.n	8006aa8 <_printf_float+0x250>
 8006af6:	ee18 3a10 	vmov	r3, s16
 8006afa:	4652      	mov	r2, sl
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	47b8      	blx	r7
 8006b02:	3001      	adds	r0, #1
 8006b04:	f43f af09 	beq.w	800691a <_printf_float+0xc2>
 8006b08:	f04f 0900 	mov.w	r9, #0
 8006b0c:	f104 0a1a 	add.w	sl, r4, #26
 8006b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b12:	425b      	negs	r3, r3
 8006b14:	454b      	cmp	r3, r9
 8006b16:	dc01      	bgt.n	8006b1c <_printf_float+0x2c4>
 8006b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b1a:	e792      	b.n	8006a42 <_printf_float+0x1ea>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	4652      	mov	r2, sl
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	f43f aef7 	beq.w	800691a <_printf_float+0xc2>
 8006b2c:	f109 0901 	add.w	r9, r9, #1
 8006b30:	e7ee      	b.n	8006b10 <_printf_float+0x2b8>
 8006b32:	bf00      	nop
 8006b34:	7fefffff 	.word	0x7fefffff
 8006b38:	08009504 	.word	0x08009504
 8006b3c:	08009508 	.word	0x08009508
 8006b40:	08009510 	.word	0x08009510
 8006b44:	0800950c 	.word	0x0800950c
 8006b48:	08009514 	.word	0x08009514
 8006b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b50:	429a      	cmp	r2, r3
 8006b52:	bfa8      	it	ge
 8006b54:	461a      	movge	r2, r3
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	4691      	mov	r9, r2
 8006b5a:	dc37      	bgt.n	8006bcc <_printf_float+0x374>
 8006b5c:	f04f 0b00 	mov.w	fp, #0
 8006b60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b64:	f104 021a 	add.w	r2, r4, #26
 8006b68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b6a:	9305      	str	r3, [sp, #20]
 8006b6c:	eba3 0309 	sub.w	r3, r3, r9
 8006b70:	455b      	cmp	r3, fp
 8006b72:	dc33      	bgt.n	8006bdc <_printf_float+0x384>
 8006b74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	db3b      	blt.n	8006bf4 <_printf_float+0x39c>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	07da      	lsls	r2, r3, #31
 8006b80:	d438      	bmi.n	8006bf4 <_printf_float+0x39c>
 8006b82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b84:	9b05      	ldr	r3, [sp, #20]
 8006b86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	eba2 0901 	sub.w	r9, r2, r1
 8006b8e:	4599      	cmp	r9, r3
 8006b90:	bfa8      	it	ge
 8006b92:	4699      	movge	r9, r3
 8006b94:	f1b9 0f00 	cmp.w	r9, #0
 8006b98:	dc35      	bgt.n	8006c06 <_printf_float+0x3ae>
 8006b9a:	f04f 0800 	mov.w	r8, #0
 8006b9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ba2:	f104 0a1a 	add.w	sl, r4, #26
 8006ba6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006baa:	1a9b      	subs	r3, r3, r2
 8006bac:	eba3 0309 	sub.w	r3, r3, r9
 8006bb0:	4543      	cmp	r3, r8
 8006bb2:	f77f af79 	ble.w	8006aa8 <_printf_float+0x250>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4652      	mov	r2, sl
 8006bba:	4631      	mov	r1, r6
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	47b8      	blx	r7
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	f43f aeaa 	beq.w	800691a <_printf_float+0xc2>
 8006bc6:	f108 0801 	add.w	r8, r8, #1
 8006bca:	e7ec      	b.n	8006ba6 <_printf_float+0x34e>
 8006bcc:	4613      	mov	r3, r2
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	47b8      	blx	r7
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	d1c0      	bne.n	8006b5c <_printf_float+0x304>
 8006bda:	e69e      	b.n	800691a <_printf_float+0xc2>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	9205      	str	r2, [sp, #20]
 8006be4:	47b8      	blx	r7
 8006be6:	3001      	adds	r0, #1
 8006be8:	f43f ae97 	beq.w	800691a <_printf_float+0xc2>
 8006bec:	9a05      	ldr	r2, [sp, #20]
 8006bee:	f10b 0b01 	add.w	fp, fp, #1
 8006bf2:	e7b9      	b.n	8006b68 <_printf_float+0x310>
 8006bf4:	ee18 3a10 	vmov	r3, s16
 8006bf8:	4652      	mov	r2, sl
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	47b8      	blx	r7
 8006c00:	3001      	adds	r0, #1
 8006c02:	d1be      	bne.n	8006b82 <_printf_float+0x32a>
 8006c04:	e689      	b.n	800691a <_printf_float+0xc2>
 8006c06:	9a05      	ldr	r2, [sp, #20]
 8006c08:	464b      	mov	r3, r9
 8006c0a:	4442      	add	r2, r8
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	4628      	mov	r0, r5
 8006c10:	47b8      	blx	r7
 8006c12:	3001      	adds	r0, #1
 8006c14:	d1c1      	bne.n	8006b9a <_printf_float+0x342>
 8006c16:	e680      	b.n	800691a <_printf_float+0xc2>
 8006c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c1a:	2a01      	cmp	r2, #1
 8006c1c:	dc01      	bgt.n	8006c22 <_printf_float+0x3ca>
 8006c1e:	07db      	lsls	r3, r3, #31
 8006c20:	d538      	bpl.n	8006c94 <_printf_float+0x43c>
 8006c22:	2301      	movs	r3, #1
 8006c24:	4642      	mov	r2, r8
 8006c26:	4631      	mov	r1, r6
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b8      	blx	r7
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	f43f ae74 	beq.w	800691a <_printf_float+0xc2>
 8006c32:	ee18 3a10 	vmov	r3, s16
 8006c36:	4652      	mov	r2, sl
 8006c38:	4631      	mov	r1, r6
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	47b8      	blx	r7
 8006c3e:	3001      	adds	r0, #1
 8006c40:	f43f ae6b 	beq.w	800691a <_printf_float+0xc2>
 8006c44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f7f9 ff5c 	bl	8000b08 <__aeabi_dcmpeq>
 8006c50:	b9d8      	cbnz	r0, 8006c8a <_printf_float+0x432>
 8006c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c54:	f108 0201 	add.w	r2, r8, #1
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b8      	blx	r7
 8006c60:	3001      	adds	r0, #1
 8006c62:	d10e      	bne.n	8006c82 <_printf_float+0x42a>
 8006c64:	e659      	b.n	800691a <_printf_float+0xc2>
 8006c66:	2301      	movs	r3, #1
 8006c68:	4652      	mov	r2, sl
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	47b8      	blx	r7
 8006c70:	3001      	adds	r0, #1
 8006c72:	f43f ae52 	beq.w	800691a <_printf_float+0xc2>
 8006c76:	f108 0801 	add.w	r8, r8, #1
 8006c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	4543      	cmp	r3, r8
 8006c80:	dcf1      	bgt.n	8006c66 <_printf_float+0x40e>
 8006c82:	464b      	mov	r3, r9
 8006c84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c88:	e6dc      	b.n	8006a44 <_printf_float+0x1ec>
 8006c8a:	f04f 0800 	mov.w	r8, #0
 8006c8e:	f104 0a1a 	add.w	sl, r4, #26
 8006c92:	e7f2      	b.n	8006c7a <_printf_float+0x422>
 8006c94:	2301      	movs	r3, #1
 8006c96:	4642      	mov	r2, r8
 8006c98:	e7df      	b.n	8006c5a <_printf_float+0x402>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	464a      	mov	r2, r9
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b8      	blx	r7
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	f43f ae38 	beq.w	800691a <_printf_float+0xc2>
 8006caa:	f108 0801 	add.w	r8, r8, #1
 8006cae:	68e3      	ldr	r3, [r4, #12]
 8006cb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cb2:	1a5b      	subs	r3, r3, r1
 8006cb4:	4543      	cmp	r3, r8
 8006cb6:	dcf0      	bgt.n	8006c9a <_printf_float+0x442>
 8006cb8:	e6fa      	b.n	8006ab0 <_printf_float+0x258>
 8006cba:	f04f 0800 	mov.w	r8, #0
 8006cbe:	f104 0919 	add.w	r9, r4, #25
 8006cc2:	e7f4      	b.n	8006cae <_printf_float+0x456>

08006cc4 <_printf_common>:
 8006cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc8:	4616      	mov	r6, r2
 8006cca:	4699      	mov	r9, r3
 8006ccc:	688a      	ldr	r2, [r1, #8]
 8006cce:	690b      	ldr	r3, [r1, #16]
 8006cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	bfb8      	it	lt
 8006cd8:	4613      	movlt	r3, r2
 8006cda:	6033      	str	r3, [r6, #0]
 8006cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	b10a      	cbz	r2, 8006cea <_printf_common+0x26>
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	6033      	str	r3, [r6, #0]
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	0699      	lsls	r1, r3, #26
 8006cee:	bf42      	ittt	mi
 8006cf0:	6833      	ldrmi	r3, [r6, #0]
 8006cf2:	3302      	addmi	r3, #2
 8006cf4:	6033      	strmi	r3, [r6, #0]
 8006cf6:	6825      	ldr	r5, [r4, #0]
 8006cf8:	f015 0506 	ands.w	r5, r5, #6
 8006cfc:	d106      	bne.n	8006d0c <_printf_common+0x48>
 8006cfe:	f104 0a19 	add.w	sl, r4, #25
 8006d02:	68e3      	ldr	r3, [r4, #12]
 8006d04:	6832      	ldr	r2, [r6, #0]
 8006d06:	1a9b      	subs	r3, r3, r2
 8006d08:	42ab      	cmp	r3, r5
 8006d0a:	dc26      	bgt.n	8006d5a <_printf_common+0x96>
 8006d0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d10:	1e13      	subs	r3, r2, #0
 8006d12:	6822      	ldr	r2, [r4, #0]
 8006d14:	bf18      	it	ne
 8006d16:	2301      	movne	r3, #1
 8006d18:	0692      	lsls	r2, r2, #26
 8006d1a:	d42b      	bmi.n	8006d74 <_printf_common+0xb0>
 8006d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d20:	4649      	mov	r1, r9
 8006d22:	4638      	mov	r0, r7
 8006d24:	47c0      	blx	r8
 8006d26:	3001      	adds	r0, #1
 8006d28:	d01e      	beq.n	8006d68 <_printf_common+0xa4>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	68e5      	ldr	r5, [r4, #12]
 8006d2e:	6832      	ldr	r2, [r6, #0]
 8006d30:	f003 0306 	and.w	r3, r3, #6
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	bf08      	it	eq
 8006d38:	1aad      	subeq	r5, r5, r2
 8006d3a:	68a3      	ldr	r3, [r4, #8]
 8006d3c:	6922      	ldr	r2, [r4, #16]
 8006d3e:	bf0c      	ite	eq
 8006d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d44:	2500      	movne	r5, #0
 8006d46:	4293      	cmp	r3, r2
 8006d48:	bfc4      	itt	gt
 8006d4a:	1a9b      	subgt	r3, r3, r2
 8006d4c:	18ed      	addgt	r5, r5, r3
 8006d4e:	2600      	movs	r6, #0
 8006d50:	341a      	adds	r4, #26
 8006d52:	42b5      	cmp	r5, r6
 8006d54:	d11a      	bne.n	8006d8c <_printf_common+0xc8>
 8006d56:	2000      	movs	r0, #0
 8006d58:	e008      	b.n	8006d6c <_printf_common+0xa8>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4652      	mov	r2, sl
 8006d5e:	4649      	mov	r1, r9
 8006d60:	4638      	mov	r0, r7
 8006d62:	47c0      	blx	r8
 8006d64:	3001      	adds	r0, #1
 8006d66:	d103      	bne.n	8006d70 <_printf_common+0xac>
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d70:	3501      	adds	r5, #1
 8006d72:	e7c6      	b.n	8006d02 <_printf_common+0x3e>
 8006d74:	18e1      	adds	r1, r4, r3
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	2030      	movs	r0, #48	; 0x30
 8006d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d7e:	4422      	add	r2, r4
 8006d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d88:	3302      	adds	r3, #2
 8006d8a:	e7c7      	b.n	8006d1c <_printf_common+0x58>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4622      	mov	r2, r4
 8006d90:	4649      	mov	r1, r9
 8006d92:	4638      	mov	r0, r7
 8006d94:	47c0      	blx	r8
 8006d96:	3001      	adds	r0, #1
 8006d98:	d0e6      	beq.n	8006d68 <_printf_common+0xa4>
 8006d9a:	3601      	adds	r6, #1
 8006d9c:	e7d9      	b.n	8006d52 <_printf_common+0x8e>
	...

08006da0 <_printf_i>:
 8006da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da4:	460c      	mov	r4, r1
 8006da6:	4691      	mov	r9, r2
 8006da8:	7e27      	ldrb	r7, [r4, #24]
 8006daa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006dac:	2f78      	cmp	r7, #120	; 0x78
 8006dae:	4680      	mov	r8, r0
 8006db0:	469a      	mov	sl, r3
 8006db2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006db6:	d807      	bhi.n	8006dc8 <_printf_i+0x28>
 8006db8:	2f62      	cmp	r7, #98	; 0x62
 8006dba:	d80a      	bhi.n	8006dd2 <_printf_i+0x32>
 8006dbc:	2f00      	cmp	r7, #0
 8006dbe:	f000 80d8 	beq.w	8006f72 <_printf_i+0x1d2>
 8006dc2:	2f58      	cmp	r7, #88	; 0x58
 8006dc4:	f000 80a3 	beq.w	8006f0e <_printf_i+0x16e>
 8006dc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dd0:	e03a      	b.n	8006e48 <_printf_i+0xa8>
 8006dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dd6:	2b15      	cmp	r3, #21
 8006dd8:	d8f6      	bhi.n	8006dc8 <_printf_i+0x28>
 8006dda:	a001      	add	r0, pc, #4	; (adr r0, 8006de0 <_printf_i+0x40>)
 8006ddc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006de0:	08006e39 	.word	0x08006e39
 8006de4:	08006e4d 	.word	0x08006e4d
 8006de8:	08006dc9 	.word	0x08006dc9
 8006dec:	08006dc9 	.word	0x08006dc9
 8006df0:	08006dc9 	.word	0x08006dc9
 8006df4:	08006dc9 	.word	0x08006dc9
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006dc9 	.word	0x08006dc9
 8006e00:	08006dc9 	.word	0x08006dc9
 8006e04:	08006dc9 	.word	0x08006dc9
 8006e08:	08006dc9 	.word	0x08006dc9
 8006e0c:	08006f59 	.word	0x08006f59
 8006e10:	08006e7d 	.word	0x08006e7d
 8006e14:	08006f3b 	.word	0x08006f3b
 8006e18:	08006dc9 	.word	0x08006dc9
 8006e1c:	08006dc9 	.word	0x08006dc9
 8006e20:	08006f7b 	.word	0x08006f7b
 8006e24:	08006dc9 	.word	0x08006dc9
 8006e28:	08006e7d 	.word	0x08006e7d
 8006e2c:	08006dc9 	.word	0x08006dc9
 8006e30:	08006dc9 	.word	0x08006dc9
 8006e34:	08006f43 	.word	0x08006f43
 8006e38:	680b      	ldr	r3, [r1, #0]
 8006e3a:	1d1a      	adds	r2, r3, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	600a      	str	r2, [r1, #0]
 8006e40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e0a3      	b.n	8006f94 <_printf_i+0x1f4>
 8006e4c:	6825      	ldr	r5, [r4, #0]
 8006e4e:	6808      	ldr	r0, [r1, #0]
 8006e50:	062e      	lsls	r6, r5, #24
 8006e52:	f100 0304 	add.w	r3, r0, #4
 8006e56:	d50a      	bpl.n	8006e6e <_printf_i+0xce>
 8006e58:	6805      	ldr	r5, [r0, #0]
 8006e5a:	600b      	str	r3, [r1, #0]
 8006e5c:	2d00      	cmp	r5, #0
 8006e5e:	da03      	bge.n	8006e68 <_printf_i+0xc8>
 8006e60:	232d      	movs	r3, #45	; 0x2d
 8006e62:	426d      	negs	r5, r5
 8006e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e68:	485e      	ldr	r0, [pc, #376]	; (8006fe4 <_printf_i+0x244>)
 8006e6a:	230a      	movs	r3, #10
 8006e6c:	e019      	b.n	8006ea2 <_printf_i+0x102>
 8006e6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e72:	6805      	ldr	r5, [r0, #0]
 8006e74:	600b      	str	r3, [r1, #0]
 8006e76:	bf18      	it	ne
 8006e78:	b22d      	sxthne	r5, r5
 8006e7a:	e7ef      	b.n	8006e5c <_printf_i+0xbc>
 8006e7c:	680b      	ldr	r3, [r1, #0]
 8006e7e:	6825      	ldr	r5, [r4, #0]
 8006e80:	1d18      	adds	r0, r3, #4
 8006e82:	6008      	str	r0, [r1, #0]
 8006e84:	0628      	lsls	r0, r5, #24
 8006e86:	d501      	bpl.n	8006e8c <_printf_i+0xec>
 8006e88:	681d      	ldr	r5, [r3, #0]
 8006e8a:	e002      	b.n	8006e92 <_printf_i+0xf2>
 8006e8c:	0669      	lsls	r1, r5, #25
 8006e8e:	d5fb      	bpl.n	8006e88 <_printf_i+0xe8>
 8006e90:	881d      	ldrh	r5, [r3, #0]
 8006e92:	4854      	ldr	r0, [pc, #336]	; (8006fe4 <_printf_i+0x244>)
 8006e94:	2f6f      	cmp	r7, #111	; 0x6f
 8006e96:	bf0c      	ite	eq
 8006e98:	2308      	moveq	r3, #8
 8006e9a:	230a      	movne	r3, #10
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ea2:	6866      	ldr	r6, [r4, #4]
 8006ea4:	60a6      	str	r6, [r4, #8]
 8006ea6:	2e00      	cmp	r6, #0
 8006ea8:	bfa2      	ittt	ge
 8006eaa:	6821      	ldrge	r1, [r4, #0]
 8006eac:	f021 0104 	bicge.w	r1, r1, #4
 8006eb0:	6021      	strge	r1, [r4, #0]
 8006eb2:	b90d      	cbnz	r5, 8006eb8 <_printf_i+0x118>
 8006eb4:	2e00      	cmp	r6, #0
 8006eb6:	d04d      	beq.n	8006f54 <_printf_i+0x1b4>
 8006eb8:	4616      	mov	r6, r2
 8006eba:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ebe:	fb03 5711 	mls	r7, r3, r1, r5
 8006ec2:	5dc7      	ldrb	r7, [r0, r7]
 8006ec4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ec8:	462f      	mov	r7, r5
 8006eca:	42bb      	cmp	r3, r7
 8006ecc:	460d      	mov	r5, r1
 8006ece:	d9f4      	bls.n	8006eba <_printf_i+0x11a>
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d10b      	bne.n	8006eec <_printf_i+0x14c>
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	07df      	lsls	r7, r3, #31
 8006ed8:	d508      	bpl.n	8006eec <_printf_i+0x14c>
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	6861      	ldr	r1, [r4, #4]
 8006ede:	4299      	cmp	r1, r3
 8006ee0:	bfde      	ittt	le
 8006ee2:	2330      	movle	r3, #48	; 0x30
 8006ee4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ee8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006eec:	1b92      	subs	r2, r2, r6
 8006eee:	6122      	str	r2, [r4, #16]
 8006ef0:	f8cd a000 	str.w	sl, [sp]
 8006ef4:	464b      	mov	r3, r9
 8006ef6:	aa03      	add	r2, sp, #12
 8006ef8:	4621      	mov	r1, r4
 8006efa:	4640      	mov	r0, r8
 8006efc:	f7ff fee2 	bl	8006cc4 <_printf_common>
 8006f00:	3001      	adds	r0, #1
 8006f02:	d14c      	bne.n	8006f9e <_printf_i+0x1fe>
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	b004      	add	sp, #16
 8006f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f0e:	4835      	ldr	r0, [pc, #212]	; (8006fe4 <_printf_i+0x244>)
 8006f10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	680e      	ldr	r6, [r1, #0]
 8006f18:	061f      	lsls	r7, r3, #24
 8006f1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f1e:	600e      	str	r6, [r1, #0]
 8006f20:	d514      	bpl.n	8006f4c <_printf_i+0x1ac>
 8006f22:	07d9      	lsls	r1, r3, #31
 8006f24:	bf44      	itt	mi
 8006f26:	f043 0320 	orrmi.w	r3, r3, #32
 8006f2a:	6023      	strmi	r3, [r4, #0]
 8006f2c:	b91d      	cbnz	r5, 8006f36 <_printf_i+0x196>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	f023 0320 	bic.w	r3, r3, #32
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	2310      	movs	r3, #16
 8006f38:	e7b0      	b.n	8006e9c <_printf_i+0xfc>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	f043 0320 	orr.w	r3, r3, #32
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	2378      	movs	r3, #120	; 0x78
 8006f44:	4828      	ldr	r0, [pc, #160]	; (8006fe8 <_printf_i+0x248>)
 8006f46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f4a:	e7e3      	b.n	8006f14 <_printf_i+0x174>
 8006f4c:	065e      	lsls	r6, r3, #25
 8006f4e:	bf48      	it	mi
 8006f50:	b2ad      	uxthmi	r5, r5
 8006f52:	e7e6      	b.n	8006f22 <_printf_i+0x182>
 8006f54:	4616      	mov	r6, r2
 8006f56:	e7bb      	b.n	8006ed0 <_printf_i+0x130>
 8006f58:	680b      	ldr	r3, [r1, #0]
 8006f5a:	6826      	ldr	r6, [r4, #0]
 8006f5c:	6960      	ldr	r0, [r4, #20]
 8006f5e:	1d1d      	adds	r5, r3, #4
 8006f60:	600d      	str	r5, [r1, #0]
 8006f62:	0635      	lsls	r5, r6, #24
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	d501      	bpl.n	8006f6c <_printf_i+0x1cc>
 8006f68:	6018      	str	r0, [r3, #0]
 8006f6a:	e002      	b.n	8006f72 <_printf_i+0x1d2>
 8006f6c:	0671      	lsls	r1, r6, #25
 8006f6e:	d5fb      	bpl.n	8006f68 <_printf_i+0x1c8>
 8006f70:	8018      	strh	r0, [r3, #0]
 8006f72:	2300      	movs	r3, #0
 8006f74:	6123      	str	r3, [r4, #16]
 8006f76:	4616      	mov	r6, r2
 8006f78:	e7ba      	b.n	8006ef0 <_printf_i+0x150>
 8006f7a:	680b      	ldr	r3, [r1, #0]
 8006f7c:	1d1a      	adds	r2, r3, #4
 8006f7e:	600a      	str	r2, [r1, #0]
 8006f80:	681e      	ldr	r6, [r3, #0]
 8006f82:	6862      	ldr	r2, [r4, #4]
 8006f84:	2100      	movs	r1, #0
 8006f86:	4630      	mov	r0, r6
 8006f88:	f7f9 f94a 	bl	8000220 <memchr>
 8006f8c:	b108      	cbz	r0, 8006f92 <_printf_i+0x1f2>
 8006f8e:	1b80      	subs	r0, r0, r6
 8006f90:	6060      	str	r0, [r4, #4]
 8006f92:	6863      	ldr	r3, [r4, #4]
 8006f94:	6123      	str	r3, [r4, #16]
 8006f96:	2300      	movs	r3, #0
 8006f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f9c:	e7a8      	b.n	8006ef0 <_printf_i+0x150>
 8006f9e:	6923      	ldr	r3, [r4, #16]
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	47d0      	blx	sl
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d0ab      	beq.n	8006f04 <_printf_i+0x164>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	079b      	lsls	r3, r3, #30
 8006fb0:	d413      	bmi.n	8006fda <_printf_i+0x23a>
 8006fb2:	68e0      	ldr	r0, [r4, #12]
 8006fb4:	9b03      	ldr	r3, [sp, #12]
 8006fb6:	4298      	cmp	r0, r3
 8006fb8:	bfb8      	it	lt
 8006fba:	4618      	movlt	r0, r3
 8006fbc:	e7a4      	b.n	8006f08 <_printf_i+0x168>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4632      	mov	r2, r6
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	47d0      	blx	sl
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d09b      	beq.n	8006f04 <_printf_i+0x164>
 8006fcc:	3501      	adds	r5, #1
 8006fce:	68e3      	ldr	r3, [r4, #12]
 8006fd0:	9903      	ldr	r1, [sp, #12]
 8006fd2:	1a5b      	subs	r3, r3, r1
 8006fd4:	42ab      	cmp	r3, r5
 8006fd6:	dcf2      	bgt.n	8006fbe <_printf_i+0x21e>
 8006fd8:	e7eb      	b.n	8006fb2 <_printf_i+0x212>
 8006fda:	2500      	movs	r5, #0
 8006fdc:	f104 0619 	add.w	r6, r4, #25
 8006fe0:	e7f5      	b.n	8006fce <_printf_i+0x22e>
 8006fe2:	bf00      	nop
 8006fe4:	08009516 	.word	0x08009516
 8006fe8:	08009527 	.word	0x08009527

08006fec <iprintf>:
 8006fec:	b40f      	push	{r0, r1, r2, r3}
 8006fee:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <iprintf+0x2c>)
 8006ff0:	b513      	push	{r0, r1, r4, lr}
 8006ff2:	681c      	ldr	r4, [r3, #0]
 8006ff4:	b124      	cbz	r4, 8007000 <iprintf+0x14>
 8006ff6:	69a3      	ldr	r3, [r4, #24]
 8006ff8:	b913      	cbnz	r3, 8007000 <iprintf+0x14>
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f001 f99e 	bl	800833c <__sinit>
 8007000:	ab05      	add	r3, sp, #20
 8007002:	9a04      	ldr	r2, [sp, #16]
 8007004:	68a1      	ldr	r1, [r4, #8]
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	4620      	mov	r0, r4
 800700a:	f001 ff19 	bl	8008e40 <_vfiprintf_r>
 800700e:	b002      	add	sp, #8
 8007010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007014:	b004      	add	sp, #16
 8007016:	4770      	bx	lr
 8007018:	2000000c 	.word	0x2000000c

0800701c <_puts_r>:
 800701c:	b570      	push	{r4, r5, r6, lr}
 800701e:	460e      	mov	r6, r1
 8007020:	4605      	mov	r5, r0
 8007022:	b118      	cbz	r0, 800702c <_puts_r+0x10>
 8007024:	6983      	ldr	r3, [r0, #24]
 8007026:	b90b      	cbnz	r3, 800702c <_puts_r+0x10>
 8007028:	f001 f988 	bl	800833c <__sinit>
 800702c:	69ab      	ldr	r3, [r5, #24]
 800702e:	68ac      	ldr	r4, [r5, #8]
 8007030:	b913      	cbnz	r3, 8007038 <_puts_r+0x1c>
 8007032:	4628      	mov	r0, r5
 8007034:	f001 f982 	bl	800833c <__sinit>
 8007038:	4b2c      	ldr	r3, [pc, #176]	; (80070ec <_puts_r+0xd0>)
 800703a:	429c      	cmp	r4, r3
 800703c:	d120      	bne.n	8007080 <_puts_r+0x64>
 800703e:	686c      	ldr	r4, [r5, #4]
 8007040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007042:	07db      	lsls	r3, r3, #31
 8007044:	d405      	bmi.n	8007052 <_puts_r+0x36>
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	0598      	lsls	r0, r3, #22
 800704a:	d402      	bmi.n	8007052 <_puts_r+0x36>
 800704c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800704e:	f001 fa18 	bl	8008482 <__retarget_lock_acquire_recursive>
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	0719      	lsls	r1, r3, #28
 8007056:	d51d      	bpl.n	8007094 <_puts_r+0x78>
 8007058:	6923      	ldr	r3, [r4, #16]
 800705a:	b1db      	cbz	r3, 8007094 <_puts_r+0x78>
 800705c:	3e01      	subs	r6, #1
 800705e:	68a3      	ldr	r3, [r4, #8]
 8007060:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007064:	3b01      	subs	r3, #1
 8007066:	60a3      	str	r3, [r4, #8]
 8007068:	bb39      	cbnz	r1, 80070ba <_puts_r+0x9e>
 800706a:	2b00      	cmp	r3, #0
 800706c:	da38      	bge.n	80070e0 <_puts_r+0xc4>
 800706e:	4622      	mov	r2, r4
 8007070:	210a      	movs	r1, #10
 8007072:	4628      	mov	r0, r5
 8007074:	f000 f90e 	bl	8007294 <__swbuf_r>
 8007078:	3001      	adds	r0, #1
 800707a:	d011      	beq.n	80070a0 <_puts_r+0x84>
 800707c:	250a      	movs	r5, #10
 800707e:	e011      	b.n	80070a4 <_puts_r+0x88>
 8007080:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <_puts_r+0xd4>)
 8007082:	429c      	cmp	r4, r3
 8007084:	d101      	bne.n	800708a <_puts_r+0x6e>
 8007086:	68ac      	ldr	r4, [r5, #8]
 8007088:	e7da      	b.n	8007040 <_puts_r+0x24>
 800708a:	4b1a      	ldr	r3, [pc, #104]	; (80070f4 <_puts_r+0xd8>)
 800708c:	429c      	cmp	r4, r3
 800708e:	bf08      	it	eq
 8007090:	68ec      	ldreq	r4, [r5, #12]
 8007092:	e7d5      	b.n	8007040 <_puts_r+0x24>
 8007094:	4621      	mov	r1, r4
 8007096:	4628      	mov	r0, r5
 8007098:	f000 f94e 	bl	8007338 <__swsetup_r>
 800709c:	2800      	cmp	r0, #0
 800709e:	d0dd      	beq.n	800705c <_puts_r+0x40>
 80070a0:	f04f 35ff 	mov.w	r5, #4294967295
 80070a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070a6:	07da      	lsls	r2, r3, #31
 80070a8:	d405      	bmi.n	80070b6 <_puts_r+0x9a>
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	059b      	lsls	r3, r3, #22
 80070ae:	d402      	bmi.n	80070b6 <_puts_r+0x9a>
 80070b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070b2:	f001 f9e7 	bl	8008484 <__retarget_lock_release_recursive>
 80070b6:	4628      	mov	r0, r5
 80070b8:	bd70      	pop	{r4, r5, r6, pc}
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	da04      	bge.n	80070c8 <_puts_r+0xac>
 80070be:	69a2      	ldr	r2, [r4, #24]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	dc06      	bgt.n	80070d2 <_puts_r+0xb6>
 80070c4:	290a      	cmp	r1, #10
 80070c6:	d004      	beq.n	80070d2 <_puts_r+0xb6>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	6022      	str	r2, [r4, #0]
 80070ce:	7019      	strb	r1, [r3, #0]
 80070d0:	e7c5      	b.n	800705e <_puts_r+0x42>
 80070d2:	4622      	mov	r2, r4
 80070d4:	4628      	mov	r0, r5
 80070d6:	f000 f8dd 	bl	8007294 <__swbuf_r>
 80070da:	3001      	adds	r0, #1
 80070dc:	d1bf      	bne.n	800705e <_puts_r+0x42>
 80070de:	e7df      	b.n	80070a0 <_puts_r+0x84>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	250a      	movs	r5, #10
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	6022      	str	r2, [r4, #0]
 80070e8:	701d      	strb	r5, [r3, #0]
 80070ea:	e7db      	b.n	80070a4 <_puts_r+0x88>
 80070ec:	080095ec 	.word	0x080095ec
 80070f0:	0800960c 	.word	0x0800960c
 80070f4:	080095cc 	.word	0x080095cc

080070f8 <puts>:
 80070f8:	4b02      	ldr	r3, [pc, #8]	; (8007104 <puts+0xc>)
 80070fa:	4601      	mov	r1, r0
 80070fc:	6818      	ldr	r0, [r3, #0]
 80070fe:	f7ff bf8d 	b.w	800701c <_puts_r>
 8007102:	bf00      	nop
 8007104:	2000000c 	.word	0x2000000c

08007108 <setvbuf>:
 8007108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800710c:	461d      	mov	r5, r3
 800710e:	4b5d      	ldr	r3, [pc, #372]	; (8007284 <setvbuf+0x17c>)
 8007110:	681f      	ldr	r7, [r3, #0]
 8007112:	4604      	mov	r4, r0
 8007114:	460e      	mov	r6, r1
 8007116:	4690      	mov	r8, r2
 8007118:	b127      	cbz	r7, 8007124 <setvbuf+0x1c>
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	b913      	cbnz	r3, 8007124 <setvbuf+0x1c>
 800711e:	4638      	mov	r0, r7
 8007120:	f001 f90c 	bl	800833c <__sinit>
 8007124:	4b58      	ldr	r3, [pc, #352]	; (8007288 <setvbuf+0x180>)
 8007126:	429c      	cmp	r4, r3
 8007128:	d167      	bne.n	80071fa <setvbuf+0xf2>
 800712a:	687c      	ldr	r4, [r7, #4]
 800712c:	f1b8 0f02 	cmp.w	r8, #2
 8007130:	d006      	beq.n	8007140 <setvbuf+0x38>
 8007132:	f1b8 0f01 	cmp.w	r8, #1
 8007136:	f200 809f 	bhi.w	8007278 <setvbuf+0x170>
 800713a:	2d00      	cmp	r5, #0
 800713c:	f2c0 809c 	blt.w	8007278 <setvbuf+0x170>
 8007140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007142:	07db      	lsls	r3, r3, #31
 8007144:	d405      	bmi.n	8007152 <setvbuf+0x4a>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	0598      	lsls	r0, r3, #22
 800714a:	d402      	bmi.n	8007152 <setvbuf+0x4a>
 800714c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800714e:	f001 f998 	bl	8008482 <__retarget_lock_acquire_recursive>
 8007152:	4621      	mov	r1, r4
 8007154:	4638      	mov	r0, r7
 8007156:	f001 f85d 	bl	8008214 <_fflush_r>
 800715a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800715c:	b141      	cbz	r1, 8007170 <setvbuf+0x68>
 800715e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007162:	4299      	cmp	r1, r3
 8007164:	d002      	beq.n	800716c <setvbuf+0x64>
 8007166:	4638      	mov	r0, r7
 8007168:	f001 fd96 	bl	8008c98 <_free_r>
 800716c:	2300      	movs	r3, #0
 800716e:	6363      	str	r3, [r4, #52]	; 0x34
 8007170:	2300      	movs	r3, #0
 8007172:	61a3      	str	r3, [r4, #24]
 8007174:	6063      	str	r3, [r4, #4]
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	0619      	lsls	r1, r3, #24
 800717a:	d503      	bpl.n	8007184 <setvbuf+0x7c>
 800717c:	6921      	ldr	r1, [r4, #16]
 800717e:	4638      	mov	r0, r7
 8007180:	f001 fd8a 	bl	8008c98 <_free_r>
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800718a:	f023 0303 	bic.w	r3, r3, #3
 800718e:	f1b8 0f02 	cmp.w	r8, #2
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	d06c      	beq.n	8007270 <setvbuf+0x168>
 8007196:	ab01      	add	r3, sp, #4
 8007198:	466a      	mov	r2, sp
 800719a:	4621      	mov	r1, r4
 800719c:	4638      	mov	r0, r7
 800719e:	f001 f972 	bl	8008486 <__swhatbuf_r>
 80071a2:	89a3      	ldrh	r3, [r4, #12]
 80071a4:	4318      	orrs	r0, r3
 80071a6:	81a0      	strh	r0, [r4, #12]
 80071a8:	2d00      	cmp	r5, #0
 80071aa:	d130      	bne.n	800720e <setvbuf+0x106>
 80071ac:	9d00      	ldr	r5, [sp, #0]
 80071ae:	4628      	mov	r0, r5
 80071b0:	f001 f9ce 	bl	8008550 <malloc>
 80071b4:	4606      	mov	r6, r0
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d155      	bne.n	8007266 <setvbuf+0x15e>
 80071ba:	f8dd 9000 	ldr.w	r9, [sp]
 80071be:	45a9      	cmp	r9, r5
 80071c0:	d14a      	bne.n	8007258 <setvbuf+0x150>
 80071c2:	f04f 35ff 	mov.w	r5, #4294967295
 80071c6:	2200      	movs	r2, #0
 80071c8:	60a2      	str	r2, [r4, #8]
 80071ca:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80071ce:	6022      	str	r2, [r4, #0]
 80071d0:	6122      	str	r2, [r4, #16]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071d8:	6162      	str	r2, [r4, #20]
 80071da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071dc:	f043 0302 	orr.w	r3, r3, #2
 80071e0:	07d2      	lsls	r2, r2, #31
 80071e2:	81a3      	strh	r3, [r4, #12]
 80071e4:	d405      	bmi.n	80071f2 <setvbuf+0xea>
 80071e6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80071ea:	d102      	bne.n	80071f2 <setvbuf+0xea>
 80071ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ee:	f001 f949 	bl	8008484 <__retarget_lock_release_recursive>
 80071f2:	4628      	mov	r0, r5
 80071f4:	b003      	add	sp, #12
 80071f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071fa:	4b24      	ldr	r3, [pc, #144]	; (800728c <setvbuf+0x184>)
 80071fc:	429c      	cmp	r4, r3
 80071fe:	d101      	bne.n	8007204 <setvbuf+0xfc>
 8007200:	68bc      	ldr	r4, [r7, #8]
 8007202:	e793      	b.n	800712c <setvbuf+0x24>
 8007204:	4b22      	ldr	r3, [pc, #136]	; (8007290 <setvbuf+0x188>)
 8007206:	429c      	cmp	r4, r3
 8007208:	bf08      	it	eq
 800720a:	68fc      	ldreq	r4, [r7, #12]
 800720c:	e78e      	b.n	800712c <setvbuf+0x24>
 800720e:	2e00      	cmp	r6, #0
 8007210:	d0cd      	beq.n	80071ae <setvbuf+0xa6>
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	b913      	cbnz	r3, 800721c <setvbuf+0x114>
 8007216:	4638      	mov	r0, r7
 8007218:	f001 f890 	bl	800833c <__sinit>
 800721c:	f1b8 0f01 	cmp.w	r8, #1
 8007220:	bf08      	it	eq
 8007222:	89a3      	ldrheq	r3, [r4, #12]
 8007224:	6026      	str	r6, [r4, #0]
 8007226:	bf04      	itt	eq
 8007228:	f043 0301 	orreq.w	r3, r3, #1
 800722c:	81a3      	strheq	r3, [r4, #12]
 800722e:	89a2      	ldrh	r2, [r4, #12]
 8007230:	f012 0308 	ands.w	r3, r2, #8
 8007234:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007238:	d01c      	beq.n	8007274 <setvbuf+0x16c>
 800723a:	07d3      	lsls	r3, r2, #31
 800723c:	bf41      	itttt	mi
 800723e:	2300      	movmi	r3, #0
 8007240:	426d      	negmi	r5, r5
 8007242:	60a3      	strmi	r3, [r4, #8]
 8007244:	61a5      	strmi	r5, [r4, #24]
 8007246:	bf58      	it	pl
 8007248:	60a5      	strpl	r5, [r4, #8]
 800724a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800724c:	f015 0501 	ands.w	r5, r5, #1
 8007250:	d115      	bne.n	800727e <setvbuf+0x176>
 8007252:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007256:	e7c8      	b.n	80071ea <setvbuf+0xe2>
 8007258:	4648      	mov	r0, r9
 800725a:	f001 f979 	bl	8008550 <malloc>
 800725e:	4606      	mov	r6, r0
 8007260:	2800      	cmp	r0, #0
 8007262:	d0ae      	beq.n	80071c2 <setvbuf+0xba>
 8007264:	464d      	mov	r5, r9
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726c:	81a3      	strh	r3, [r4, #12]
 800726e:	e7d0      	b.n	8007212 <setvbuf+0x10a>
 8007270:	2500      	movs	r5, #0
 8007272:	e7a8      	b.n	80071c6 <setvbuf+0xbe>
 8007274:	60a3      	str	r3, [r4, #8]
 8007276:	e7e8      	b.n	800724a <setvbuf+0x142>
 8007278:	f04f 35ff 	mov.w	r5, #4294967295
 800727c:	e7b9      	b.n	80071f2 <setvbuf+0xea>
 800727e:	2500      	movs	r5, #0
 8007280:	e7b7      	b.n	80071f2 <setvbuf+0xea>
 8007282:	bf00      	nop
 8007284:	2000000c 	.word	0x2000000c
 8007288:	080095ec 	.word	0x080095ec
 800728c:	0800960c 	.word	0x0800960c
 8007290:	080095cc 	.word	0x080095cc

08007294 <__swbuf_r>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	460e      	mov	r6, r1
 8007298:	4614      	mov	r4, r2
 800729a:	4605      	mov	r5, r0
 800729c:	b118      	cbz	r0, 80072a6 <__swbuf_r+0x12>
 800729e:	6983      	ldr	r3, [r0, #24]
 80072a0:	b90b      	cbnz	r3, 80072a6 <__swbuf_r+0x12>
 80072a2:	f001 f84b 	bl	800833c <__sinit>
 80072a6:	4b21      	ldr	r3, [pc, #132]	; (800732c <__swbuf_r+0x98>)
 80072a8:	429c      	cmp	r4, r3
 80072aa:	d12b      	bne.n	8007304 <__swbuf_r+0x70>
 80072ac:	686c      	ldr	r4, [r5, #4]
 80072ae:	69a3      	ldr	r3, [r4, #24]
 80072b0:	60a3      	str	r3, [r4, #8]
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	071a      	lsls	r2, r3, #28
 80072b6:	d52f      	bpl.n	8007318 <__swbuf_r+0x84>
 80072b8:	6923      	ldr	r3, [r4, #16]
 80072ba:	b36b      	cbz	r3, 8007318 <__swbuf_r+0x84>
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	6820      	ldr	r0, [r4, #0]
 80072c0:	1ac0      	subs	r0, r0, r3
 80072c2:	6963      	ldr	r3, [r4, #20]
 80072c4:	b2f6      	uxtb	r6, r6
 80072c6:	4283      	cmp	r3, r0
 80072c8:	4637      	mov	r7, r6
 80072ca:	dc04      	bgt.n	80072d6 <__swbuf_r+0x42>
 80072cc:	4621      	mov	r1, r4
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 ffa0 	bl	8008214 <_fflush_r>
 80072d4:	bb30      	cbnz	r0, 8007324 <__swbuf_r+0x90>
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	3b01      	subs	r3, #1
 80072da:	60a3      	str	r3, [r4, #8]
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	6022      	str	r2, [r4, #0]
 80072e2:	701e      	strb	r6, [r3, #0]
 80072e4:	6963      	ldr	r3, [r4, #20]
 80072e6:	3001      	adds	r0, #1
 80072e8:	4283      	cmp	r3, r0
 80072ea:	d004      	beq.n	80072f6 <__swbuf_r+0x62>
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	07db      	lsls	r3, r3, #31
 80072f0:	d506      	bpl.n	8007300 <__swbuf_r+0x6c>
 80072f2:	2e0a      	cmp	r6, #10
 80072f4:	d104      	bne.n	8007300 <__swbuf_r+0x6c>
 80072f6:	4621      	mov	r1, r4
 80072f8:	4628      	mov	r0, r5
 80072fa:	f000 ff8b 	bl	8008214 <_fflush_r>
 80072fe:	b988      	cbnz	r0, 8007324 <__swbuf_r+0x90>
 8007300:	4638      	mov	r0, r7
 8007302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <__swbuf_r+0x9c>)
 8007306:	429c      	cmp	r4, r3
 8007308:	d101      	bne.n	800730e <__swbuf_r+0x7a>
 800730a:	68ac      	ldr	r4, [r5, #8]
 800730c:	e7cf      	b.n	80072ae <__swbuf_r+0x1a>
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <__swbuf_r+0xa0>)
 8007310:	429c      	cmp	r4, r3
 8007312:	bf08      	it	eq
 8007314:	68ec      	ldreq	r4, [r5, #12]
 8007316:	e7ca      	b.n	80072ae <__swbuf_r+0x1a>
 8007318:	4621      	mov	r1, r4
 800731a:	4628      	mov	r0, r5
 800731c:	f000 f80c 	bl	8007338 <__swsetup_r>
 8007320:	2800      	cmp	r0, #0
 8007322:	d0cb      	beq.n	80072bc <__swbuf_r+0x28>
 8007324:	f04f 37ff 	mov.w	r7, #4294967295
 8007328:	e7ea      	b.n	8007300 <__swbuf_r+0x6c>
 800732a:	bf00      	nop
 800732c:	080095ec 	.word	0x080095ec
 8007330:	0800960c 	.word	0x0800960c
 8007334:	080095cc 	.word	0x080095cc

08007338 <__swsetup_r>:
 8007338:	4b32      	ldr	r3, [pc, #200]	; (8007404 <__swsetup_r+0xcc>)
 800733a:	b570      	push	{r4, r5, r6, lr}
 800733c:	681d      	ldr	r5, [r3, #0]
 800733e:	4606      	mov	r6, r0
 8007340:	460c      	mov	r4, r1
 8007342:	b125      	cbz	r5, 800734e <__swsetup_r+0x16>
 8007344:	69ab      	ldr	r3, [r5, #24]
 8007346:	b913      	cbnz	r3, 800734e <__swsetup_r+0x16>
 8007348:	4628      	mov	r0, r5
 800734a:	f000 fff7 	bl	800833c <__sinit>
 800734e:	4b2e      	ldr	r3, [pc, #184]	; (8007408 <__swsetup_r+0xd0>)
 8007350:	429c      	cmp	r4, r3
 8007352:	d10f      	bne.n	8007374 <__swsetup_r+0x3c>
 8007354:	686c      	ldr	r4, [r5, #4]
 8007356:	89a3      	ldrh	r3, [r4, #12]
 8007358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800735c:	0719      	lsls	r1, r3, #28
 800735e:	d42c      	bmi.n	80073ba <__swsetup_r+0x82>
 8007360:	06dd      	lsls	r5, r3, #27
 8007362:	d411      	bmi.n	8007388 <__swsetup_r+0x50>
 8007364:	2309      	movs	r3, #9
 8007366:	6033      	str	r3, [r6, #0]
 8007368:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800736c:	81a3      	strh	r3, [r4, #12]
 800736e:	f04f 30ff 	mov.w	r0, #4294967295
 8007372:	e03e      	b.n	80073f2 <__swsetup_r+0xba>
 8007374:	4b25      	ldr	r3, [pc, #148]	; (800740c <__swsetup_r+0xd4>)
 8007376:	429c      	cmp	r4, r3
 8007378:	d101      	bne.n	800737e <__swsetup_r+0x46>
 800737a:	68ac      	ldr	r4, [r5, #8]
 800737c:	e7eb      	b.n	8007356 <__swsetup_r+0x1e>
 800737e:	4b24      	ldr	r3, [pc, #144]	; (8007410 <__swsetup_r+0xd8>)
 8007380:	429c      	cmp	r4, r3
 8007382:	bf08      	it	eq
 8007384:	68ec      	ldreq	r4, [r5, #12]
 8007386:	e7e6      	b.n	8007356 <__swsetup_r+0x1e>
 8007388:	0758      	lsls	r0, r3, #29
 800738a:	d512      	bpl.n	80073b2 <__swsetup_r+0x7a>
 800738c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800738e:	b141      	cbz	r1, 80073a2 <__swsetup_r+0x6a>
 8007390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007394:	4299      	cmp	r1, r3
 8007396:	d002      	beq.n	800739e <__swsetup_r+0x66>
 8007398:	4630      	mov	r0, r6
 800739a:	f001 fc7d 	bl	8008c98 <_free_r>
 800739e:	2300      	movs	r3, #0
 80073a0:	6363      	str	r3, [r4, #52]	; 0x34
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073a8:	81a3      	strh	r3, [r4, #12]
 80073aa:	2300      	movs	r3, #0
 80073ac:	6063      	str	r3, [r4, #4]
 80073ae:	6923      	ldr	r3, [r4, #16]
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	f043 0308 	orr.w	r3, r3, #8
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	6923      	ldr	r3, [r4, #16]
 80073bc:	b94b      	cbnz	r3, 80073d2 <__swsetup_r+0x9a>
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c8:	d003      	beq.n	80073d2 <__swsetup_r+0x9a>
 80073ca:	4621      	mov	r1, r4
 80073cc:	4630      	mov	r0, r6
 80073ce:	f001 f87f 	bl	80084d0 <__smakebuf_r>
 80073d2:	89a0      	ldrh	r0, [r4, #12]
 80073d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073d8:	f010 0301 	ands.w	r3, r0, #1
 80073dc:	d00a      	beq.n	80073f4 <__swsetup_r+0xbc>
 80073de:	2300      	movs	r3, #0
 80073e0:	60a3      	str	r3, [r4, #8]
 80073e2:	6963      	ldr	r3, [r4, #20]
 80073e4:	425b      	negs	r3, r3
 80073e6:	61a3      	str	r3, [r4, #24]
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	b943      	cbnz	r3, 80073fe <__swsetup_r+0xc6>
 80073ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073f0:	d1ba      	bne.n	8007368 <__swsetup_r+0x30>
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	0781      	lsls	r1, r0, #30
 80073f6:	bf58      	it	pl
 80073f8:	6963      	ldrpl	r3, [r4, #20]
 80073fa:	60a3      	str	r3, [r4, #8]
 80073fc:	e7f4      	b.n	80073e8 <__swsetup_r+0xb0>
 80073fe:	2000      	movs	r0, #0
 8007400:	e7f7      	b.n	80073f2 <__swsetup_r+0xba>
 8007402:	bf00      	nop
 8007404:	2000000c 	.word	0x2000000c
 8007408:	080095ec 	.word	0x080095ec
 800740c:	0800960c 	.word	0x0800960c
 8007410:	080095cc 	.word	0x080095cc

08007414 <quorem>:
 8007414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	6903      	ldr	r3, [r0, #16]
 800741a:	690c      	ldr	r4, [r1, #16]
 800741c:	42a3      	cmp	r3, r4
 800741e:	4607      	mov	r7, r0
 8007420:	f2c0 8081 	blt.w	8007526 <quorem+0x112>
 8007424:	3c01      	subs	r4, #1
 8007426:	f101 0814 	add.w	r8, r1, #20
 800742a:	f100 0514 	add.w	r5, r0, #20
 800742e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007432:	9301      	str	r3, [sp, #4]
 8007434:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007438:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800743c:	3301      	adds	r3, #1
 800743e:	429a      	cmp	r2, r3
 8007440:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007444:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007448:	fbb2 f6f3 	udiv	r6, r2, r3
 800744c:	d331      	bcc.n	80074b2 <quorem+0x9e>
 800744e:	f04f 0e00 	mov.w	lr, #0
 8007452:	4640      	mov	r0, r8
 8007454:	46ac      	mov	ip, r5
 8007456:	46f2      	mov	sl, lr
 8007458:	f850 2b04 	ldr.w	r2, [r0], #4
 800745c:	b293      	uxth	r3, r2
 800745e:	fb06 e303 	mla	r3, r6, r3, lr
 8007462:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007466:	b29b      	uxth	r3, r3
 8007468:	ebaa 0303 	sub.w	r3, sl, r3
 800746c:	0c12      	lsrs	r2, r2, #16
 800746e:	f8dc a000 	ldr.w	sl, [ip]
 8007472:	fb06 e202 	mla	r2, r6, r2, lr
 8007476:	fa13 f38a 	uxtah	r3, r3, sl
 800747a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800747e:	fa1f fa82 	uxth.w	sl, r2
 8007482:	f8dc 2000 	ldr.w	r2, [ip]
 8007486:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800748a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800748e:	b29b      	uxth	r3, r3
 8007490:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007494:	4581      	cmp	r9, r0
 8007496:	f84c 3b04 	str.w	r3, [ip], #4
 800749a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800749e:	d2db      	bcs.n	8007458 <quorem+0x44>
 80074a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80074a4:	b92b      	cbnz	r3, 80074b2 <quorem+0x9e>
 80074a6:	9b01      	ldr	r3, [sp, #4]
 80074a8:	3b04      	subs	r3, #4
 80074aa:	429d      	cmp	r5, r3
 80074ac:	461a      	mov	r2, r3
 80074ae:	d32e      	bcc.n	800750e <quorem+0xfa>
 80074b0:	613c      	str	r4, [r7, #16]
 80074b2:	4638      	mov	r0, r7
 80074b4:	f001 fae0 	bl	8008a78 <__mcmp>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	db24      	blt.n	8007506 <quorem+0xf2>
 80074bc:	3601      	adds	r6, #1
 80074be:	4628      	mov	r0, r5
 80074c0:	f04f 0c00 	mov.w	ip, #0
 80074c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80074c8:	f8d0 e000 	ldr.w	lr, [r0]
 80074cc:	b293      	uxth	r3, r2
 80074ce:	ebac 0303 	sub.w	r3, ip, r3
 80074d2:	0c12      	lsrs	r2, r2, #16
 80074d4:	fa13 f38e 	uxtah	r3, r3, lr
 80074d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074e6:	45c1      	cmp	r9, r8
 80074e8:	f840 3b04 	str.w	r3, [r0], #4
 80074ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074f0:	d2e8      	bcs.n	80074c4 <quorem+0xb0>
 80074f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074fa:	b922      	cbnz	r2, 8007506 <quorem+0xf2>
 80074fc:	3b04      	subs	r3, #4
 80074fe:	429d      	cmp	r5, r3
 8007500:	461a      	mov	r2, r3
 8007502:	d30a      	bcc.n	800751a <quorem+0x106>
 8007504:	613c      	str	r4, [r7, #16]
 8007506:	4630      	mov	r0, r6
 8007508:	b003      	add	sp, #12
 800750a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750e:	6812      	ldr	r2, [r2, #0]
 8007510:	3b04      	subs	r3, #4
 8007512:	2a00      	cmp	r2, #0
 8007514:	d1cc      	bne.n	80074b0 <quorem+0x9c>
 8007516:	3c01      	subs	r4, #1
 8007518:	e7c7      	b.n	80074aa <quorem+0x96>
 800751a:	6812      	ldr	r2, [r2, #0]
 800751c:	3b04      	subs	r3, #4
 800751e:	2a00      	cmp	r2, #0
 8007520:	d1f0      	bne.n	8007504 <quorem+0xf0>
 8007522:	3c01      	subs	r4, #1
 8007524:	e7eb      	b.n	80074fe <quorem+0xea>
 8007526:	2000      	movs	r0, #0
 8007528:	e7ee      	b.n	8007508 <quorem+0xf4>
 800752a:	0000      	movs	r0, r0
 800752c:	0000      	movs	r0, r0
	...

08007530 <_dtoa_r>:
 8007530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	ed2d 8b02 	vpush	{d8}
 8007538:	ec57 6b10 	vmov	r6, r7, d0
 800753c:	b095      	sub	sp, #84	; 0x54
 800753e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007540:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007544:	9105      	str	r1, [sp, #20]
 8007546:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800754a:	4604      	mov	r4, r0
 800754c:	9209      	str	r2, [sp, #36]	; 0x24
 800754e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007550:	b975      	cbnz	r5, 8007570 <_dtoa_r+0x40>
 8007552:	2010      	movs	r0, #16
 8007554:	f000 fffc 	bl	8008550 <malloc>
 8007558:	4602      	mov	r2, r0
 800755a:	6260      	str	r0, [r4, #36]	; 0x24
 800755c:	b920      	cbnz	r0, 8007568 <_dtoa_r+0x38>
 800755e:	4bb2      	ldr	r3, [pc, #712]	; (8007828 <_dtoa_r+0x2f8>)
 8007560:	21ea      	movs	r1, #234	; 0xea
 8007562:	48b2      	ldr	r0, [pc, #712]	; (800782c <_dtoa_r+0x2fc>)
 8007564:	f001 fe02 	bl	800916c <__assert_func>
 8007568:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800756c:	6005      	str	r5, [r0, #0]
 800756e:	60c5      	str	r5, [r0, #12]
 8007570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007572:	6819      	ldr	r1, [r3, #0]
 8007574:	b151      	cbz	r1, 800758c <_dtoa_r+0x5c>
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	604a      	str	r2, [r1, #4]
 800757a:	2301      	movs	r3, #1
 800757c:	4093      	lsls	r3, r2
 800757e:	608b      	str	r3, [r1, #8]
 8007580:	4620      	mov	r0, r4
 8007582:	f001 f83b 	bl	80085fc <_Bfree>
 8007586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	1e3b      	subs	r3, r7, #0
 800758e:	bfb9      	ittee	lt
 8007590:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007594:	9303      	strlt	r3, [sp, #12]
 8007596:	2300      	movge	r3, #0
 8007598:	f8c8 3000 	strge.w	r3, [r8]
 800759c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80075a0:	4ba3      	ldr	r3, [pc, #652]	; (8007830 <_dtoa_r+0x300>)
 80075a2:	bfbc      	itt	lt
 80075a4:	2201      	movlt	r2, #1
 80075a6:	f8c8 2000 	strlt.w	r2, [r8]
 80075aa:	ea33 0309 	bics.w	r3, r3, r9
 80075ae:	d11b      	bne.n	80075e8 <_dtoa_r+0xb8>
 80075b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075bc:	4333      	orrs	r3, r6
 80075be:	f000 857a 	beq.w	80080b6 <_dtoa_r+0xb86>
 80075c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075c4:	b963      	cbnz	r3, 80075e0 <_dtoa_r+0xb0>
 80075c6:	4b9b      	ldr	r3, [pc, #620]	; (8007834 <_dtoa_r+0x304>)
 80075c8:	e024      	b.n	8007614 <_dtoa_r+0xe4>
 80075ca:	4b9b      	ldr	r3, [pc, #620]	; (8007838 <_dtoa_r+0x308>)
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	3308      	adds	r3, #8
 80075d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	9800      	ldr	r0, [sp, #0]
 80075d6:	b015      	add	sp, #84	; 0x54
 80075d8:	ecbd 8b02 	vpop	{d8}
 80075dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e0:	4b94      	ldr	r3, [pc, #592]	; (8007834 <_dtoa_r+0x304>)
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	3303      	adds	r3, #3
 80075e6:	e7f3      	b.n	80075d0 <_dtoa_r+0xa0>
 80075e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075ec:	2200      	movs	r2, #0
 80075ee:	ec51 0b17 	vmov	r0, r1, d7
 80075f2:	2300      	movs	r3, #0
 80075f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80075f8:	f7f9 fa86 	bl	8000b08 <__aeabi_dcmpeq>
 80075fc:	4680      	mov	r8, r0
 80075fe:	b158      	cbz	r0, 8007618 <_dtoa_r+0xe8>
 8007600:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007602:	2301      	movs	r3, #1
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 8551 	beq.w	80080b0 <_dtoa_r+0xb80>
 800760e:	488b      	ldr	r0, [pc, #556]	; (800783c <_dtoa_r+0x30c>)
 8007610:	6018      	str	r0, [r3, #0]
 8007612:	1e43      	subs	r3, r0, #1
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	e7dd      	b.n	80075d4 <_dtoa_r+0xa4>
 8007618:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800761c:	aa12      	add	r2, sp, #72	; 0x48
 800761e:	a913      	add	r1, sp, #76	; 0x4c
 8007620:	4620      	mov	r0, r4
 8007622:	f001 facd 	bl	8008bc0 <__d2b>
 8007626:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800762a:	4683      	mov	fp, r0
 800762c:	2d00      	cmp	r5, #0
 800762e:	d07c      	beq.n	800772a <_dtoa_r+0x1fa>
 8007630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007632:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800763a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800763e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007642:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007646:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800764a:	4b7d      	ldr	r3, [pc, #500]	; (8007840 <_dtoa_r+0x310>)
 800764c:	2200      	movs	r2, #0
 800764e:	4630      	mov	r0, r6
 8007650:	4639      	mov	r1, r7
 8007652:	f7f8 fe39 	bl	80002c8 <__aeabi_dsub>
 8007656:	a36e      	add	r3, pc, #440	; (adr r3, 8007810 <_dtoa_r+0x2e0>)
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f7f8 ffec 	bl	8000638 <__aeabi_dmul>
 8007660:	a36d      	add	r3, pc, #436	; (adr r3, 8007818 <_dtoa_r+0x2e8>)
 8007662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007666:	f7f8 fe31 	bl	80002cc <__adddf3>
 800766a:	4606      	mov	r6, r0
 800766c:	4628      	mov	r0, r5
 800766e:	460f      	mov	r7, r1
 8007670:	f7f8 ff78 	bl	8000564 <__aeabi_i2d>
 8007674:	a36a      	add	r3, pc, #424	; (adr r3, 8007820 <_dtoa_r+0x2f0>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f8 ffdd 	bl	8000638 <__aeabi_dmul>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4630      	mov	r0, r6
 8007684:	4639      	mov	r1, r7
 8007686:	f7f8 fe21 	bl	80002cc <__adddf3>
 800768a:	4606      	mov	r6, r0
 800768c:	460f      	mov	r7, r1
 800768e:	f7f9 fa83 	bl	8000b98 <__aeabi_d2iz>
 8007692:	2200      	movs	r2, #0
 8007694:	4682      	mov	sl, r0
 8007696:	2300      	movs	r3, #0
 8007698:	4630      	mov	r0, r6
 800769a:	4639      	mov	r1, r7
 800769c:	f7f9 fa3e 	bl	8000b1c <__aeabi_dcmplt>
 80076a0:	b148      	cbz	r0, 80076b6 <_dtoa_r+0x186>
 80076a2:	4650      	mov	r0, sl
 80076a4:	f7f8 ff5e 	bl	8000564 <__aeabi_i2d>
 80076a8:	4632      	mov	r2, r6
 80076aa:	463b      	mov	r3, r7
 80076ac:	f7f9 fa2c 	bl	8000b08 <__aeabi_dcmpeq>
 80076b0:	b908      	cbnz	r0, 80076b6 <_dtoa_r+0x186>
 80076b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076b6:	f1ba 0f16 	cmp.w	sl, #22
 80076ba:	d854      	bhi.n	8007766 <_dtoa_r+0x236>
 80076bc:	4b61      	ldr	r3, [pc, #388]	; (8007844 <_dtoa_r+0x314>)
 80076be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076ca:	f7f9 fa27 	bl	8000b1c <__aeabi_dcmplt>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d04b      	beq.n	800776a <_dtoa_r+0x23a>
 80076d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076d6:	2300      	movs	r3, #0
 80076d8:	930e      	str	r3, [sp, #56]	; 0x38
 80076da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076dc:	1b5d      	subs	r5, r3, r5
 80076de:	1e6b      	subs	r3, r5, #1
 80076e0:	9304      	str	r3, [sp, #16]
 80076e2:	bf43      	ittte	mi
 80076e4:	2300      	movmi	r3, #0
 80076e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80076ea:	9304      	strmi	r3, [sp, #16]
 80076ec:	f04f 0800 	movpl.w	r8, #0
 80076f0:	f1ba 0f00 	cmp.w	sl, #0
 80076f4:	db3b      	blt.n	800776e <_dtoa_r+0x23e>
 80076f6:	9b04      	ldr	r3, [sp, #16]
 80076f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80076fc:	4453      	add	r3, sl
 80076fe:	9304      	str	r3, [sp, #16]
 8007700:	2300      	movs	r3, #0
 8007702:	9306      	str	r3, [sp, #24]
 8007704:	9b05      	ldr	r3, [sp, #20]
 8007706:	2b09      	cmp	r3, #9
 8007708:	d869      	bhi.n	80077de <_dtoa_r+0x2ae>
 800770a:	2b05      	cmp	r3, #5
 800770c:	bfc4      	itt	gt
 800770e:	3b04      	subgt	r3, #4
 8007710:	9305      	strgt	r3, [sp, #20]
 8007712:	9b05      	ldr	r3, [sp, #20]
 8007714:	f1a3 0302 	sub.w	r3, r3, #2
 8007718:	bfcc      	ite	gt
 800771a:	2500      	movgt	r5, #0
 800771c:	2501      	movle	r5, #1
 800771e:	2b03      	cmp	r3, #3
 8007720:	d869      	bhi.n	80077f6 <_dtoa_r+0x2c6>
 8007722:	e8df f003 	tbb	[pc, r3]
 8007726:	4e2c      	.short	0x4e2c
 8007728:	5a4c      	.short	0x5a4c
 800772a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800772e:	441d      	add	r5, r3
 8007730:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007734:	2b20      	cmp	r3, #32
 8007736:	bfc1      	itttt	gt
 8007738:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800773c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007740:	fa09 f303 	lslgt.w	r3, r9, r3
 8007744:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007748:	bfda      	itte	le
 800774a:	f1c3 0320 	rsble	r3, r3, #32
 800774e:	fa06 f003 	lslle.w	r0, r6, r3
 8007752:	4318      	orrgt	r0, r3
 8007754:	f7f8 fef6 	bl	8000544 <__aeabi_ui2d>
 8007758:	2301      	movs	r3, #1
 800775a:	4606      	mov	r6, r0
 800775c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007760:	3d01      	subs	r5, #1
 8007762:	9310      	str	r3, [sp, #64]	; 0x40
 8007764:	e771      	b.n	800764a <_dtoa_r+0x11a>
 8007766:	2301      	movs	r3, #1
 8007768:	e7b6      	b.n	80076d8 <_dtoa_r+0x1a8>
 800776a:	900e      	str	r0, [sp, #56]	; 0x38
 800776c:	e7b5      	b.n	80076da <_dtoa_r+0x1aa>
 800776e:	f1ca 0300 	rsb	r3, sl, #0
 8007772:	9306      	str	r3, [sp, #24]
 8007774:	2300      	movs	r3, #0
 8007776:	eba8 080a 	sub.w	r8, r8, sl
 800777a:	930d      	str	r3, [sp, #52]	; 0x34
 800777c:	e7c2      	b.n	8007704 <_dtoa_r+0x1d4>
 800777e:	2300      	movs	r3, #0
 8007780:	9308      	str	r3, [sp, #32]
 8007782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007784:	2b00      	cmp	r3, #0
 8007786:	dc39      	bgt.n	80077fc <_dtoa_r+0x2cc>
 8007788:	f04f 0901 	mov.w	r9, #1
 800778c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007790:	464b      	mov	r3, r9
 8007792:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007796:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007798:	2200      	movs	r2, #0
 800779a:	6042      	str	r2, [r0, #4]
 800779c:	2204      	movs	r2, #4
 800779e:	f102 0614 	add.w	r6, r2, #20
 80077a2:	429e      	cmp	r6, r3
 80077a4:	6841      	ldr	r1, [r0, #4]
 80077a6:	d92f      	bls.n	8007808 <_dtoa_r+0x2d8>
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 fee7 	bl	800857c <_Balloc>
 80077ae:	9000      	str	r0, [sp, #0]
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d14b      	bne.n	800784c <_dtoa_r+0x31c>
 80077b4:	4b24      	ldr	r3, [pc, #144]	; (8007848 <_dtoa_r+0x318>)
 80077b6:	4602      	mov	r2, r0
 80077b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80077bc:	e6d1      	b.n	8007562 <_dtoa_r+0x32>
 80077be:	2301      	movs	r3, #1
 80077c0:	e7de      	b.n	8007780 <_dtoa_r+0x250>
 80077c2:	2300      	movs	r3, #0
 80077c4:	9308      	str	r3, [sp, #32]
 80077c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c8:	eb0a 0903 	add.w	r9, sl, r3
 80077cc:	f109 0301 	add.w	r3, r9, #1
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	9301      	str	r3, [sp, #4]
 80077d4:	bfb8      	it	lt
 80077d6:	2301      	movlt	r3, #1
 80077d8:	e7dd      	b.n	8007796 <_dtoa_r+0x266>
 80077da:	2301      	movs	r3, #1
 80077dc:	e7f2      	b.n	80077c4 <_dtoa_r+0x294>
 80077de:	2501      	movs	r5, #1
 80077e0:	2300      	movs	r3, #0
 80077e2:	9305      	str	r3, [sp, #20]
 80077e4:	9508      	str	r5, [sp, #32]
 80077e6:	f04f 39ff 	mov.w	r9, #4294967295
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80077f0:	2312      	movs	r3, #18
 80077f2:	9209      	str	r2, [sp, #36]	; 0x24
 80077f4:	e7cf      	b.n	8007796 <_dtoa_r+0x266>
 80077f6:	2301      	movs	r3, #1
 80077f8:	9308      	str	r3, [sp, #32]
 80077fa:	e7f4      	b.n	80077e6 <_dtoa_r+0x2b6>
 80077fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007800:	f8cd 9004 	str.w	r9, [sp, #4]
 8007804:	464b      	mov	r3, r9
 8007806:	e7c6      	b.n	8007796 <_dtoa_r+0x266>
 8007808:	3101      	adds	r1, #1
 800780a:	6041      	str	r1, [r0, #4]
 800780c:	0052      	lsls	r2, r2, #1
 800780e:	e7c6      	b.n	800779e <_dtoa_r+0x26e>
 8007810:	636f4361 	.word	0x636f4361
 8007814:	3fd287a7 	.word	0x3fd287a7
 8007818:	8b60c8b3 	.word	0x8b60c8b3
 800781c:	3fc68a28 	.word	0x3fc68a28
 8007820:	509f79fb 	.word	0x509f79fb
 8007824:	3fd34413 	.word	0x3fd34413
 8007828:	08009545 	.word	0x08009545
 800782c:	0800955c 	.word	0x0800955c
 8007830:	7ff00000 	.word	0x7ff00000
 8007834:	08009541 	.word	0x08009541
 8007838:	08009538 	.word	0x08009538
 800783c:	08009515 	.word	0x08009515
 8007840:	3ff80000 	.word	0x3ff80000
 8007844:	080096b8 	.word	0x080096b8
 8007848:	080095bb 	.word	0x080095bb
 800784c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800784e:	9a00      	ldr	r2, [sp, #0]
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	9b01      	ldr	r3, [sp, #4]
 8007854:	2b0e      	cmp	r3, #14
 8007856:	f200 80ad 	bhi.w	80079b4 <_dtoa_r+0x484>
 800785a:	2d00      	cmp	r5, #0
 800785c:	f000 80aa 	beq.w	80079b4 <_dtoa_r+0x484>
 8007860:	f1ba 0f00 	cmp.w	sl, #0
 8007864:	dd36      	ble.n	80078d4 <_dtoa_r+0x3a4>
 8007866:	4ac3      	ldr	r2, [pc, #780]	; (8007b74 <_dtoa_r+0x644>)
 8007868:	f00a 030f 	and.w	r3, sl, #15
 800786c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007870:	ed93 7b00 	vldr	d7, [r3]
 8007874:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007878:	ea4f 172a 	mov.w	r7, sl, asr #4
 800787c:	eeb0 8a47 	vmov.f32	s16, s14
 8007880:	eef0 8a67 	vmov.f32	s17, s15
 8007884:	d016      	beq.n	80078b4 <_dtoa_r+0x384>
 8007886:	4bbc      	ldr	r3, [pc, #752]	; (8007b78 <_dtoa_r+0x648>)
 8007888:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800788c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007890:	f7f8 fffc 	bl	800088c <__aeabi_ddiv>
 8007894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007898:	f007 070f 	and.w	r7, r7, #15
 800789c:	2503      	movs	r5, #3
 800789e:	4eb6      	ldr	r6, [pc, #728]	; (8007b78 <_dtoa_r+0x648>)
 80078a0:	b957      	cbnz	r7, 80078b8 <_dtoa_r+0x388>
 80078a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078a6:	ec53 2b18 	vmov	r2, r3, d8
 80078aa:	f7f8 ffef 	bl	800088c <__aeabi_ddiv>
 80078ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078b2:	e029      	b.n	8007908 <_dtoa_r+0x3d8>
 80078b4:	2502      	movs	r5, #2
 80078b6:	e7f2      	b.n	800789e <_dtoa_r+0x36e>
 80078b8:	07f9      	lsls	r1, r7, #31
 80078ba:	d508      	bpl.n	80078ce <_dtoa_r+0x39e>
 80078bc:	ec51 0b18 	vmov	r0, r1, d8
 80078c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078c4:	f7f8 feb8 	bl	8000638 <__aeabi_dmul>
 80078c8:	ec41 0b18 	vmov	d8, r0, r1
 80078cc:	3501      	adds	r5, #1
 80078ce:	107f      	asrs	r7, r7, #1
 80078d0:	3608      	adds	r6, #8
 80078d2:	e7e5      	b.n	80078a0 <_dtoa_r+0x370>
 80078d4:	f000 80a6 	beq.w	8007a24 <_dtoa_r+0x4f4>
 80078d8:	f1ca 0600 	rsb	r6, sl, #0
 80078dc:	4ba5      	ldr	r3, [pc, #660]	; (8007b74 <_dtoa_r+0x644>)
 80078de:	4fa6      	ldr	r7, [pc, #664]	; (8007b78 <_dtoa_r+0x648>)
 80078e0:	f006 020f 	and.w	r2, r6, #15
 80078e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078f0:	f7f8 fea2 	bl	8000638 <__aeabi_dmul>
 80078f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f8:	1136      	asrs	r6, r6, #4
 80078fa:	2300      	movs	r3, #0
 80078fc:	2502      	movs	r5, #2
 80078fe:	2e00      	cmp	r6, #0
 8007900:	f040 8085 	bne.w	8007a0e <_dtoa_r+0x4de>
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1d2      	bne.n	80078ae <_dtoa_r+0x37e>
 8007908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 808c 	beq.w	8007a28 <_dtoa_r+0x4f8>
 8007910:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007914:	4b99      	ldr	r3, [pc, #612]	; (8007b7c <_dtoa_r+0x64c>)
 8007916:	2200      	movs	r2, #0
 8007918:	4630      	mov	r0, r6
 800791a:	4639      	mov	r1, r7
 800791c:	f7f9 f8fe 	bl	8000b1c <__aeabi_dcmplt>
 8007920:	2800      	cmp	r0, #0
 8007922:	f000 8081 	beq.w	8007a28 <_dtoa_r+0x4f8>
 8007926:	9b01      	ldr	r3, [sp, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d07d      	beq.n	8007a28 <_dtoa_r+0x4f8>
 800792c:	f1b9 0f00 	cmp.w	r9, #0
 8007930:	dd3c      	ble.n	80079ac <_dtoa_r+0x47c>
 8007932:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007936:	9307      	str	r3, [sp, #28]
 8007938:	2200      	movs	r2, #0
 800793a:	4b91      	ldr	r3, [pc, #580]	; (8007b80 <_dtoa_r+0x650>)
 800793c:	4630      	mov	r0, r6
 800793e:	4639      	mov	r1, r7
 8007940:	f7f8 fe7a 	bl	8000638 <__aeabi_dmul>
 8007944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007948:	3501      	adds	r5, #1
 800794a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800794e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007952:	4628      	mov	r0, r5
 8007954:	f7f8 fe06 	bl	8000564 <__aeabi_i2d>
 8007958:	4632      	mov	r2, r6
 800795a:	463b      	mov	r3, r7
 800795c:	f7f8 fe6c 	bl	8000638 <__aeabi_dmul>
 8007960:	4b88      	ldr	r3, [pc, #544]	; (8007b84 <_dtoa_r+0x654>)
 8007962:	2200      	movs	r2, #0
 8007964:	f7f8 fcb2 	bl	80002cc <__adddf3>
 8007968:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800796c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007970:	9303      	str	r3, [sp, #12]
 8007972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007974:	2b00      	cmp	r3, #0
 8007976:	d15c      	bne.n	8007a32 <_dtoa_r+0x502>
 8007978:	4b83      	ldr	r3, [pc, #524]	; (8007b88 <_dtoa_r+0x658>)
 800797a:	2200      	movs	r2, #0
 800797c:	4630      	mov	r0, r6
 800797e:	4639      	mov	r1, r7
 8007980:	f7f8 fca2 	bl	80002c8 <__aeabi_dsub>
 8007984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007988:	4606      	mov	r6, r0
 800798a:	460f      	mov	r7, r1
 800798c:	f7f9 f8e4 	bl	8000b58 <__aeabi_dcmpgt>
 8007990:	2800      	cmp	r0, #0
 8007992:	f040 8296 	bne.w	8007ec2 <_dtoa_r+0x992>
 8007996:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800799a:	4630      	mov	r0, r6
 800799c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079a0:	4639      	mov	r1, r7
 80079a2:	f7f9 f8bb 	bl	8000b1c <__aeabi_dcmplt>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	f040 8288 	bne.w	8007ebc <_dtoa_r+0x98c>
 80079ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f2c0 8158 	blt.w	8007c6c <_dtoa_r+0x73c>
 80079bc:	f1ba 0f0e 	cmp.w	sl, #14
 80079c0:	f300 8154 	bgt.w	8007c6c <_dtoa_r+0x73c>
 80079c4:	4b6b      	ldr	r3, [pc, #428]	; (8007b74 <_dtoa_r+0x644>)
 80079c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80079ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f280 80e3 	bge.w	8007b9c <_dtoa_r+0x66c>
 80079d6:	9b01      	ldr	r3, [sp, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f300 80df 	bgt.w	8007b9c <_dtoa_r+0x66c>
 80079de:	f040 826d 	bne.w	8007ebc <_dtoa_r+0x98c>
 80079e2:	4b69      	ldr	r3, [pc, #420]	; (8007b88 <_dtoa_r+0x658>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	4640      	mov	r0, r8
 80079e8:	4649      	mov	r1, r9
 80079ea:	f7f8 fe25 	bl	8000638 <__aeabi_dmul>
 80079ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079f2:	f7f9 f8a7 	bl	8000b44 <__aeabi_dcmpge>
 80079f6:	9e01      	ldr	r6, [sp, #4]
 80079f8:	4637      	mov	r7, r6
 80079fa:	2800      	cmp	r0, #0
 80079fc:	f040 8243 	bne.w	8007e86 <_dtoa_r+0x956>
 8007a00:	9d00      	ldr	r5, [sp, #0]
 8007a02:	2331      	movs	r3, #49	; 0x31
 8007a04:	f805 3b01 	strb.w	r3, [r5], #1
 8007a08:	f10a 0a01 	add.w	sl, sl, #1
 8007a0c:	e23f      	b.n	8007e8e <_dtoa_r+0x95e>
 8007a0e:	07f2      	lsls	r2, r6, #31
 8007a10:	d505      	bpl.n	8007a1e <_dtoa_r+0x4ee>
 8007a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a16:	f7f8 fe0f 	bl	8000638 <__aeabi_dmul>
 8007a1a:	3501      	adds	r5, #1
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	1076      	asrs	r6, r6, #1
 8007a20:	3708      	adds	r7, #8
 8007a22:	e76c      	b.n	80078fe <_dtoa_r+0x3ce>
 8007a24:	2502      	movs	r5, #2
 8007a26:	e76f      	b.n	8007908 <_dtoa_r+0x3d8>
 8007a28:	9b01      	ldr	r3, [sp, #4]
 8007a2a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8007a30:	e78d      	b.n	800794e <_dtoa_r+0x41e>
 8007a32:	9900      	ldr	r1, [sp, #0]
 8007a34:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a38:	4b4e      	ldr	r3, [pc, #312]	; (8007b74 <_dtoa_r+0x644>)
 8007a3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a3e:	4401      	add	r1, r0
 8007a40:	9102      	str	r1, [sp, #8]
 8007a42:	9908      	ldr	r1, [sp, #32]
 8007a44:	eeb0 8a47 	vmov.f32	s16, s14
 8007a48:	eef0 8a67 	vmov.f32	s17, s15
 8007a4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a54:	2900      	cmp	r1, #0
 8007a56:	d045      	beq.n	8007ae4 <_dtoa_r+0x5b4>
 8007a58:	494c      	ldr	r1, [pc, #304]	; (8007b8c <_dtoa_r+0x65c>)
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	f7f8 ff16 	bl	800088c <__aeabi_ddiv>
 8007a60:	ec53 2b18 	vmov	r2, r3, d8
 8007a64:	f7f8 fc30 	bl	80002c8 <__aeabi_dsub>
 8007a68:	9d00      	ldr	r5, [sp, #0]
 8007a6a:	ec41 0b18 	vmov	d8, r0, r1
 8007a6e:	4639      	mov	r1, r7
 8007a70:	4630      	mov	r0, r6
 8007a72:	f7f9 f891 	bl	8000b98 <__aeabi_d2iz>
 8007a76:	900c      	str	r0, [sp, #48]	; 0x30
 8007a78:	f7f8 fd74 	bl	8000564 <__aeabi_i2d>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4630      	mov	r0, r6
 8007a82:	4639      	mov	r1, r7
 8007a84:	f7f8 fc20 	bl	80002c8 <__aeabi_dsub>
 8007a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a8a:	3330      	adds	r3, #48	; 0x30
 8007a8c:	f805 3b01 	strb.w	r3, [r5], #1
 8007a90:	ec53 2b18 	vmov	r2, r3, d8
 8007a94:	4606      	mov	r6, r0
 8007a96:	460f      	mov	r7, r1
 8007a98:	f7f9 f840 	bl	8000b1c <__aeabi_dcmplt>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d165      	bne.n	8007b6c <_dtoa_r+0x63c>
 8007aa0:	4632      	mov	r2, r6
 8007aa2:	463b      	mov	r3, r7
 8007aa4:	4935      	ldr	r1, [pc, #212]	; (8007b7c <_dtoa_r+0x64c>)
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	f7f8 fc0e 	bl	80002c8 <__aeabi_dsub>
 8007aac:	ec53 2b18 	vmov	r2, r3, d8
 8007ab0:	f7f9 f834 	bl	8000b1c <__aeabi_dcmplt>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	f040 80b9 	bne.w	8007c2c <_dtoa_r+0x6fc>
 8007aba:	9b02      	ldr	r3, [sp, #8]
 8007abc:	429d      	cmp	r5, r3
 8007abe:	f43f af75 	beq.w	80079ac <_dtoa_r+0x47c>
 8007ac2:	4b2f      	ldr	r3, [pc, #188]	; (8007b80 <_dtoa_r+0x650>)
 8007ac4:	ec51 0b18 	vmov	r0, r1, d8
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f7f8 fdb5 	bl	8000638 <__aeabi_dmul>
 8007ace:	4b2c      	ldr	r3, [pc, #176]	; (8007b80 <_dtoa_r+0x650>)
 8007ad0:	ec41 0b18 	vmov	d8, r0, r1
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	4639      	mov	r1, r7
 8007ada:	f7f8 fdad 	bl	8000638 <__aeabi_dmul>
 8007ade:	4606      	mov	r6, r0
 8007ae0:	460f      	mov	r7, r1
 8007ae2:	e7c4      	b.n	8007a6e <_dtoa_r+0x53e>
 8007ae4:	ec51 0b17 	vmov	r0, r1, d7
 8007ae8:	f7f8 fda6 	bl	8000638 <__aeabi_dmul>
 8007aec:	9b02      	ldr	r3, [sp, #8]
 8007aee:	9d00      	ldr	r5, [sp, #0]
 8007af0:	930c      	str	r3, [sp, #48]	; 0x30
 8007af2:	ec41 0b18 	vmov	d8, r0, r1
 8007af6:	4639      	mov	r1, r7
 8007af8:	4630      	mov	r0, r6
 8007afa:	f7f9 f84d 	bl	8000b98 <__aeabi_d2iz>
 8007afe:	9011      	str	r0, [sp, #68]	; 0x44
 8007b00:	f7f8 fd30 	bl	8000564 <__aeabi_i2d>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4630      	mov	r0, r6
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	f7f8 fbdc 	bl	80002c8 <__aeabi_dsub>
 8007b10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b12:	3330      	adds	r3, #48	; 0x30
 8007b14:	f805 3b01 	strb.w	r3, [r5], #1
 8007b18:	9b02      	ldr	r3, [sp, #8]
 8007b1a:	429d      	cmp	r5, r3
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	460f      	mov	r7, r1
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	d134      	bne.n	8007b90 <_dtoa_r+0x660>
 8007b26:	4b19      	ldr	r3, [pc, #100]	; (8007b8c <_dtoa_r+0x65c>)
 8007b28:	ec51 0b18 	vmov	r0, r1, d8
 8007b2c:	f7f8 fbce 	bl	80002cc <__adddf3>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4630      	mov	r0, r6
 8007b36:	4639      	mov	r1, r7
 8007b38:	f7f9 f80e 	bl	8000b58 <__aeabi_dcmpgt>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d175      	bne.n	8007c2c <_dtoa_r+0x6fc>
 8007b40:	ec53 2b18 	vmov	r2, r3, d8
 8007b44:	4911      	ldr	r1, [pc, #68]	; (8007b8c <_dtoa_r+0x65c>)
 8007b46:	2000      	movs	r0, #0
 8007b48:	f7f8 fbbe 	bl	80002c8 <__aeabi_dsub>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4630      	mov	r0, r6
 8007b52:	4639      	mov	r1, r7
 8007b54:	f7f8 ffe2 	bl	8000b1c <__aeabi_dcmplt>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	f43f af27 	beq.w	80079ac <_dtoa_r+0x47c>
 8007b5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b60:	1e6b      	subs	r3, r5, #1
 8007b62:	930c      	str	r3, [sp, #48]	; 0x30
 8007b64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b68:	2b30      	cmp	r3, #48	; 0x30
 8007b6a:	d0f8      	beq.n	8007b5e <_dtoa_r+0x62e>
 8007b6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007b70:	e04a      	b.n	8007c08 <_dtoa_r+0x6d8>
 8007b72:	bf00      	nop
 8007b74:	080096b8 	.word	0x080096b8
 8007b78:	08009690 	.word	0x08009690
 8007b7c:	3ff00000 	.word	0x3ff00000
 8007b80:	40240000 	.word	0x40240000
 8007b84:	401c0000 	.word	0x401c0000
 8007b88:	40140000 	.word	0x40140000
 8007b8c:	3fe00000 	.word	0x3fe00000
 8007b90:	4baf      	ldr	r3, [pc, #700]	; (8007e50 <_dtoa_r+0x920>)
 8007b92:	f7f8 fd51 	bl	8000638 <__aeabi_dmul>
 8007b96:	4606      	mov	r6, r0
 8007b98:	460f      	mov	r7, r1
 8007b9a:	e7ac      	b.n	8007af6 <_dtoa_r+0x5c6>
 8007b9c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ba0:	9d00      	ldr	r5, [sp, #0]
 8007ba2:	4642      	mov	r2, r8
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	4639      	mov	r1, r7
 8007baa:	f7f8 fe6f 	bl	800088c <__aeabi_ddiv>
 8007bae:	f7f8 fff3 	bl	8000b98 <__aeabi_d2iz>
 8007bb2:	9002      	str	r0, [sp, #8]
 8007bb4:	f7f8 fcd6 	bl	8000564 <__aeabi_i2d>
 8007bb8:	4642      	mov	r2, r8
 8007bba:	464b      	mov	r3, r9
 8007bbc:	f7f8 fd3c 	bl	8000638 <__aeabi_dmul>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	4639      	mov	r1, r7
 8007bc8:	f7f8 fb7e 	bl	80002c8 <__aeabi_dsub>
 8007bcc:	9e02      	ldr	r6, [sp, #8]
 8007bce:	9f01      	ldr	r7, [sp, #4]
 8007bd0:	3630      	adds	r6, #48	; 0x30
 8007bd2:	f805 6b01 	strb.w	r6, [r5], #1
 8007bd6:	9e00      	ldr	r6, [sp, #0]
 8007bd8:	1bae      	subs	r6, r5, r6
 8007bda:	42b7      	cmp	r7, r6
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	d137      	bne.n	8007c52 <_dtoa_r+0x722>
 8007be2:	f7f8 fb73 	bl	80002cc <__adddf3>
 8007be6:	4642      	mov	r2, r8
 8007be8:	464b      	mov	r3, r9
 8007bea:	4606      	mov	r6, r0
 8007bec:	460f      	mov	r7, r1
 8007bee:	f7f8 ffb3 	bl	8000b58 <__aeabi_dcmpgt>
 8007bf2:	b9c8      	cbnz	r0, 8007c28 <_dtoa_r+0x6f8>
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	464b      	mov	r3, r9
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	f7f8 ff84 	bl	8000b08 <__aeabi_dcmpeq>
 8007c00:	b110      	cbz	r0, 8007c08 <_dtoa_r+0x6d8>
 8007c02:	9b02      	ldr	r3, [sp, #8]
 8007c04:	07d9      	lsls	r1, r3, #31
 8007c06:	d40f      	bmi.n	8007c28 <_dtoa_r+0x6f8>
 8007c08:	4620      	mov	r0, r4
 8007c0a:	4659      	mov	r1, fp
 8007c0c:	f000 fcf6 	bl	80085fc <_Bfree>
 8007c10:	2300      	movs	r3, #0
 8007c12:	702b      	strb	r3, [r5, #0]
 8007c14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c16:	f10a 0001 	add.w	r0, sl, #1
 8007c1a:	6018      	str	r0, [r3, #0]
 8007c1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f43f acd8 	beq.w	80075d4 <_dtoa_r+0xa4>
 8007c24:	601d      	str	r5, [r3, #0]
 8007c26:	e4d5      	b.n	80075d4 <_dtoa_r+0xa4>
 8007c28:	f8cd a01c 	str.w	sl, [sp, #28]
 8007c2c:	462b      	mov	r3, r5
 8007c2e:	461d      	mov	r5, r3
 8007c30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c34:	2a39      	cmp	r2, #57	; 0x39
 8007c36:	d108      	bne.n	8007c4a <_dtoa_r+0x71a>
 8007c38:	9a00      	ldr	r2, [sp, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d1f7      	bne.n	8007c2e <_dtoa_r+0x6fe>
 8007c3e:	9a07      	ldr	r2, [sp, #28]
 8007c40:	9900      	ldr	r1, [sp, #0]
 8007c42:	3201      	adds	r2, #1
 8007c44:	9207      	str	r2, [sp, #28]
 8007c46:	2230      	movs	r2, #48	; 0x30
 8007c48:	700a      	strb	r2, [r1, #0]
 8007c4a:	781a      	ldrb	r2, [r3, #0]
 8007c4c:	3201      	adds	r2, #1
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	e78c      	b.n	8007b6c <_dtoa_r+0x63c>
 8007c52:	4b7f      	ldr	r3, [pc, #508]	; (8007e50 <_dtoa_r+0x920>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	f7f8 fcef 	bl	8000638 <__aeabi_dmul>
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4606      	mov	r6, r0
 8007c60:	460f      	mov	r7, r1
 8007c62:	f7f8 ff51 	bl	8000b08 <__aeabi_dcmpeq>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d09b      	beq.n	8007ba2 <_dtoa_r+0x672>
 8007c6a:	e7cd      	b.n	8007c08 <_dtoa_r+0x6d8>
 8007c6c:	9a08      	ldr	r2, [sp, #32]
 8007c6e:	2a00      	cmp	r2, #0
 8007c70:	f000 80c4 	beq.w	8007dfc <_dtoa_r+0x8cc>
 8007c74:	9a05      	ldr	r2, [sp, #20]
 8007c76:	2a01      	cmp	r2, #1
 8007c78:	f300 80a8 	bgt.w	8007dcc <_dtoa_r+0x89c>
 8007c7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	f000 80a0 	beq.w	8007dc4 <_dtoa_r+0x894>
 8007c84:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c88:	9e06      	ldr	r6, [sp, #24]
 8007c8a:	4645      	mov	r5, r8
 8007c8c:	9a04      	ldr	r2, [sp, #16]
 8007c8e:	2101      	movs	r1, #1
 8007c90:	441a      	add	r2, r3
 8007c92:	4620      	mov	r0, r4
 8007c94:	4498      	add	r8, r3
 8007c96:	9204      	str	r2, [sp, #16]
 8007c98:	f000 fd6c 	bl	8008774 <__i2b>
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	2d00      	cmp	r5, #0
 8007ca0:	dd0b      	ble.n	8007cba <_dtoa_r+0x78a>
 8007ca2:	9b04      	ldr	r3, [sp, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	dd08      	ble.n	8007cba <_dtoa_r+0x78a>
 8007ca8:	42ab      	cmp	r3, r5
 8007caa:	9a04      	ldr	r2, [sp, #16]
 8007cac:	bfa8      	it	ge
 8007cae:	462b      	movge	r3, r5
 8007cb0:	eba8 0803 	sub.w	r8, r8, r3
 8007cb4:	1aed      	subs	r5, r5, r3
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	9304      	str	r3, [sp, #16]
 8007cba:	9b06      	ldr	r3, [sp, #24]
 8007cbc:	b1fb      	cbz	r3, 8007cfe <_dtoa_r+0x7ce>
 8007cbe:	9b08      	ldr	r3, [sp, #32]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 809f 	beq.w	8007e04 <_dtoa_r+0x8d4>
 8007cc6:	2e00      	cmp	r6, #0
 8007cc8:	dd11      	ble.n	8007cee <_dtoa_r+0x7be>
 8007cca:	4639      	mov	r1, r7
 8007ccc:	4632      	mov	r2, r6
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f000 fe0c 	bl	80088ec <__pow5mult>
 8007cd4:	465a      	mov	r2, fp
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	4607      	mov	r7, r0
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 fd60 	bl	80087a0 <__multiply>
 8007ce0:	4659      	mov	r1, fp
 8007ce2:	9007      	str	r0, [sp, #28]
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f000 fc89 	bl	80085fc <_Bfree>
 8007cea:	9b07      	ldr	r3, [sp, #28]
 8007cec:	469b      	mov	fp, r3
 8007cee:	9b06      	ldr	r3, [sp, #24]
 8007cf0:	1b9a      	subs	r2, r3, r6
 8007cf2:	d004      	beq.n	8007cfe <_dtoa_r+0x7ce>
 8007cf4:	4659      	mov	r1, fp
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f000 fdf8 	bl	80088ec <__pow5mult>
 8007cfc:	4683      	mov	fp, r0
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4620      	mov	r0, r4
 8007d02:	f000 fd37 	bl	8008774 <__i2b>
 8007d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	4606      	mov	r6, r0
 8007d0c:	dd7c      	ble.n	8007e08 <_dtoa_r+0x8d8>
 8007d0e:	461a      	mov	r2, r3
 8007d10:	4601      	mov	r1, r0
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 fdea 	bl	80088ec <__pow5mult>
 8007d18:	9b05      	ldr	r3, [sp, #20]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	dd76      	ble.n	8007e0e <_dtoa_r+0x8de>
 8007d20:	2300      	movs	r3, #0
 8007d22:	9306      	str	r3, [sp, #24]
 8007d24:	6933      	ldr	r3, [r6, #16]
 8007d26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d2a:	6918      	ldr	r0, [r3, #16]
 8007d2c:	f000 fcd2 	bl	80086d4 <__hi0bits>
 8007d30:	f1c0 0020 	rsb	r0, r0, #32
 8007d34:	9b04      	ldr	r3, [sp, #16]
 8007d36:	4418      	add	r0, r3
 8007d38:	f010 001f 	ands.w	r0, r0, #31
 8007d3c:	f000 8086 	beq.w	8007e4c <_dtoa_r+0x91c>
 8007d40:	f1c0 0320 	rsb	r3, r0, #32
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	dd7f      	ble.n	8007e48 <_dtoa_r+0x918>
 8007d48:	f1c0 001c 	rsb	r0, r0, #28
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	4403      	add	r3, r0
 8007d50:	4480      	add	r8, r0
 8007d52:	4405      	add	r5, r0
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	f1b8 0f00 	cmp.w	r8, #0
 8007d5a:	dd05      	ble.n	8007d68 <_dtoa_r+0x838>
 8007d5c:	4659      	mov	r1, fp
 8007d5e:	4642      	mov	r2, r8
 8007d60:	4620      	mov	r0, r4
 8007d62:	f000 fe1d 	bl	80089a0 <__lshift>
 8007d66:	4683      	mov	fp, r0
 8007d68:	9b04      	ldr	r3, [sp, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	dd05      	ble.n	8007d7a <_dtoa_r+0x84a>
 8007d6e:	4631      	mov	r1, r6
 8007d70:	461a      	mov	r2, r3
 8007d72:	4620      	mov	r0, r4
 8007d74:	f000 fe14 	bl	80089a0 <__lshift>
 8007d78:	4606      	mov	r6, r0
 8007d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d069      	beq.n	8007e54 <_dtoa_r+0x924>
 8007d80:	4631      	mov	r1, r6
 8007d82:	4658      	mov	r0, fp
 8007d84:	f000 fe78 	bl	8008a78 <__mcmp>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	da63      	bge.n	8007e54 <_dtoa_r+0x924>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4659      	mov	r1, fp
 8007d90:	220a      	movs	r2, #10
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 fc54 	bl	8008640 <__multadd>
 8007d98:	9b08      	ldr	r3, [sp, #32]
 8007d9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d9e:	4683      	mov	fp, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 818f 	beq.w	80080c4 <_dtoa_r+0xb94>
 8007da6:	4639      	mov	r1, r7
 8007da8:	2300      	movs	r3, #0
 8007daa:	220a      	movs	r2, #10
 8007dac:	4620      	mov	r0, r4
 8007dae:	f000 fc47 	bl	8008640 <__multadd>
 8007db2:	f1b9 0f00 	cmp.w	r9, #0
 8007db6:	4607      	mov	r7, r0
 8007db8:	f300 808e 	bgt.w	8007ed8 <_dtoa_r+0x9a8>
 8007dbc:	9b05      	ldr	r3, [sp, #20]
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	dc50      	bgt.n	8007e64 <_dtoa_r+0x934>
 8007dc2:	e089      	b.n	8007ed8 <_dtoa_r+0x9a8>
 8007dc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007dca:	e75d      	b.n	8007c88 <_dtoa_r+0x758>
 8007dcc:	9b01      	ldr	r3, [sp, #4]
 8007dce:	1e5e      	subs	r6, r3, #1
 8007dd0:	9b06      	ldr	r3, [sp, #24]
 8007dd2:	42b3      	cmp	r3, r6
 8007dd4:	bfbf      	itttt	lt
 8007dd6:	9b06      	ldrlt	r3, [sp, #24]
 8007dd8:	9606      	strlt	r6, [sp, #24]
 8007dda:	1af2      	sublt	r2, r6, r3
 8007ddc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007dde:	bfb6      	itet	lt
 8007de0:	189b      	addlt	r3, r3, r2
 8007de2:	1b9e      	subge	r6, r3, r6
 8007de4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	bfb8      	it	lt
 8007dea:	2600      	movlt	r6, #0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bfb5      	itete	lt
 8007df0:	eba8 0503 	sublt.w	r5, r8, r3
 8007df4:	9b01      	ldrge	r3, [sp, #4]
 8007df6:	2300      	movlt	r3, #0
 8007df8:	4645      	movge	r5, r8
 8007dfa:	e747      	b.n	8007c8c <_dtoa_r+0x75c>
 8007dfc:	9e06      	ldr	r6, [sp, #24]
 8007dfe:	9f08      	ldr	r7, [sp, #32]
 8007e00:	4645      	mov	r5, r8
 8007e02:	e74c      	b.n	8007c9e <_dtoa_r+0x76e>
 8007e04:	9a06      	ldr	r2, [sp, #24]
 8007e06:	e775      	b.n	8007cf4 <_dtoa_r+0x7c4>
 8007e08:	9b05      	ldr	r3, [sp, #20]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	dc18      	bgt.n	8007e40 <_dtoa_r+0x910>
 8007e0e:	9b02      	ldr	r3, [sp, #8]
 8007e10:	b9b3      	cbnz	r3, 8007e40 <_dtoa_r+0x910>
 8007e12:	9b03      	ldr	r3, [sp, #12]
 8007e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e18:	b9a3      	cbnz	r3, 8007e44 <_dtoa_r+0x914>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e20:	0d1b      	lsrs	r3, r3, #20
 8007e22:	051b      	lsls	r3, r3, #20
 8007e24:	b12b      	cbz	r3, 8007e32 <_dtoa_r+0x902>
 8007e26:	9b04      	ldr	r3, [sp, #16]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	9304      	str	r3, [sp, #16]
 8007e2c:	f108 0801 	add.w	r8, r8, #1
 8007e30:	2301      	movs	r3, #1
 8007e32:	9306      	str	r3, [sp, #24]
 8007e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f47f af74 	bne.w	8007d24 <_dtoa_r+0x7f4>
 8007e3c:	2001      	movs	r0, #1
 8007e3e:	e779      	b.n	8007d34 <_dtoa_r+0x804>
 8007e40:	2300      	movs	r3, #0
 8007e42:	e7f6      	b.n	8007e32 <_dtoa_r+0x902>
 8007e44:	9b02      	ldr	r3, [sp, #8]
 8007e46:	e7f4      	b.n	8007e32 <_dtoa_r+0x902>
 8007e48:	d085      	beq.n	8007d56 <_dtoa_r+0x826>
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	301c      	adds	r0, #28
 8007e4e:	e77d      	b.n	8007d4c <_dtoa_r+0x81c>
 8007e50:	40240000 	.word	0x40240000
 8007e54:	9b01      	ldr	r3, [sp, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	dc38      	bgt.n	8007ecc <_dtoa_r+0x99c>
 8007e5a:	9b05      	ldr	r3, [sp, #20]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	dd35      	ble.n	8007ecc <_dtoa_r+0x99c>
 8007e60:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007e64:	f1b9 0f00 	cmp.w	r9, #0
 8007e68:	d10d      	bne.n	8007e86 <_dtoa_r+0x956>
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	464b      	mov	r3, r9
 8007e6e:	2205      	movs	r2, #5
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 fbe5 	bl	8008640 <__multadd>
 8007e76:	4601      	mov	r1, r0
 8007e78:	4606      	mov	r6, r0
 8007e7a:	4658      	mov	r0, fp
 8007e7c:	f000 fdfc 	bl	8008a78 <__mcmp>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	f73f adbd 	bgt.w	8007a00 <_dtoa_r+0x4d0>
 8007e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e88:	9d00      	ldr	r5, [sp, #0]
 8007e8a:	ea6f 0a03 	mvn.w	sl, r3
 8007e8e:	f04f 0800 	mov.w	r8, #0
 8007e92:	4631      	mov	r1, r6
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 fbb1 	bl	80085fc <_Bfree>
 8007e9a:	2f00      	cmp	r7, #0
 8007e9c:	f43f aeb4 	beq.w	8007c08 <_dtoa_r+0x6d8>
 8007ea0:	f1b8 0f00 	cmp.w	r8, #0
 8007ea4:	d005      	beq.n	8007eb2 <_dtoa_r+0x982>
 8007ea6:	45b8      	cmp	r8, r7
 8007ea8:	d003      	beq.n	8007eb2 <_dtoa_r+0x982>
 8007eaa:	4641      	mov	r1, r8
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 fba5 	bl	80085fc <_Bfree>
 8007eb2:	4639      	mov	r1, r7
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f000 fba1 	bl	80085fc <_Bfree>
 8007eba:	e6a5      	b.n	8007c08 <_dtoa_r+0x6d8>
 8007ebc:	2600      	movs	r6, #0
 8007ebe:	4637      	mov	r7, r6
 8007ec0:	e7e1      	b.n	8007e86 <_dtoa_r+0x956>
 8007ec2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ec4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007ec8:	4637      	mov	r7, r6
 8007eca:	e599      	b.n	8007a00 <_dtoa_r+0x4d0>
 8007ecc:	9b08      	ldr	r3, [sp, #32]
 8007ece:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80fd 	beq.w	80080d2 <_dtoa_r+0xba2>
 8007ed8:	2d00      	cmp	r5, #0
 8007eda:	dd05      	ble.n	8007ee8 <_dtoa_r+0x9b8>
 8007edc:	4639      	mov	r1, r7
 8007ede:	462a      	mov	r2, r5
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f000 fd5d 	bl	80089a0 <__lshift>
 8007ee6:	4607      	mov	r7, r0
 8007ee8:	9b06      	ldr	r3, [sp, #24]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d05c      	beq.n	8007fa8 <_dtoa_r+0xa78>
 8007eee:	6879      	ldr	r1, [r7, #4]
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 fb43 	bl	800857c <_Balloc>
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	b928      	cbnz	r0, 8007f06 <_dtoa_r+0x9d6>
 8007efa:	4b80      	ldr	r3, [pc, #512]	; (80080fc <_dtoa_r+0xbcc>)
 8007efc:	4602      	mov	r2, r0
 8007efe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007f02:	f7ff bb2e 	b.w	8007562 <_dtoa_r+0x32>
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	3202      	adds	r2, #2
 8007f0a:	0092      	lsls	r2, r2, #2
 8007f0c:	f107 010c 	add.w	r1, r7, #12
 8007f10:	300c      	adds	r0, #12
 8007f12:	f000 fb25 	bl	8008560 <memcpy>
 8007f16:	2201      	movs	r2, #1
 8007f18:	4629      	mov	r1, r5
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 fd40 	bl	80089a0 <__lshift>
 8007f20:	9b00      	ldr	r3, [sp, #0]
 8007f22:	3301      	adds	r3, #1
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	9b00      	ldr	r3, [sp, #0]
 8007f28:	444b      	add	r3, r9
 8007f2a:	9307      	str	r3, [sp, #28]
 8007f2c:	9b02      	ldr	r3, [sp, #8]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	46b8      	mov	r8, r7
 8007f34:	9306      	str	r3, [sp, #24]
 8007f36:	4607      	mov	r7, r0
 8007f38:	9b01      	ldr	r3, [sp, #4]
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	4658      	mov	r0, fp
 8007f40:	9302      	str	r3, [sp, #8]
 8007f42:	f7ff fa67 	bl	8007414 <quorem>
 8007f46:	4603      	mov	r3, r0
 8007f48:	3330      	adds	r3, #48	; 0x30
 8007f4a:	9004      	str	r0, [sp, #16]
 8007f4c:	4641      	mov	r1, r8
 8007f4e:	4658      	mov	r0, fp
 8007f50:	9308      	str	r3, [sp, #32]
 8007f52:	f000 fd91 	bl	8008a78 <__mcmp>
 8007f56:	463a      	mov	r2, r7
 8007f58:	4681      	mov	r9, r0
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f000 fda7 	bl	8008ab0 <__mdiff>
 8007f62:	68c2      	ldr	r2, [r0, #12]
 8007f64:	9b08      	ldr	r3, [sp, #32]
 8007f66:	4605      	mov	r5, r0
 8007f68:	bb02      	cbnz	r2, 8007fac <_dtoa_r+0xa7c>
 8007f6a:	4601      	mov	r1, r0
 8007f6c:	4658      	mov	r0, fp
 8007f6e:	f000 fd83 	bl	8008a78 <__mcmp>
 8007f72:	9b08      	ldr	r3, [sp, #32]
 8007f74:	4602      	mov	r2, r0
 8007f76:	4629      	mov	r1, r5
 8007f78:	4620      	mov	r0, r4
 8007f7a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007f7e:	f000 fb3d 	bl	80085fc <_Bfree>
 8007f82:	9b05      	ldr	r3, [sp, #20]
 8007f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f86:	9d01      	ldr	r5, [sp, #4]
 8007f88:	ea43 0102 	orr.w	r1, r3, r2
 8007f8c:	9b06      	ldr	r3, [sp, #24]
 8007f8e:	430b      	orrs	r3, r1
 8007f90:	9b08      	ldr	r3, [sp, #32]
 8007f92:	d10d      	bne.n	8007fb0 <_dtoa_r+0xa80>
 8007f94:	2b39      	cmp	r3, #57	; 0x39
 8007f96:	d029      	beq.n	8007fec <_dtoa_r+0xabc>
 8007f98:	f1b9 0f00 	cmp.w	r9, #0
 8007f9c:	dd01      	ble.n	8007fa2 <_dtoa_r+0xa72>
 8007f9e:	9b04      	ldr	r3, [sp, #16]
 8007fa0:	3331      	adds	r3, #49	; 0x31
 8007fa2:	9a02      	ldr	r2, [sp, #8]
 8007fa4:	7013      	strb	r3, [r2, #0]
 8007fa6:	e774      	b.n	8007e92 <_dtoa_r+0x962>
 8007fa8:	4638      	mov	r0, r7
 8007faa:	e7b9      	b.n	8007f20 <_dtoa_r+0x9f0>
 8007fac:	2201      	movs	r2, #1
 8007fae:	e7e2      	b.n	8007f76 <_dtoa_r+0xa46>
 8007fb0:	f1b9 0f00 	cmp.w	r9, #0
 8007fb4:	db06      	blt.n	8007fc4 <_dtoa_r+0xa94>
 8007fb6:	9905      	ldr	r1, [sp, #20]
 8007fb8:	ea41 0909 	orr.w	r9, r1, r9
 8007fbc:	9906      	ldr	r1, [sp, #24]
 8007fbe:	ea59 0101 	orrs.w	r1, r9, r1
 8007fc2:	d120      	bne.n	8008006 <_dtoa_r+0xad6>
 8007fc4:	2a00      	cmp	r2, #0
 8007fc6:	ddec      	ble.n	8007fa2 <_dtoa_r+0xa72>
 8007fc8:	4659      	mov	r1, fp
 8007fca:	2201      	movs	r2, #1
 8007fcc:	4620      	mov	r0, r4
 8007fce:	9301      	str	r3, [sp, #4]
 8007fd0:	f000 fce6 	bl	80089a0 <__lshift>
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4683      	mov	fp, r0
 8007fd8:	f000 fd4e 	bl	8008a78 <__mcmp>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	9b01      	ldr	r3, [sp, #4]
 8007fe0:	dc02      	bgt.n	8007fe8 <_dtoa_r+0xab8>
 8007fe2:	d1de      	bne.n	8007fa2 <_dtoa_r+0xa72>
 8007fe4:	07da      	lsls	r2, r3, #31
 8007fe6:	d5dc      	bpl.n	8007fa2 <_dtoa_r+0xa72>
 8007fe8:	2b39      	cmp	r3, #57	; 0x39
 8007fea:	d1d8      	bne.n	8007f9e <_dtoa_r+0xa6e>
 8007fec:	9a02      	ldr	r2, [sp, #8]
 8007fee:	2339      	movs	r3, #57	; 0x39
 8007ff0:	7013      	strb	r3, [r2, #0]
 8007ff2:	462b      	mov	r3, r5
 8007ff4:	461d      	mov	r5, r3
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ffc:	2a39      	cmp	r2, #57	; 0x39
 8007ffe:	d050      	beq.n	80080a2 <_dtoa_r+0xb72>
 8008000:	3201      	adds	r2, #1
 8008002:	701a      	strb	r2, [r3, #0]
 8008004:	e745      	b.n	8007e92 <_dtoa_r+0x962>
 8008006:	2a00      	cmp	r2, #0
 8008008:	dd03      	ble.n	8008012 <_dtoa_r+0xae2>
 800800a:	2b39      	cmp	r3, #57	; 0x39
 800800c:	d0ee      	beq.n	8007fec <_dtoa_r+0xabc>
 800800e:	3301      	adds	r3, #1
 8008010:	e7c7      	b.n	8007fa2 <_dtoa_r+0xa72>
 8008012:	9a01      	ldr	r2, [sp, #4]
 8008014:	9907      	ldr	r1, [sp, #28]
 8008016:	f802 3c01 	strb.w	r3, [r2, #-1]
 800801a:	428a      	cmp	r2, r1
 800801c:	d02a      	beq.n	8008074 <_dtoa_r+0xb44>
 800801e:	4659      	mov	r1, fp
 8008020:	2300      	movs	r3, #0
 8008022:	220a      	movs	r2, #10
 8008024:	4620      	mov	r0, r4
 8008026:	f000 fb0b 	bl	8008640 <__multadd>
 800802a:	45b8      	cmp	r8, r7
 800802c:	4683      	mov	fp, r0
 800802e:	f04f 0300 	mov.w	r3, #0
 8008032:	f04f 020a 	mov.w	r2, #10
 8008036:	4641      	mov	r1, r8
 8008038:	4620      	mov	r0, r4
 800803a:	d107      	bne.n	800804c <_dtoa_r+0xb1c>
 800803c:	f000 fb00 	bl	8008640 <__multadd>
 8008040:	4680      	mov	r8, r0
 8008042:	4607      	mov	r7, r0
 8008044:	9b01      	ldr	r3, [sp, #4]
 8008046:	3301      	adds	r3, #1
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	e775      	b.n	8007f38 <_dtoa_r+0xa08>
 800804c:	f000 faf8 	bl	8008640 <__multadd>
 8008050:	4639      	mov	r1, r7
 8008052:	4680      	mov	r8, r0
 8008054:	2300      	movs	r3, #0
 8008056:	220a      	movs	r2, #10
 8008058:	4620      	mov	r0, r4
 800805a:	f000 faf1 	bl	8008640 <__multadd>
 800805e:	4607      	mov	r7, r0
 8008060:	e7f0      	b.n	8008044 <_dtoa_r+0xb14>
 8008062:	f1b9 0f00 	cmp.w	r9, #0
 8008066:	9a00      	ldr	r2, [sp, #0]
 8008068:	bfcc      	ite	gt
 800806a:	464d      	movgt	r5, r9
 800806c:	2501      	movle	r5, #1
 800806e:	4415      	add	r5, r2
 8008070:	f04f 0800 	mov.w	r8, #0
 8008074:	4659      	mov	r1, fp
 8008076:	2201      	movs	r2, #1
 8008078:	4620      	mov	r0, r4
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	f000 fc90 	bl	80089a0 <__lshift>
 8008080:	4631      	mov	r1, r6
 8008082:	4683      	mov	fp, r0
 8008084:	f000 fcf8 	bl	8008a78 <__mcmp>
 8008088:	2800      	cmp	r0, #0
 800808a:	dcb2      	bgt.n	8007ff2 <_dtoa_r+0xac2>
 800808c:	d102      	bne.n	8008094 <_dtoa_r+0xb64>
 800808e:	9b01      	ldr	r3, [sp, #4]
 8008090:	07db      	lsls	r3, r3, #31
 8008092:	d4ae      	bmi.n	8007ff2 <_dtoa_r+0xac2>
 8008094:	462b      	mov	r3, r5
 8008096:	461d      	mov	r5, r3
 8008098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800809c:	2a30      	cmp	r2, #48	; 0x30
 800809e:	d0fa      	beq.n	8008096 <_dtoa_r+0xb66>
 80080a0:	e6f7      	b.n	8007e92 <_dtoa_r+0x962>
 80080a2:	9a00      	ldr	r2, [sp, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d1a5      	bne.n	8007ff4 <_dtoa_r+0xac4>
 80080a8:	f10a 0a01 	add.w	sl, sl, #1
 80080ac:	2331      	movs	r3, #49	; 0x31
 80080ae:	e779      	b.n	8007fa4 <_dtoa_r+0xa74>
 80080b0:	4b13      	ldr	r3, [pc, #76]	; (8008100 <_dtoa_r+0xbd0>)
 80080b2:	f7ff baaf 	b.w	8007614 <_dtoa_r+0xe4>
 80080b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f47f aa86 	bne.w	80075ca <_dtoa_r+0x9a>
 80080be:	4b11      	ldr	r3, [pc, #68]	; (8008104 <_dtoa_r+0xbd4>)
 80080c0:	f7ff baa8 	b.w	8007614 <_dtoa_r+0xe4>
 80080c4:	f1b9 0f00 	cmp.w	r9, #0
 80080c8:	dc03      	bgt.n	80080d2 <_dtoa_r+0xba2>
 80080ca:	9b05      	ldr	r3, [sp, #20]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	f73f aec9 	bgt.w	8007e64 <_dtoa_r+0x934>
 80080d2:	9d00      	ldr	r5, [sp, #0]
 80080d4:	4631      	mov	r1, r6
 80080d6:	4658      	mov	r0, fp
 80080d8:	f7ff f99c 	bl	8007414 <quorem>
 80080dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80080e0:	f805 3b01 	strb.w	r3, [r5], #1
 80080e4:	9a00      	ldr	r2, [sp, #0]
 80080e6:	1aaa      	subs	r2, r5, r2
 80080e8:	4591      	cmp	r9, r2
 80080ea:	ddba      	ble.n	8008062 <_dtoa_r+0xb32>
 80080ec:	4659      	mov	r1, fp
 80080ee:	2300      	movs	r3, #0
 80080f0:	220a      	movs	r2, #10
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 faa4 	bl	8008640 <__multadd>
 80080f8:	4683      	mov	fp, r0
 80080fa:	e7eb      	b.n	80080d4 <_dtoa_r+0xba4>
 80080fc:	080095bb 	.word	0x080095bb
 8008100:	08009514 	.word	0x08009514
 8008104:	08009538 	.word	0x08009538

08008108 <__sflush_r>:
 8008108:	898a      	ldrh	r2, [r1, #12]
 800810a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810e:	4605      	mov	r5, r0
 8008110:	0710      	lsls	r0, r2, #28
 8008112:	460c      	mov	r4, r1
 8008114:	d458      	bmi.n	80081c8 <__sflush_r+0xc0>
 8008116:	684b      	ldr	r3, [r1, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	dc05      	bgt.n	8008128 <__sflush_r+0x20>
 800811c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800811e:	2b00      	cmp	r3, #0
 8008120:	dc02      	bgt.n	8008128 <__sflush_r+0x20>
 8008122:	2000      	movs	r0, #0
 8008124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800812a:	2e00      	cmp	r6, #0
 800812c:	d0f9      	beq.n	8008122 <__sflush_r+0x1a>
 800812e:	2300      	movs	r3, #0
 8008130:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008134:	682f      	ldr	r7, [r5, #0]
 8008136:	602b      	str	r3, [r5, #0]
 8008138:	d032      	beq.n	80081a0 <__sflush_r+0x98>
 800813a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	075a      	lsls	r2, r3, #29
 8008140:	d505      	bpl.n	800814e <__sflush_r+0x46>
 8008142:	6863      	ldr	r3, [r4, #4]
 8008144:	1ac0      	subs	r0, r0, r3
 8008146:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008148:	b10b      	cbz	r3, 800814e <__sflush_r+0x46>
 800814a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800814c:	1ac0      	subs	r0, r0, r3
 800814e:	2300      	movs	r3, #0
 8008150:	4602      	mov	r2, r0
 8008152:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008154:	6a21      	ldr	r1, [r4, #32]
 8008156:	4628      	mov	r0, r5
 8008158:	47b0      	blx	r6
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	d106      	bne.n	800816e <__sflush_r+0x66>
 8008160:	6829      	ldr	r1, [r5, #0]
 8008162:	291d      	cmp	r1, #29
 8008164:	d82c      	bhi.n	80081c0 <__sflush_r+0xb8>
 8008166:	4a2a      	ldr	r2, [pc, #168]	; (8008210 <__sflush_r+0x108>)
 8008168:	40ca      	lsrs	r2, r1
 800816a:	07d6      	lsls	r6, r2, #31
 800816c:	d528      	bpl.n	80081c0 <__sflush_r+0xb8>
 800816e:	2200      	movs	r2, #0
 8008170:	6062      	str	r2, [r4, #4]
 8008172:	04d9      	lsls	r1, r3, #19
 8008174:	6922      	ldr	r2, [r4, #16]
 8008176:	6022      	str	r2, [r4, #0]
 8008178:	d504      	bpl.n	8008184 <__sflush_r+0x7c>
 800817a:	1c42      	adds	r2, r0, #1
 800817c:	d101      	bne.n	8008182 <__sflush_r+0x7a>
 800817e:	682b      	ldr	r3, [r5, #0]
 8008180:	b903      	cbnz	r3, 8008184 <__sflush_r+0x7c>
 8008182:	6560      	str	r0, [r4, #84]	; 0x54
 8008184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008186:	602f      	str	r7, [r5, #0]
 8008188:	2900      	cmp	r1, #0
 800818a:	d0ca      	beq.n	8008122 <__sflush_r+0x1a>
 800818c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008190:	4299      	cmp	r1, r3
 8008192:	d002      	beq.n	800819a <__sflush_r+0x92>
 8008194:	4628      	mov	r0, r5
 8008196:	f000 fd7f 	bl	8008c98 <_free_r>
 800819a:	2000      	movs	r0, #0
 800819c:	6360      	str	r0, [r4, #52]	; 0x34
 800819e:	e7c1      	b.n	8008124 <__sflush_r+0x1c>
 80081a0:	6a21      	ldr	r1, [r4, #32]
 80081a2:	2301      	movs	r3, #1
 80081a4:	4628      	mov	r0, r5
 80081a6:	47b0      	blx	r6
 80081a8:	1c41      	adds	r1, r0, #1
 80081aa:	d1c7      	bne.n	800813c <__sflush_r+0x34>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0c4      	beq.n	800813c <__sflush_r+0x34>
 80081b2:	2b1d      	cmp	r3, #29
 80081b4:	d001      	beq.n	80081ba <__sflush_r+0xb2>
 80081b6:	2b16      	cmp	r3, #22
 80081b8:	d101      	bne.n	80081be <__sflush_r+0xb6>
 80081ba:	602f      	str	r7, [r5, #0]
 80081bc:	e7b1      	b.n	8008122 <__sflush_r+0x1a>
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c4:	81a3      	strh	r3, [r4, #12]
 80081c6:	e7ad      	b.n	8008124 <__sflush_r+0x1c>
 80081c8:	690f      	ldr	r7, [r1, #16]
 80081ca:	2f00      	cmp	r7, #0
 80081cc:	d0a9      	beq.n	8008122 <__sflush_r+0x1a>
 80081ce:	0793      	lsls	r3, r2, #30
 80081d0:	680e      	ldr	r6, [r1, #0]
 80081d2:	bf08      	it	eq
 80081d4:	694b      	ldreq	r3, [r1, #20]
 80081d6:	600f      	str	r7, [r1, #0]
 80081d8:	bf18      	it	ne
 80081da:	2300      	movne	r3, #0
 80081dc:	eba6 0807 	sub.w	r8, r6, r7
 80081e0:	608b      	str	r3, [r1, #8]
 80081e2:	f1b8 0f00 	cmp.w	r8, #0
 80081e6:	dd9c      	ble.n	8008122 <__sflush_r+0x1a>
 80081e8:	6a21      	ldr	r1, [r4, #32]
 80081ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081ec:	4643      	mov	r3, r8
 80081ee:	463a      	mov	r2, r7
 80081f0:	4628      	mov	r0, r5
 80081f2:	47b0      	blx	r6
 80081f4:	2800      	cmp	r0, #0
 80081f6:	dc06      	bgt.n	8008206 <__sflush_r+0xfe>
 80081f8:	89a3      	ldrh	r3, [r4, #12]
 80081fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081fe:	81a3      	strh	r3, [r4, #12]
 8008200:	f04f 30ff 	mov.w	r0, #4294967295
 8008204:	e78e      	b.n	8008124 <__sflush_r+0x1c>
 8008206:	4407      	add	r7, r0
 8008208:	eba8 0800 	sub.w	r8, r8, r0
 800820c:	e7e9      	b.n	80081e2 <__sflush_r+0xda>
 800820e:	bf00      	nop
 8008210:	20400001 	.word	0x20400001

08008214 <_fflush_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	690b      	ldr	r3, [r1, #16]
 8008218:	4605      	mov	r5, r0
 800821a:	460c      	mov	r4, r1
 800821c:	b913      	cbnz	r3, 8008224 <_fflush_r+0x10>
 800821e:	2500      	movs	r5, #0
 8008220:	4628      	mov	r0, r5
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	b118      	cbz	r0, 800822e <_fflush_r+0x1a>
 8008226:	6983      	ldr	r3, [r0, #24]
 8008228:	b90b      	cbnz	r3, 800822e <_fflush_r+0x1a>
 800822a:	f000 f887 	bl	800833c <__sinit>
 800822e:	4b14      	ldr	r3, [pc, #80]	; (8008280 <_fflush_r+0x6c>)
 8008230:	429c      	cmp	r4, r3
 8008232:	d11b      	bne.n	800826c <_fflush_r+0x58>
 8008234:	686c      	ldr	r4, [r5, #4]
 8008236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d0ef      	beq.n	800821e <_fflush_r+0xa>
 800823e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008240:	07d0      	lsls	r0, r2, #31
 8008242:	d404      	bmi.n	800824e <_fflush_r+0x3a>
 8008244:	0599      	lsls	r1, r3, #22
 8008246:	d402      	bmi.n	800824e <_fflush_r+0x3a>
 8008248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800824a:	f000 f91a 	bl	8008482 <__retarget_lock_acquire_recursive>
 800824e:	4628      	mov	r0, r5
 8008250:	4621      	mov	r1, r4
 8008252:	f7ff ff59 	bl	8008108 <__sflush_r>
 8008256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008258:	07da      	lsls	r2, r3, #31
 800825a:	4605      	mov	r5, r0
 800825c:	d4e0      	bmi.n	8008220 <_fflush_r+0xc>
 800825e:	89a3      	ldrh	r3, [r4, #12]
 8008260:	059b      	lsls	r3, r3, #22
 8008262:	d4dd      	bmi.n	8008220 <_fflush_r+0xc>
 8008264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008266:	f000 f90d 	bl	8008484 <__retarget_lock_release_recursive>
 800826a:	e7d9      	b.n	8008220 <_fflush_r+0xc>
 800826c:	4b05      	ldr	r3, [pc, #20]	; (8008284 <_fflush_r+0x70>)
 800826e:	429c      	cmp	r4, r3
 8008270:	d101      	bne.n	8008276 <_fflush_r+0x62>
 8008272:	68ac      	ldr	r4, [r5, #8]
 8008274:	e7df      	b.n	8008236 <_fflush_r+0x22>
 8008276:	4b04      	ldr	r3, [pc, #16]	; (8008288 <_fflush_r+0x74>)
 8008278:	429c      	cmp	r4, r3
 800827a:	bf08      	it	eq
 800827c:	68ec      	ldreq	r4, [r5, #12]
 800827e:	e7da      	b.n	8008236 <_fflush_r+0x22>
 8008280:	080095ec 	.word	0x080095ec
 8008284:	0800960c 	.word	0x0800960c
 8008288:	080095cc 	.word	0x080095cc

0800828c <std>:
 800828c:	2300      	movs	r3, #0
 800828e:	b510      	push	{r4, lr}
 8008290:	4604      	mov	r4, r0
 8008292:	e9c0 3300 	strd	r3, r3, [r0]
 8008296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800829a:	6083      	str	r3, [r0, #8]
 800829c:	8181      	strh	r1, [r0, #12]
 800829e:	6643      	str	r3, [r0, #100]	; 0x64
 80082a0:	81c2      	strh	r2, [r0, #14]
 80082a2:	6183      	str	r3, [r0, #24]
 80082a4:	4619      	mov	r1, r3
 80082a6:	2208      	movs	r2, #8
 80082a8:	305c      	adds	r0, #92	; 0x5c
 80082aa:	f7fe fa2d 	bl	8006708 <memset>
 80082ae:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <std+0x38>)
 80082b0:	6263      	str	r3, [r4, #36]	; 0x24
 80082b2:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <std+0x3c>)
 80082b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80082b6:	4b05      	ldr	r3, [pc, #20]	; (80082cc <std+0x40>)
 80082b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082ba:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <std+0x44>)
 80082bc:	6224      	str	r4, [r4, #32]
 80082be:	6323      	str	r3, [r4, #48]	; 0x30
 80082c0:	bd10      	pop	{r4, pc}
 80082c2:	bf00      	nop
 80082c4:	080090c1 	.word	0x080090c1
 80082c8:	080090e3 	.word	0x080090e3
 80082cc:	0800911b 	.word	0x0800911b
 80082d0:	0800913f 	.word	0x0800913f

080082d4 <_cleanup_r>:
 80082d4:	4901      	ldr	r1, [pc, #4]	; (80082dc <_cleanup_r+0x8>)
 80082d6:	f000 b8af 	b.w	8008438 <_fwalk_reent>
 80082da:	bf00      	nop
 80082dc:	08008215 	.word	0x08008215

080082e0 <__sfmoreglue>:
 80082e0:	b570      	push	{r4, r5, r6, lr}
 80082e2:	1e4a      	subs	r2, r1, #1
 80082e4:	2568      	movs	r5, #104	; 0x68
 80082e6:	4355      	muls	r5, r2
 80082e8:	460e      	mov	r6, r1
 80082ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082ee:	f000 fd23 	bl	8008d38 <_malloc_r>
 80082f2:	4604      	mov	r4, r0
 80082f4:	b140      	cbz	r0, 8008308 <__sfmoreglue+0x28>
 80082f6:	2100      	movs	r1, #0
 80082f8:	e9c0 1600 	strd	r1, r6, [r0]
 80082fc:	300c      	adds	r0, #12
 80082fe:	60a0      	str	r0, [r4, #8]
 8008300:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008304:	f7fe fa00 	bl	8006708 <memset>
 8008308:	4620      	mov	r0, r4
 800830a:	bd70      	pop	{r4, r5, r6, pc}

0800830c <__sfp_lock_acquire>:
 800830c:	4801      	ldr	r0, [pc, #4]	; (8008314 <__sfp_lock_acquire+0x8>)
 800830e:	f000 b8b8 	b.w	8008482 <__retarget_lock_acquire_recursive>
 8008312:	bf00      	nop
 8008314:	2000050c 	.word	0x2000050c

08008318 <__sfp_lock_release>:
 8008318:	4801      	ldr	r0, [pc, #4]	; (8008320 <__sfp_lock_release+0x8>)
 800831a:	f000 b8b3 	b.w	8008484 <__retarget_lock_release_recursive>
 800831e:	bf00      	nop
 8008320:	2000050c 	.word	0x2000050c

08008324 <__sinit_lock_acquire>:
 8008324:	4801      	ldr	r0, [pc, #4]	; (800832c <__sinit_lock_acquire+0x8>)
 8008326:	f000 b8ac 	b.w	8008482 <__retarget_lock_acquire_recursive>
 800832a:	bf00      	nop
 800832c:	20000507 	.word	0x20000507

08008330 <__sinit_lock_release>:
 8008330:	4801      	ldr	r0, [pc, #4]	; (8008338 <__sinit_lock_release+0x8>)
 8008332:	f000 b8a7 	b.w	8008484 <__retarget_lock_release_recursive>
 8008336:	bf00      	nop
 8008338:	20000507 	.word	0x20000507

0800833c <__sinit>:
 800833c:	b510      	push	{r4, lr}
 800833e:	4604      	mov	r4, r0
 8008340:	f7ff fff0 	bl	8008324 <__sinit_lock_acquire>
 8008344:	69a3      	ldr	r3, [r4, #24]
 8008346:	b11b      	cbz	r3, 8008350 <__sinit+0x14>
 8008348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800834c:	f7ff bff0 	b.w	8008330 <__sinit_lock_release>
 8008350:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008354:	6523      	str	r3, [r4, #80]	; 0x50
 8008356:	4b13      	ldr	r3, [pc, #76]	; (80083a4 <__sinit+0x68>)
 8008358:	4a13      	ldr	r2, [pc, #76]	; (80083a8 <__sinit+0x6c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	62a2      	str	r2, [r4, #40]	; 0x28
 800835e:	42a3      	cmp	r3, r4
 8008360:	bf04      	itt	eq
 8008362:	2301      	moveq	r3, #1
 8008364:	61a3      	streq	r3, [r4, #24]
 8008366:	4620      	mov	r0, r4
 8008368:	f000 f820 	bl	80083ac <__sfp>
 800836c:	6060      	str	r0, [r4, #4]
 800836e:	4620      	mov	r0, r4
 8008370:	f000 f81c 	bl	80083ac <__sfp>
 8008374:	60a0      	str	r0, [r4, #8]
 8008376:	4620      	mov	r0, r4
 8008378:	f000 f818 	bl	80083ac <__sfp>
 800837c:	2200      	movs	r2, #0
 800837e:	60e0      	str	r0, [r4, #12]
 8008380:	2104      	movs	r1, #4
 8008382:	6860      	ldr	r0, [r4, #4]
 8008384:	f7ff ff82 	bl	800828c <std>
 8008388:	68a0      	ldr	r0, [r4, #8]
 800838a:	2201      	movs	r2, #1
 800838c:	2109      	movs	r1, #9
 800838e:	f7ff ff7d 	bl	800828c <std>
 8008392:	68e0      	ldr	r0, [r4, #12]
 8008394:	2202      	movs	r2, #2
 8008396:	2112      	movs	r1, #18
 8008398:	f7ff ff78 	bl	800828c <std>
 800839c:	2301      	movs	r3, #1
 800839e:	61a3      	str	r3, [r4, #24]
 80083a0:	e7d2      	b.n	8008348 <__sinit+0xc>
 80083a2:	bf00      	nop
 80083a4:	08009500 	.word	0x08009500
 80083a8:	080082d5 	.word	0x080082d5

080083ac <__sfp>:
 80083ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ae:	4607      	mov	r7, r0
 80083b0:	f7ff ffac 	bl	800830c <__sfp_lock_acquire>
 80083b4:	4b1e      	ldr	r3, [pc, #120]	; (8008430 <__sfp+0x84>)
 80083b6:	681e      	ldr	r6, [r3, #0]
 80083b8:	69b3      	ldr	r3, [r6, #24]
 80083ba:	b913      	cbnz	r3, 80083c2 <__sfp+0x16>
 80083bc:	4630      	mov	r0, r6
 80083be:	f7ff ffbd 	bl	800833c <__sinit>
 80083c2:	3648      	adds	r6, #72	; 0x48
 80083c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	d503      	bpl.n	80083d4 <__sfp+0x28>
 80083cc:	6833      	ldr	r3, [r6, #0]
 80083ce:	b30b      	cbz	r3, 8008414 <__sfp+0x68>
 80083d0:	6836      	ldr	r6, [r6, #0]
 80083d2:	e7f7      	b.n	80083c4 <__sfp+0x18>
 80083d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083d8:	b9d5      	cbnz	r5, 8008410 <__sfp+0x64>
 80083da:	4b16      	ldr	r3, [pc, #88]	; (8008434 <__sfp+0x88>)
 80083dc:	60e3      	str	r3, [r4, #12]
 80083de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083e2:	6665      	str	r5, [r4, #100]	; 0x64
 80083e4:	f000 f84c 	bl	8008480 <__retarget_lock_init_recursive>
 80083e8:	f7ff ff96 	bl	8008318 <__sfp_lock_release>
 80083ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083f4:	6025      	str	r5, [r4, #0]
 80083f6:	61a5      	str	r5, [r4, #24]
 80083f8:	2208      	movs	r2, #8
 80083fa:	4629      	mov	r1, r5
 80083fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008400:	f7fe f982 	bl	8006708 <memset>
 8008404:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008408:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800840c:	4620      	mov	r0, r4
 800840e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008410:	3468      	adds	r4, #104	; 0x68
 8008412:	e7d9      	b.n	80083c8 <__sfp+0x1c>
 8008414:	2104      	movs	r1, #4
 8008416:	4638      	mov	r0, r7
 8008418:	f7ff ff62 	bl	80082e0 <__sfmoreglue>
 800841c:	4604      	mov	r4, r0
 800841e:	6030      	str	r0, [r6, #0]
 8008420:	2800      	cmp	r0, #0
 8008422:	d1d5      	bne.n	80083d0 <__sfp+0x24>
 8008424:	f7ff ff78 	bl	8008318 <__sfp_lock_release>
 8008428:	230c      	movs	r3, #12
 800842a:	603b      	str	r3, [r7, #0]
 800842c:	e7ee      	b.n	800840c <__sfp+0x60>
 800842e:	bf00      	nop
 8008430:	08009500 	.word	0x08009500
 8008434:	ffff0001 	.word	0xffff0001

08008438 <_fwalk_reent>:
 8008438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800843c:	4606      	mov	r6, r0
 800843e:	4688      	mov	r8, r1
 8008440:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008444:	2700      	movs	r7, #0
 8008446:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800844a:	f1b9 0901 	subs.w	r9, r9, #1
 800844e:	d505      	bpl.n	800845c <_fwalk_reent+0x24>
 8008450:	6824      	ldr	r4, [r4, #0]
 8008452:	2c00      	cmp	r4, #0
 8008454:	d1f7      	bne.n	8008446 <_fwalk_reent+0xe>
 8008456:	4638      	mov	r0, r7
 8008458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800845c:	89ab      	ldrh	r3, [r5, #12]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d907      	bls.n	8008472 <_fwalk_reent+0x3a>
 8008462:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008466:	3301      	adds	r3, #1
 8008468:	d003      	beq.n	8008472 <_fwalk_reent+0x3a>
 800846a:	4629      	mov	r1, r5
 800846c:	4630      	mov	r0, r6
 800846e:	47c0      	blx	r8
 8008470:	4307      	orrs	r7, r0
 8008472:	3568      	adds	r5, #104	; 0x68
 8008474:	e7e9      	b.n	800844a <_fwalk_reent+0x12>
	...

08008478 <_localeconv_r>:
 8008478:	4800      	ldr	r0, [pc, #0]	; (800847c <_localeconv_r+0x4>)
 800847a:	4770      	bx	lr
 800847c:	20000160 	.word	0x20000160

08008480 <__retarget_lock_init_recursive>:
 8008480:	4770      	bx	lr

08008482 <__retarget_lock_acquire_recursive>:
 8008482:	4770      	bx	lr

08008484 <__retarget_lock_release_recursive>:
 8008484:	4770      	bx	lr

08008486 <__swhatbuf_r>:
 8008486:	b570      	push	{r4, r5, r6, lr}
 8008488:	460e      	mov	r6, r1
 800848a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800848e:	2900      	cmp	r1, #0
 8008490:	b096      	sub	sp, #88	; 0x58
 8008492:	4614      	mov	r4, r2
 8008494:	461d      	mov	r5, r3
 8008496:	da07      	bge.n	80084a8 <__swhatbuf_r+0x22>
 8008498:	2300      	movs	r3, #0
 800849a:	602b      	str	r3, [r5, #0]
 800849c:	89b3      	ldrh	r3, [r6, #12]
 800849e:	061a      	lsls	r2, r3, #24
 80084a0:	d410      	bmi.n	80084c4 <__swhatbuf_r+0x3e>
 80084a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084a6:	e00e      	b.n	80084c6 <__swhatbuf_r+0x40>
 80084a8:	466a      	mov	r2, sp
 80084aa:	f000 fe9f 	bl	80091ec <_fstat_r>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	dbf2      	blt.n	8008498 <__swhatbuf_r+0x12>
 80084b2:	9a01      	ldr	r2, [sp, #4]
 80084b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084bc:	425a      	negs	r2, r3
 80084be:	415a      	adcs	r2, r3
 80084c0:	602a      	str	r2, [r5, #0]
 80084c2:	e7ee      	b.n	80084a2 <__swhatbuf_r+0x1c>
 80084c4:	2340      	movs	r3, #64	; 0x40
 80084c6:	2000      	movs	r0, #0
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	b016      	add	sp, #88	; 0x58
 80084cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080084d0 <__smakebuf_r>:
 80084d0:	898b      	ldrh	r3, [r1, #12]
 80084d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084d4:	079d      	lsls	r5, r3, #30
 80084d6:	4606      	mov	r6, r0
 80084d8:	460c      	mov	r4, r1
 80084da:	d507      	bpl.n	80084ec <__smakebuf_r+0x1c>
 80084dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	6123      	str	r3, [r4, #16]
 80084e4:	2301      	movs	r3, #1
 80084e6:	6163      	str	r3, [r4, #20]
 80084e8:	b002      	add	sp, #8
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	ab01      	add	r3, sp, #4
 80084ee:	466a      	mov	r2, sp
 80084f0:	f7ff ffc9 	bl	8008486 <__swhatbuf_r>
 80084f4:	9900      	ldr	r1, [sp, #0]
 80084f6:	4605      	mov	r5, r0
 80084f8:	4630      	mov	r0, r6
 80084fa:	f000 fc1d 	bl	8008d38 <_malloc_r>
 80084fe:	b948      	cbnz	r0, 8008514 <__smakebuf_r+0x44>
 8008500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008504:	059a      	lsls	r2, r3, #22
 8008506:	d4ef      	bmi.n	80084e8 <__smakebuf_r+0x18>
 8008508:	f023 0303 	bic.w	r3, r3, #3
 800850c:	f043 0302 	orr.w	r3, r3, #2
 8008510:	81a3      	strh	r3, [r4, #12]
 8008512:	e7e3      	b.n	80084dc <__smakebuf_r+0xc>
 8008514:	4b0d      	ldr	r3, [pc, #52]	; (800854c <__smakebuf_r+0x7c>)
 8008516:	62b3      	str	r3, [r6, #40]	; 0x28
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	6020      	str	r0, [r4, #0]
 800851c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008520:	81a3      	strh	r3, [r4, #12]
 8008522:	9b00      	ldr	r3, [sp, #0]
 8008524:	6163      	str	r3, [r4, #20]
 8008526:	9b01      	ldr	r3, [sp, #4]
 8008528:	6120      	str	r0, [r4, #16]
 800852a:	b15b      	cbz	r3, 8008544 <__smakebuf_r+0x74>
 800852c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008530:	4630      	mov	r0, r6
 8008532:	f000 fe6d 	bl	8009210 <_isatty_r>
 8008536:	b128      	cbz	r0, 8008544 <__smakebuf_r+0x74>
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	f023 0303 	bic.w	r3, r3, #3
 800853e:	f043 0301 	orr.w	r3, r3, #1
 8008542:	81a3      	strh	r3, [r4, #12]
 8008544:	89a0      	ldrh	r0, [r4, #12]
 8008546:	4305      	orrs	r5, r0
 8008548:	81a5      	strh	r5, [r4, #12]
 800854a:	e7cd      	b.n	80084e8 <__smakebuf_r+0x18>
 800854c:	080082d5 	.word	0x080082d5

08008550 <malloc>:
 8008550:	4b02      	ldr	r3, [pc, #8]	; (800855c <malloc+0xc>)
 8008552:	4601      	mov	r1, r0
 8008554:	6818      	ldr	r0, [r3, #0]
 8008556:	f000 bbef 	b.w	8008d38 <_malloc_r>
 800855a:	bf00      	nop
 800855c:	2000000c 	.word	0x2000000c

08008560 <memcpy>:
 8008560:	440a      	add	r2, r1
 8008562:	4291      	cmp	r1, r2
 8008564:	f100 33ff 	add.w	r3, r0, #4294967295
 8008568:	d100      	bne.n	800856c <memcpy+0xc>
 800856a:	4770      	bx	lr
 800856c:	b510      	push	{r4, lr}
 800856e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008576:	4291      	cmp	r1, r2
 8008578:	d1f9      	bne.n	800856e <memcpy+0xe>
 800857a:	bd10      	pop	{r4, pc}

0800857c <_Balloc>:
 800857c:	b570      	push	{r4, r5, r6, lr}
 800857e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008580:	4604      	mov	r4, r0
 8008582:	460d      	mov	r5, r1
 8008584:	b976      	cbnz	r6, 80085a4 <_Balloc+0x28>
 8008586:	2010      	movs	r0, #16
 8008588:	f7ff ffe2 	bl	8008550 <malloc>
 800858c:	4602      	mov	r2, r0
 800858e:	6260      	str	r0, [r4, #36]	; 0x24
 8008590:	b920      	cbnz	r0, 800859c <_Balloc+0x20>
 8008592:	4b18      	ldr	r3, [pc, #96]	; (80085f4 <_Balloc+0x78>)
 8008594:	4818      	ldr	r0, [pc, #96]	; (80085f8 <_Balloc+0x7c>)
 8008596:	2166      	movs	r1, #102	; 0x66
 8008598:	f000 fde8 	bl	800916c <__assert_func>
 800859c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085a0:	6006      	str	r6, [r0, #0]
 80085a2:	60c6      	str	r6, [r0, #12]
 80085a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085a6:	68f3      	ldr	r3, [r6, #12]
 80085a8:	b183      	cbz	r3, 80085cc <_Balloc+0x50>
 80085aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085b2:	b9b8      	cbnz	r0, 80085e4 <_Balloc+0x68>
 80085b4:	2101      	movs	r1, #1
 80085b6:	fa01 f605 	lsl.w	r6, r1, r5
 80085ba:	1d72      	adds	r2, r6, #5
 80085bc:	0092      	lsls	r2, r2, #2
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 fb5a 	bl	8008c78 <_calloc_r>
 80085c4:	b160      	cbz	r0, 80085e0 <_Balloc+0x64>
 80085c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085ca:	e00e      	b.n	80085ea <_Balloc+0x6e>
 80085cc:	2221      	movs	r2, #33	; 0x21
 80085ce:	2104      	movs	r1, #4
 80085d0:	4620      	mov	r0, r4
 80085d2:	f000 fb51 	bl	8008c78 <_calloc_r>
 80085d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085d8:	60f0      	str	r0, [r6, #12]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e4      	bne.n	80085aa <_Balloc+0x2e>
 80085e0:	2000      	movs	r0, #0
 80085e2:	bd70      	pop	{r4, r5, r6, pc}
 80085e4:	6802      	ldr	r2, [r0, #0]
 80085e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085ea:	2300      	movs	r3, #0
 80085ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085f0:	e7f7      	b.n	80085e2 <_Balloc+0x66>
 80085f2:	bf00      	nop
 80085f4:	08009545 	.word	0x08009545
 80085f8:	0800962c 	.word	0x0800962c

080085fc <_Bfree>:
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008600:	4605      	mov	r5, r0
 8008602:	460c      	mov	r4, r1
 8008604:	b976      	cbnz	r6, 8008624 <_Bfree+0x28>
 8008606:	2010      	movs	r0, #16
 8008608:	f7ff ffa2 	bl	8008550 <malloc>
 800860c:	4602      	mov	r2, r0
 800860e:	6268      	str	r0, [r5, #36]	; 0x24
 8008610:	b920      	cbnz	r0, 800861c <_Bfree+0x20>
 8008612:	4b09      	ldr	r3, [pc, #36]	; (8008638 <_Bfree+0x3c>)
 8008614:	4809      	ldr	r0, [pc, #36]	; (800863c <_Bfree+0x40>)
 8008616:	218a      	movs	r1, #138	; 0x8a
 8008618:	f000 fda8 	bl	800916c <__assert_func>
 800861c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008620:	6006      	str	r6, [r0, #0]
 8008622:	60c6      	str	r6, [r0, #12]
 8008624:	b13c      	cbz	r4, 8008636 <_Bfree+0x3a>
 8008626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008628:	6862      	ldr	r2, [r4, #4]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008630:	6021      	str	r1, [r4, #0]
 8008632:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008636:	bd70      	pop	{r4, r5, r6, pc}
 8008638:	08009545 	.word	0x08009545
 800863c:	0800962c 	.word	0x0800962c

08008640 <__multadd>:
 8008640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008644:	690e      	ldr	r6, [r1, #16]
 8008646:	4607      	mov	r7, r0
 8008648:	4698      	mov	r8, r3
 800864a:	460c      	mov	r4, r1
 800864c:	f101 0014 	add.w	r0, r1, #20
 8008650:	2300      	movs	r3, #0
 8008652:	6805      	ldr	r5, [r0, #0]
 8008654:	b2a9      	uxth	r1, r5
 8008656:	fb02 8101 	mla	r1, r2, r1, r8
 800865a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800865e:	0c2d      	lsrs	r5, r5, #16
 8008660:	fb02 c505 	mla	r5, r2, r5, ip
 8008664:	b289      	uxth	r1, r1
 8008666:	3301      	adds	r3, #1
 8008668:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800866c:	429e      	cmp	r6, r3
 800866e:	f840 1b04 	str.w	r1, [r0], #4
 8008672:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008676:	dcec      	bgt.n	8008652 <__multadd+0x12>
 8008678:	f1b8 0f00 	cmp.w	r8, #0
 800867c:	d022      	beq.n	80086c4 <__multadd+0x84>
 800867e:	68a3      	ldr	r3, [r4, #8]
 8008680:	42b3      	cmp	r3, r6
 8008682:	dc19      	bgt.n	80086b8 <__multadd+0x78>
 8008684:	6861      	ldr	r1, [r4, #4]
 8008686:	4638      	mov	r0, r7
 8008688:	3101      	adds	r1, #1
 800868a:	f7ff ff77 	bl	800857c <_Balloc>
 800868e:	4605      	mov	r5, r0
 8008690:	b928      	cbnz	r0, 800869e <__multadd+0x5e>
 8008692:	4602      	mov	r2, r0
 8008694:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <__multadd+0x8c>)
 8008696:	480e      	ldr	r0, [pc, #56]	; (80086d0 <__multadd+0x90>)
 8008698:	21b5      	movs	r1, #181	; 0xb5
 800869a:	f000 fd67 	bl	800916c <__assert_func>
 800869e:	6922      	ldr	r2, [r4, #16]
 80086a0:	3202      	adds	r2, #2
 80086a2:	f104 010c 	add.w	r1, r4, #12
 80086a6:	0092      	lsls	r2, r2, #2
 80086a8:	300c      	adds	r0, #12
 80086aa:	f7ff ff59 	bl	8008560 <memcpy>
 80086ae:	4621      	mov	r1, r4
 80086b0:	4638      	mov	r0, r7
 80086b2:	f7ff ffa3 	bl	80085fc <_Bfree>
 80086b6:	462c      	mov	r4, r5
 80086b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80086bc:	3601      	adds	r6, #1
 80086be:	f8c3 8014 	str.w	r8, [r3, #20]
 80086c2:	6126      	str	r6, [r4, #16]
 80086c4:	4620      	mov	r0, r4
 80086c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ca:	bf00      	nop
 80086cc:	080095bb 	.word	0x080095bb
 80086d0:	0800962c 	.word	0x0800962c

080086d4 <__hi0bits>:
 80086d4:	0c03      	lsrs	r3, r0, #16
 80086d6:	041b      	lsls	r3, r3, #16
 80086d8:	b9d3      	cbnz	r3, 8008710 <__hi0bits+0x3c>
 80086da:	0400      	lsls	r0, r0, #16
 80086dc:	2310      	movs	r3, #16
 80086de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086e2:	bf04      	itt	eq
 80086e4:	0200      	lsleq	r0, r0, #8
 80086e6:	3308      	addeq	r3, #8
 80086e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086ec:	bf04      	itt	eq
 80086ee:	0100      	lsleq	r0, r0, #4
 80086f0:	3304      	addeq	r3, #4
 80086f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086f6:	bf04      	itt	eq
 80086f8:	0080      	lsleq	r0, r0, #2
 80086fa:	3302      	addeq	r3, #2
 80086fc:	2800      	cmp	r0, #0
 80086fe:	db05      	blt.n	800870c <__hi0bits+0x38>
 8008700:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008704:	f103 0301 	add.w	r3, r3, #1
 8008708:	bf08      	it	eq
 800870a:	2320      	moveq	r3, #32
 800870c:	4618      	mov	r0, r3
 800870e:	4770      	bx	lr
 8008710:	2300      	movs	r3, #0
 8008712:	e7e4      	b.n	80086de <__hi0bits+0xa>

08008714 <__lo0bits>:
 8008714:	6803      	ldr	r3, [r0, #0]
 8008716:	f013 0207 	ands.w	r2, r3, #7
 800871a:	4601      	mov	r1, r0
 800871c:	d00b      	beq.n	8008736 <__lo0bits+0x22>
 800871e:	07da      	lsls	r2, r3, #31
 8008720:	d424      	bmi.n	800876c <__lo0bits+0x58>
 8008722:	0798      	lsls	r0, r3, #30
 8008724:	bf49      	itett	mi
 8008726:	085b      	lsrmi	r3, r3, #1
 8008728:	089b      	lsrpl	r3, r3, #2
 800872a:	2001      	movmi	r0, #1
 800872c:	600b      	strmi	r3, [r1, #0]
 800872e:	bf5c      	itt	pl
 8008730:	600b      	strpl	r3, [r1, #0]
 8008732:	2002      	movpl	r0, #2
 8008734:	4770      	bx	lr
 8008736:	b298      	uxth	r0, r3
 8008738:	b9b0      	cbnz	r0, 8008768 <__lo0bits+0x54>
 800873a:	0c1b      	lsrs	r3, r3, #16
 800873c:	2010      	movs	r0, #16
 800873e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008742:	bf04      	itt	eq
 8008744:	0a1b      	lsreq	r3, r3, #8
 8008746:	3008      	addeq	r0, #8
 8008748:	071a      	lsls	r2, r3, #28
 800874a:	bf04      	itt	eq
 800874c:	091b      	lsreq	r3, r3, #4
 800874e:	3004      	addeq	r0, #4
 8008750:	079a      	lsls	r2, r3, #30
 8008752:	bf04      	itt	eq
 8008754:	089b      	lsreq	r3, r3, #2
 8008756:	3002      	addeq	r0, #2
 8008758:	07da      	lsls	r2, r3, #31
 800875a:	d403      	bmi.n	8008764 <__lo0bits+0x50>
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	f100 0001 	add.w	r0, r0, #1
 8008762:	d005      	beq.n	8008770 <__lo0bits+0x5c>
 8008764:	600b      	str	r3, [r1, #0]
 8008766:	4770      	bx	lr
 8008768:	4610      	mov	r0, r2
 800876a:	e7e8      	b.n	800873e <__lo0bits+0x2a>
 800876c:	2000      	movs	r0, #0
 800876e:	4770      	bx	lr
 8008770:	2020      	movs	r0, #32
 8008772:	4770      	bx	lr

08008774 <__i2b>:
 8008774:	b510      	push	{r4, lr}
 8008776:	460c      	mov	r4, r1
 8008778:	2101      	movs	r1, #1
 800877a:	f7ff feff 	bl	800857c <_Balloc>
 800877e:	4602      	mov	r2, r0
 8008780:	b928      	cbnz	r0, 800878e <__i2b+0x1a>
 8008782:	4b05      	ldr	r3, [pc, #20]	; (8008798 <__i2b+0x24>)
 8008784:	4805      	ldr	r0, [pc, #20]	; (800879c <__i2b+0x28>)
 8008786:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800878a:	f000 fcef 	bl	800916c <__assert_func>
 800878e:	2301      	movs	r3, #1
 8008790:	6144      	str	r4, [r0, #20]
 8008792:	6103      	str	r3, [r0, #16]
 8008794:	bd10      	pop	{r4, pc}
 8008796:	bf00      	nop
 8008798:	080095bb 	.word	0x080095bb
 800879c:	0800962c 	.word	0x0800962c

080087a0 <__multiply>:
 80087a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a4:	4614      	mov	r4, r2
 80087a6:	690a      	ldr	r2, [r1, #16]
 80087a8:	6923      	ldr	r3, [r4, #16]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	bfb8      	it	lt
 80087ae:	460b      	movlt	r3, r1
 80087b0:	460d      	mov	r5, r1
 80087b2:	bfbc      	itt	lt
 80087b4:	4625      	movlt	r5, r4
 80087b6:	461c      	movlt	r4, r3
 80087b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80087bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80087c0:	68ab      	ldr	r3, [r5, #8]
 80087c2:	6869      	ldr	r1, [r5, #4]
 80087c4:	eb0a 0709 	add.w	r7, sl, r9
 80087c8:	42bb      	cmp	r3, r7
 80087ca:	b085      	sub	sp, #20
 80087cc:	bfb8      	it	lt
 80087ce:	3101      	addlt	r1, #1
 80087d0:	f7ff fed4 	bl	800857c <_Balloc>
 80087d4:	b930      	cbnz	r0, 80087e4 <__multiply+0x44>
 80087d6:	4602      	mov	r2, r0
 80087d8:	4b42      	ldr	r3, [pc, #264]	; (80088e4 <__multiply+0x144>)
 80087da:	4843      	ldr	r0, [pc, #268]	; (80088e8 <__multiply+0x148>)
 80087dc:	f240 115d 	movw	r1, #349	; 0x15d
 80087e0:	f000 fcc4 	bl	800916c <__assert_func>
 80087e4:	f100 0614 	add.w	r6, r0, #20
 80087e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80087ec:	4633      	mov	r3, r6
 80087ee:	2200      	movs	r2, #0
 80087f0:	4543      	cmp	r3, r8
 80087f2:	d31e      	bcc.n	8008832 <__multiply+0x92>
 80087f4:	f105 0c14 	add.w	ip, r5, #20
 80087f8:	f104 0314 	add.w	r3, r4, #20
 80087fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008800:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008804:	9202      	str	r2, [sp, #8]
 8008806:	ebac 0205 	sub.w	r2, ip, r5
 800880a:	3a15      	subs	r2, #21
 800880c:	f022 0203 	bic.w	r2, r2, #3
 8008810:	3204      	adds	r2, #4
 8008812:	f105 0115 	add.w	r1, r5, #21
 8008816:	458c      	cmp	ip, r1
 8008818:	bf38      	it	cc
 800881a:	2204      	movcc	r2, #4
 800881c:	9201      	str	r2, [sp, #4]
 800881e:	9a02      	ldr	r2, [sp, #8]
 8008820:	9303      	str	r3, [sp, #12]
 8008822:	429a      	cmp	r2, r3
 8008824:	d808      	bhi.n	8008838 <__multiply+0x98>
 8008826:	2f00      	cmp	r7, #0
 8008828:	dc55      	bgt.n	80088d6 <__multiply+0x136>
 800882a:	6107      	str	r7, [r0, #16]
 800882c:	b005      	add	sp, #20
 800882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008832:	f843 2b04 	str.w	r2, [r3], #4
 8008836:	e7db      	b.n	80087f0 <__multiply+0x50>
 8008838:	f8b3 a000 	ldrh.w	sl, [r3]
 800883c:	f1ba 0f00 	cmp.w	sl, #0
 8008840:	d020      	beq.n	8008884 <__multiply+0xe4>
 8008842:	f105 0e14 	add.w	lr, r5, #20
 8008846:	46b1      	mov	r9, r6
 8008848:	2200      	movs	r2, #0
 800884a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800884e:	f8d9 b000 	ldr.w	fp, [r9]
 8008852:	b2a1      	uxth	r1, r4
 8008854:	fa1f fb8b 	uxth.w	fp, fp
 8008858:	fb0a b101 	mla	r1, sl, r1, fp
 800885c:	4411      	add	r1, r2
 800885e:	f8d9 2000 	ldr.w	r2, [r9]
 8008862:	0c24      	lsrs	r4, r4, #16
 8008864:	0c12      	lsrs	r2, r2, #16
 8008866:	fb0a 2404 	mla	r4, sl, r4, r2
 800886a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800886e:	b289      	uxth	r1, r1
 8008870:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008874:	45f4      	cmp	ip, lr
 8008876:	f849 1b04 	str.w	r1, [r9], #4
 800887a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800887e:	d8e4      	bhi.n	800884a <__multiply+0xaa>
 8008880:	9901      	ldr	r1, [sp, #4]
 8008882:	5072      	str	r2, [r6, r1]
 8008884:	9a03      	ldr	r2, [sp, #12]
 8008886:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800888a:	3304      	adds	r3, #4
 800888c:	f1b9 0f00 	cmp.w	r9, #0
 8008890:	d01f      	beq.n	80088d2 <__multiply+0x132>
 8008892:	6834      	ldr	r4, [r6, #0]
 8008894:	f105 0114 	add.w	r1, r5, #20
 8008898:	46b6      	mov	lr, r6
 800889a:	f04f 0a00 	mov.w	sl, #0
 800889e:	880a      	ldrh	r2, [r1, #0]
 80088a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80088a4:	fb09 b202 	mla	r2, r9, r2, fp
 80088a8:	4492      	add	sl, r2
 80088aa:	b2a4      	uxth	r4, r4
 80088ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80088b0:	f84e 4b04 	str.w	r4, [lr], #4
 80088b4:	f851 4b04 	ldr.w	r4, [r1], #4
 80088b8:	f8be 2000 	ldrh.w	r2, [lr]
 80088bc:	0c24      	lsrs	r4, r4, #16
 80088be:	fb09 2404 	mla	r4, r9, r4, r2
 80088c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80088c6:	458c      	cmp	ip, r1
 80088c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80088cc:	d8e7      	bhi.n	800889e <__multiply+0xfe>
 80088ce:	9a01      	ldr	r2, [sp, #4]
 80088d0:	50b4      	str	r4, [r6, r2]
 80088d2:	3604      	adds	r6, #4
 80088d4:	e7a3      	b.n	800881e <__multiply+0x7e>
 80088d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1a5      	bne.n	800882a <__multiply+0x8a>
 80088de:	3f01      	subs	r7, #1
 80088e0:	e7a1      	b.n	8008826 <__multiply+0x86>
 80088e2:	bf00      	nop
 80088e4:	080095bb 	.word	0x080095bb
 80088e8:	0800962c 	.word	0x0800962c

080088ec <__pow5mult>:
 80088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f0:	4615      	mov	r5, r2
 80088f2:	f012 0203 	ands.w	r2, r2, #3
 80088f6:	4606      	mov	r6, r0
 80088f8:	460f      	mov	r7, r1
 80088fa:	d007      	beq.n	800890c <__pow5mult+0x20>
 80088fc:	4c25      	ldr	r4, [pc, #148]	; (8008994 <__pow5mult+0xa8>)
 80088fe:	3a01      	subs	r2, #1
 8008900:	2300      	movs	r3, #0
 8008902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008906:	f7ff fe9b 	bl	8008640 <__multadd>
 800890a:	4607      	mov	r7, r0
 800890c:	10ad      	asrs	r5, r5, #2
 800890e:	d03d      	beq.n	800898c <__pow5mult+0xa0>
 8008910:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008912:	b97c      	cbnz	r4, 8008934 <__pow5mult+0x48>
 8008914:	2010      	movs	r0, #16
 8008916:	f7ff fe1b 	bl	8008550 <malloc>
 800891a:	4602      	mov	r2, r0
 800891c:	6270      	str	r0, [r6, #36]	; 0x24
 800891e:	b928      	cbnz	r0, 800892c <__pow5mult+0x40>
 8008920:	4b1d      	ldr	r3, [pc, #116]	; (8008998 <__pow5mult+0xac>)
 8008922:	481e      	ldr	r0, [pc, #120]	; (800899c <__pow5mult+0xb0>)
 8008924:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008928:	f000 fc20 	bl	800916c <__assert_func>
 800892c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008930:	6004      	str	r4, [r0, #0]
 8008932:	60c4      	str	r4, [r0, #12]
 8008934:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800893c:	b94c      	cbnz	r4, 8008952 <__pow5mult+0x66>
 800893e:	f240 2171 	movw	r1, #625	; 0x271
 8008942:	4630      	mov	r0, r6
 8008944:	f7ff ff16 	bl	8008774 <__i2b>
 8008948:	2300      	movs	r3, #0
 800894a:	f8c8 0008 	str.w	r0, [r8, #8]
 800894e:	4604      	mov	r4, r0
 8008950:	6003      	str	r3, [r0, #0]
 8008952:	f04f 0900 	mov.w	r9, #0
 8008956:	07eb      	lsls	r3, r5, #31
 8008958:	d50a      	bpl.n	8008970 <__pow5mult+0x84>
 800895a:	4639      	mov	r1, r7
 800895c:	4622      	mov	r2, r4
 800895e:	4630      	mov	r0, r6
 8008960:	f7ff ff1e 	bl	80087a0 <__multiply>
 8008964:	4639      	mov	r1, r7
 8008966:	4680      	mov	r8, r0
 8008968:	4630      	mov	r0, r6
 800896a:	f7ff fe47 	bl	80085fc <_Bfree>
 800896e:	4647      	mov	r7, r8
 8008970:	106d      	asrs	r5, r5, #1
 8008972:	d00b      	beq.n	800898c <__pow5mult+0xa0>
 8008974:	6820      	ldr	r0, [r4, #0]
 8008976:	b938      	cbnz	r0, 8008988 <__pow5mult+0x9c>
 8008978:	4622      	mov	r2, r4
 800897a:	4621      	mov	r1, r4
 800897c:	4630      	mov	r0, r6
 800897e:	f7ff ff0f 	bl	80087a0 <__multiply>
 8008982:	6020      	str	r0, [r4, #0]
 8008984:	f8c0 9000 	str.w	r9, [r0]
 8008988:	4604      	mov	r4, r0
 800898a:	e7e4      	b.n	8008956 <__pow5mult+0x6a>
 800898c:	4638      	mov	r0, r7
 800898e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008992:	bf00      	nop
 8008994:	08009780 	.word	0x08009780
 8008998:	08009545 	.word	0x08009545
 800899c:	0800962c 	.word	0x0800962c

080089a0 <__lshift>:
 80089a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a4:	460c      	mov	r4, r1
 80089a6:	6849      	ldr	r1, [r1, #4]
 80089a8:	6923      	ldr	r3, [r4, #16]
 80089aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089ae:	68a3      	ldr	r3, [r4, #8]
 80089b0:	4607      	mov	r7, r0
 80089b2:	4691      	mov	r9, r2
 80089b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089b8:	f108 0601 	add.w	r6, r8, #1
 80089bc:	42b3      	cmp	r3, r6
 80089be:	db0b      	blt.n	80089d8 <__lshift+0x38>
 80089c0:	4638      	mov	r0, r7
 80089c2:	f7ff fddb 	bl	800857c <_Balloc>
 80089c6:	4605      	mov	r5, r0
 80089c8:	b948      	cbnz	r0, 80089de <__lshift+0x3e>
 80089ca:	4602      	mov	r2, r0
 80089cc:	4b28      	ldr	r3, [pc, #160]	; (8008a70 <__lshift+0xd0>)
 80089ce:	4829      	ldr	r0, [pc, #164]	; (8008a74 <__lshift+0xd4>)
 80089d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089d4:	f000 fbca 	bl	800916c <__assert_func>
 80089d8:	3101      	adds	r1, #1
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	e7ee      	b.n	80089bc <__lshift+0x1c>
 80089de:	2300      	movs	r3, #0
 80089e0:	f100 0114 	add.w	r1, r0, #20
 80089e4:	f100 0210 	add.w	r2, r0, #16
 80089e8:	4618      	mov	r0, r3
 80089ea:	4553      	cmp	r3, sl
 80089ec:	db33      	blt.n	8008a56 <__lshift+0xb6>
 80089ee:	6920      	ldr	r0, [r4, #16]
 80089f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089f4:	f104 0314 	add.w	r3, r4, #20
 80089f8:	f019 091f 	ands.w	r9, r9, #31
 80089fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a04:	d02b      	beq.n	8008a5e <__lshift+0xbe>
 8008a06:	f1c9 0e20 	rsb	lr, r9, #32
 8008a0a:	468a      	mov	sl, r1
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	6818      	ldr	r0, [r3, #0]
 8008a10:	fa00 f009 	lsl.w	r0, r0, r9
 8008a14:	4302      	orrs	r2, r0
 8008a16:	f84a 2b04 	str.w	r2, [sl], #4
 8008a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a1e:	459c      	cmp	ip, r3
 8008a20:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a24:	d8f3      	bhi.n	8008a0e <__lshift+0x6e>
 8008a26:	ebac 0304 	sub.w	r3, ip, r4
 8008a2a:	3b15      	subs	r3, #21
 8008a2c:	f023 0303 	bic.w	r3, r3, #3
 8008a30:	3304      	adds	r3, #4
 8008a32:	f104 0015 	add.w	r0, r4, #21
 8008a36:	4584      	cmp	ip, r0
 8008a38:	bf38      	it	cc
 8008a3a:	2304      	movcc	r3, #4
 8008a3c:	50ca      	str	r2, [r1, r3]
 8008a3e:	b10a      	cbz	r2, 8008a44 <__lshift+0xa4>
 8008a40:	f108 0602 	add.w	r6, r8, #2
 8008a44:	3e01      	subs	r6, #1
 8008a46:	4638      	mov	r0, r7
 8008a48:	612e      	str	r6, [r5, #16]
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	f7ff fdd6 	bl	80085fc <_Bfree>
 8008a50:	4628      	mov	r0, r5
 8008a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a56:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	e7c5      	b.n	80089ea <__lshift+0x4a>
 8008a5e:	3904      	subs	r1, #4
 8008a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a64:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a68:	459c      	cmp	ip, r3
 8008a6a:	d8f9      	bhi.n	8008a60 <__lshift+0xc0>
 8008a6c:	e7ea      	b.n	8008a44 <__lshift+0xa4>
 8008a6e:	bf00      	nop
 8008a70:	080095bb 	.word	0x080095bb
 8008a74:	0800962c 	.word	0x0800962c

08008a78 <__mcmp>:
 8008a78:	b530      	push	{r4, r5, lr}
 8008a7a:	6902      	ldr	r2, [r0, #16]
 8008a7c:	690c      	ldr	r4, [r1, #16]
 8008a7e:	1b12      	subs	r2, r2, r4
 8008a80:	d10e      	bne.n	8008aa0 <__mcmp+0x28>
 8008a82:	f100 0314 	add.w	r3, r0, #20
 8008a86:	3114      	adds	r1, #20
 8008a88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a98:	42a5      	cmp	r5, r4
 8008a9a:	d003      	beq.n	8008aa4 <__mcmp+0x2c>
 8008a9c:	d305      	bcc.n	8008aaa <__mcmp+0x32>
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	bd30      	pop	{r4, r5, pc}
 8008aa4:	4283      	cmp	r3, r0
 8008aa6:	d3f3      	bcc.n	8008a90 <__mcmp+0x18>
 8008aa8:	e7fa      	b.n	8008aa0 <__mcmp+0x28>
 8008aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008aae:	e7f7      	b.n	8008aa0 <__mcmp+0x28>

08008ab0 <__mdiff>:
 8008ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	4611      	mov	r1, r2
 8008aba:	4620      	mov	r0, r4
 8008abc:	4617      	mov	r7, r2
 8008abe:	f7ff ffdb 	bl	8008a78 <__mcmp>
 8008ac2:	1e05      	subs	r5, r0, #0
 8008ac4:	d110      	bne.n	8008ae8 <__mdiff+0x38>
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff fd57 	bl	800857c <_Balloc>
 8008ace:	b930      	cbnz	r0, 8008ade <__mdiff+0x2e>
 8008ad0:	4b39      	ldr	r3, [pc, #228]	; (8008bb8 <__mdiff+0x108>)
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	f240 2132 	movw	r1, #562	; 0x232
 8008ad8:	4838      	ldr	r0, [pc, #224]	; (8008bbc <__mdiff+0x10c>)
 8008ada:	f000 fb47 	bl	800916c <__assert_func>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae8:	bfa4      	itt	ge
 8008aea:	463b      	movge	r3, r7
 8008aec:	4627      	movge	r7, r4
 8008aee:	4630      	mov	r0, r6
 8008af0:	6879      	ldr	r1, [r7, #4]
 8008af2:	bfa6      	itte	ge
 8008af4:	461c      	movge	r4, r3
 8008af6:	2500      	movge	r5, #0
 8008af8:	2501      	movlt	r5, #1
 8008afa:	f7ff fd3f 	bl	800857c <_Balloc>
 8008afe:	b920      	cbnz	r0, 8008b0a <__mdiff+0x5a>
 8008b00:	4b2d      	ldr	r3, [pc, #180]	; (8008bb8 <__mdiff+0x108>)
 8008b02:	4602      	mov	r2, r0
 8008b04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b08:	e7e6      	b.n	8008ad8 <__mdiff+0x28>
 8008b0a:	693e      	ldr	r6, [r7, #16]
 8008b0c:	60c5      	str	r5, [r0, #12]
 8008b0e:	6925      	ldr	r5, [r4, #16]
 8008b10:	f107 0114 	add.w	r1, r7, #20
 8008b14:	f104 0914 	add.w	r9, r4, #20
 8008b18:	f100 0e14 	add.w	lr, r0, #20
 8008b1c:	f107 0210 	add.w	r2, r7, #16
 8008b20:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008b24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008b28:	46f2      	mov	sl, lr
 8008b2a:	2700      	movs	r7, #0
 8008b2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b34:	fa1f f883 	uxth.w	r8, r3
 8008b38:	fa17 f78b 	uxtah	r7, r7, fp
 8008b3c:	0c1b      	lsrs	r3, r3, #16
 8008b3e:	eba7 0808 	sub.w	r8, r7, r8
 8008b42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b4a:	fa1f f888 	uxth.w	r8, r8
 8008b4e:	141f      	asrs	r7, r3, #16
 8008b50:	454d      	cmp	r5, r9
 8008b52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b56:	f84a 3b04 	str.w	r3, [sl], #4
 8008b5a:	d8e7      	bhi.n	8008b2c <__mdiff+0x7c>
 8008b5c:	1b2b      	subs	r3, r5, r4
 8008b5e:	3b15      	subs	r3, #21
 8008b60:	f023 0303 	bic.w	r3, r3, #3
 8008b64:	3304      	adds	r3, #4
 8008b66:	3415      	adds	r4, #21
 8008b68:	42a5      	cmp	r5, r4
 8008b6a:	bf38      	it	cc
 8008b6c:	2304      	movcc	r3, #4
 8008b6e:	4419      	add	r1, r3
 8008b70:	4473      	add	r3, lr
 8008b72:	469e      	mov	lr, r3
 8008b74:	460d      	mov	r5, r1
 8008b76:	4565      	cmp	r5, ip
 8008b78:	d30e      	bcc.n	8008b98 <__mdiff+0xe8>
 8008b7a:	f10c 0203 	add.w	r2, ip, #3
 8008b7e:	1a52      	subs	r2, r2, r1
 8008b80:	f022 0203 	bic.w	r2, r2, #3
 8008b84:	3903      	subs	r1, #3
 8008b86:	458c      	cmp	ip, r1
 8008b88:	bf38      	it	cc
 8008b8a:	2200      	movcc	r2, #0
 8008b8c:	441a      	add	r2, r3
 8008b8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b92:	b17b      	cbz	r3, 8008bb4 <__mdiff+0x104>
 8008b94:	6106      	str	r6, [r0, #16]
 8008b96:	e7a5      	b.n	8008ae4 <__mdiff+0x34>
 8008b98:	f855 8b04 	ldr.w	r8, [r5], #4
 8008b9c:	fa17 f488 	uxtah	r4, r7, r8
 8008ba0:	1422      	asrs	r2, r4, #16
 8008ba2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008ba6:	b2a4      	uxth	r4, r4
 8008ba8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008bac:	f84e 4b04 	str.w	r4, [lr], #4
 8008bb0:	1417      	asrs	r7, r2, #16
 8008bb2:	e7e0      	b.n	8008b76 <__mdiff+0xc6>
 8008bb4:	3e01      	subs	r6, #1
 8008bb6:	e7ea      	b.n	8008b8e <__mdiff+0xde>
 8008bb8:	080095bb 	.word	0x080095bb
 8008bbc:	0800962c 	.word	0x0800962c

08008bc0 <__d2b>:
 8008bc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bc4:	4689      	mov	r9, r1
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	ec57 6b10 	vmov	r6, r7, d0
 8008bcc:	4690      	mov	r8, r2
 8008bce:	f7ff fcd5 	bl	800857c <_Balloc>
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	b930      	cbnz	r0, 8008be4 <__d2b+0x24>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	4b25      	ldr	r3, [pc, #148]	; (8008c70 <__d2b+0xb0>)
 8008bda:	4826      	ldr	r0, [pc, #152]	; (8008c74 <__d2b+0xb4>)
 8008bdc:	f240 310a 	movw	r1, #778	; 0x30a
 8008be0:	f000 fac4 	bl	800916c <__assert_func>
 8008be4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008be8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bec:	bb35      	cbnz	r5, 8008c3c <__d2b+0x7c>
 8008bee:	2e00      	cmp	r6, #0
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	d028      	beq.n	8008c46 <__d2b+0x86>
 8008bf4:	4668      	mov	r0, sp
 8008bf6:	9600      	str	r6, [sp, #0]
 8008bf8:	f7ff fd8c 	bl	8008714 <__lo0bits>
 8008bfc:	9900      	ldr	r1, [sp, #0]
 8008bfe:	b300      	cbz	r0, 8008c42 <__d2b+0x82>
 8008c00:	9a01      	ldr	r2, [sp, #4]
 8008c02:	f1c0 0320 	rsb	r3, r0, #32
 8008c06:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0a:	430b      	orrs	r3, r1
 8008c0c:	40c2      	lsrs	r2, r0
 8008c0e:	6163      	str	r3, [r4, #20]
 8008c10:	9201      	str	r2, [sp, #4]
 8008c12:	9b01      	ldr	r3, [sp, #4]
 8008c14:	61a3      	str	r3, [r4, #24]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	bf14      	ite	ne
 8008c1a:	2202      	movne	r2, #2
 8008c1c:	2201      	moveq	r2, #1
 8008c1e:	6122      	str	r2, [r4, #16]
 8008c20:	b1d5      	cbz	r5, 8008c58 <__d2b+0x98>
 8008c22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c26:	4405      	add	r5, r0
 8008c28:	f8c9 5000 	str.w	r5, [r9]
 8008c2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c30:	f8c8 0000 	str.w	r0, [r8]
 8008c34:	4620      	mov	r0, r4
 8008c36:	b003      	add	sp, #12
 8008c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c40:	e7d5      	b.n	8008bee <__d2b+0x2e>
 8008c42:	6161      	str	r1, [r4, #20]
 8008c44:	e7e5      	b.n	8008c12 <__d2b+0x52>
 8008c46:	a801      	add	r0, sp, #4
 8008c48:	f7ff fd64 	bl	8008714 <__lo0bits>
 8008c4c:	9b01      	ldr	r3, [sp, #4]
 8008c4e:	6163      	str	r3, [r4, #20]
 8008c50:	2201      	movs	r2, #1
 8008c52:	6122      	str	r2, [r4, #16]
 8008c54:	3020      	adds	r0, #32
 8008c56:	e7e3      	b.n	8008c20 <__d2b+0x60>
 8008c58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c60:	f8c9 0000 	str.w	r0, [r9]
 8008c64:	6918      	ldr	r0, [r3, #16]
 8008c66:	f7ff fd35 	bl	80086d4 <__hi0bits>
 8008c6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c6e:	e7df      	b.n	8008c30 <__d2b+0x70>
 8008c70:	080095bb 	.word	0x080095bb
 8008c74:	0800962c 	.word	0x0800962c

08008c78 <_calloc_r>:
 8008c78:	b513      	push	{r0, r1, r4, lr}
 8008c7a:	434a      	muls	r2, r1
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	9201      	str	r2, [sp, #4]
 8008c80:	f000 f85a 	bl	8008d38 <_malloc_r>
 8008c84:	4604      	mov	r4, r0
 8008c86:	b118      	cbz	r0, 8008c90 <_calloc_r+0x18>
 8008c88:	9a01      	ldr	r2, [sp, #4]
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	f7fd fd3c 	bl	8006708 <memset>
 8008c90:	4620      	mov	r0, r4
 8008c92:	b002      	add	sp, #8
 8008c94:	bd10      	pop	{r4, pc}
	...

08008c98 <_free_r>:
 8008c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c9a:	2900      	cmp	r1, #0
 8008c9c:	d048      	beq.n	8008d30 <_free_r+0x98>
 8008c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca2:	9001      	str	r0, [sp, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f1a1 0404 	sub.w	r4, r1, #4
 8008caa:	bfb8      	it	lt
 8008cac:	18e4      	addlt	r4, r4, r3
 8008cae:	f000 fae3 	bl	8009278 <__malloc_lock>
 8008cb2:	4a20      	ldr	r2, [pc, #128]	; (8008d34 <_free_r+0x9c>)
 8008cb4:	9801      	ldr	r0, [sp, #4]
 8008cb6:	6813      	ldr	r3, [r2, #0]
 8008cb8:	4615      	mov	r5, r2
 8008cba:	b933      	cbnz	r3, 8008cca <_free_r+0x32>
 8008cbc:	6063      	str	r3, [r4, #4]
 8008cbe:	6014      	str	r4, [r2, #0]
 8008cc0:	b003      	add	sp, #12
 8008cc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cc6:	f000 badd 	b.w	8009284 <__malloc_unlock>
 8008cca:	42a3      	cmp	r3, r4
 8008ccc:	d90b      	bls.n	8008ce6 <_free_r+0x4e>
 8008cce:	6821      	ldr	r1, [r4, #0]
 8008cd0:	1862      	adds	r2, r4, r1
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	bf04      	itt	eq
 8008cd6:	681a      	ldreq	r2, [r3, #0]
 8008cd8:	685b      	ldreq	r3, [r3, #4]
 8008cda:	6063      	str	r3, [r4, #4]
 8008cdc:	bf04      	itt	eq
 8008cde:	1852      	addeq	r2, r2, r1
 8008ce0:	6022      	streq	r2, [r4, #0]
 8008ce2:	602c      	str	r4, [r5, #0]
 8008ce4:	e7ec      	b.n	8008cc0 <_free_r+0x28>
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	b10b      	cbz	r3, 8008cf0 <_free_r+0x58>
 8008cec:	42a3      	cmp	r3, r4
 8008cee:	d9fa      	bls.n	8008ce6 <_free_r+0x4e>
 8008cf0:	6811      	ldr	r1, [r2, #0]
 8008cf2:	1855      	adds	r5, r2, r1
 8008cf4:	42a5      	cmp	r5, r4
 8008cf6:	d10b      	bne.n	8008d10 <_free_r+0x78>
 8008cf8:	6824      	ldr	r4, [r4, #0]
 8008cfa:	4421      	add	r1, r4
 8008cfc:	1854      	adds	r4, r2, r1
 8008cfe:	42a3      	cmp	r3, r4
 8008d00:	6011      	str	r1, [r2, #0]
 8008d02:	d1dd      	bne.n	8008cc0 <_free_r+0x28>
 8008d04:	681c      	ldr	r4, [r3, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	6053      	str	r3, [r2, #4]
 8008d0a:	4421      	add	r1, r4
 8008d0c:	6011      	str	r1, [r2, #0]
 8008d0e:	e7d7      	b.n	8008cc0 <_free_r+0x28>
 8008d10:	d902      	bls.n	8008d18 <_free_r+0x80>
 8008d12:	230c      	movs	r3, #12
 8008d14:	6003      	str	r3, [r0, #0]
 8008d16:	e7d3      	b.n	8008cc0 <_free_r+0x28>
 8008d18:	6825      	ldr	r5, [r4, #0]
 8008d1a:	1961      	adds	r1, r4, r5
 8008d1c:	428b      	cmp	r3, r1
 8008d1e:	bf04      	itt	eq
 8008d20:	6819      	ldreq	r1, [r3, #0]
 8008d22:	685b      	ldreq	r3, [r3, #4]
 8008d24:	6063      	str	r3, [r4, #4]
 8008d26:	bf04      	itt	eq
 8008d28:	1949      	addeq	r1, r1, r5
 8008d2a:	6021      	streq	r1, [r4, #0]
 8008d2c:	6054      	str	r4, [r2, #4]
 8008d2e:	e7c7      	b.n	8008cc0 <_free_r+0x28>
 8008d30:	b003      	add	sp, #12
 8008d32:	bd30      	pop	{r4, r5, pc}
 8008d34:	200001fc 	.word	0x200001fc

08008d38 <_malloc_r>:
 8008d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3a:	1ccd      	adds	r5, r1, #3
 8008d3c:	f025 0503 	bic.w	r5, r5, #3
 8008d40:	3508      	adds	r5, #8
 8008d42:	2d0c      	cmp	r5, #12
 8008d44:	bf38      	it	cc
 8008d46:	250c      	movcc	r5, #12
 8008d48:	2d00      	cmp	r5, #0
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	db01      	blt.n	8008d52 <_malloc_r+0x1a>
 8008d4e:	42a9      	cmp	r1, r5
 8008d50:	d903      	bls.n	8008d5a <_malloc_r+0x22>
 8008d52:	230c      	movs	r3, #12
 8008d54:	6033      	str	r3, [r6, #0]
 8008d56:	2000      	movs	r0, #0
 8008d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d5a:	f000 fa8d 	bl	8009278 <__malloc_lock>
 8008d5e:	4921      	ldr	r1, [pc, #132]	; (8008de4 <_malloc_r+0xac>)
 8008d60:	680a      	ldr	r2, [r1, #0]
 8008d62:	4614      	mov	r4, r2
 8008d64:	b99c      	cbnz	r4, 8008d8e <_malloc_r+0x56>
 8008d66:	4f20      	ldr	r7, [pc, #128]	; (8008de8 <_malloc_r+0xb0>)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	b923      	cbnz	r3, 8008d76 <_malloc_r+0x3e>
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 f996 	bl	80090a0 <_sbrk_r>
 8008d74:	6038      	str	r0, [r7, #0]
 8008d76:	4629      	mov	r1, r5
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f000 f991 	bl	80090a0 <_sbrk_r>
 8008d7e:	1c43      	adds	r3, r0, #1
 8008d80:	d123      	bne.n	8008dca <_malloc_r+0x92>
 8008d82:	230c      	movs	r3, #12
 8008d84:	6033      	str	r3, [r6, #0]
 8008d86:	4630      	mov	r0, r6
 8008d88:	f000 fa7c 	bl	8009284 <__malloc_unlock>
 8008d8c:	e7e3      	b.n	8008d56 <_malloc_r+0x1e>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	1b5b      	subs	r3, r3, r5
 8008d92:	d417      	bmi.n	8008dc4 <_malloc_r+0x8c>
 8008d94:	2b0b      	cmp	r3, #11
 8008d96:	d903      	bls.n	8008da0 <_malloc_r+0x68>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	441c      	add	r4, r3
 8008d9c:	6025      	str	r5, [r4, #0]
 8008d9e:	e004      	b.n	8008daa <_malloc_r+0x72>
 8008da0:	6863      	ldr	r3, [r4, #4]
 8008da2:	42a2      	cmp	r2, r4
 8008da4:	bf0c      	ite	eq
 8008da6:	600b      	streq	r3, [r1, #0]
 8008da8:	6053      	strne	r3, [r2, #4]
 8008daa:	4630      	mov	r0, r6
 8008dac:	f000 fa6a 	bl	8009284 <__malloc_unlock>
 8008db0:	f104 000b 	add.w	r0, r4, #11
 8008db4:	1d23      	adds	r3, r4, #4
 8008db6:	f020 0007 	bic.w	r0, r0, #7
 8008dba:	1ac2      	subs	r2, r0, r3
 8008dbc:	d0cc      	beq.n	8008d58 <_malloc_r+0x20>
 8008dbe:	1a1b      	subs	r3, r3, r0
 8008dc0:	50a3      	str	r3, [r4, r2]
 8008dc2:	e7c9      	b.n	8008d58 <_malloc_r+0x20>
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	6864      	ldr	r4, [r4, #4]
 8008dc8:	e7cc      	b.n	8008d64 <_malloc_r+0x2c>
 8008dca:	1cc4      	adds	r4, r0, #3
 8008dcc:	f024 0403 	bic.w	r4, r4, #3
 8008dd0:	42a0      	cmp	r0, r4
 8008dd2:	d0e3      	beq.n	8008d9c <_malloc_r+0x64>
 8008dd4:	1a21      	subs	r1, r4, r0
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f000 f962 	bl	80090a0 <_sbrk_r>
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d1dd      	bne.n	8008d9c <_malloc_r+0x64>
 8008de0:	e7cf      	b.n	8008d82 <_malloc_r+0x4a>
 8008de2:	bf00      	nop
 8008de4:	200001fc 	.word	0x200001fc
 8008de8:	20000200 	.word	0x20000200

08008dec <__sfputc_r>:
 8008dec:	6893      	ldr	r3, [r2, #8]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	b410      	push	{r4}
 8008df4:	6093      	str	r3, [r2, #8]
 8008df6:	da08      	bge.n	8008e0a <__sfputc_r+0x1e>
 8008df8:	6994      	ldr	r4, [r2, #24]
 8008dfa:	42a3      	cmp	r3, r4
 8008dfc:	db01      	blt.n	8008e02 <__sfputc_r+0x16>
 8008dfe:	290a      	cmp	r1, #10
 8008e00:	d103      	bne.n	8008e0a <__sfputc_r+0x1e>
 8008e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e06:	f7fe ba45 	b.w	8007294 <__swbuf_r>
 8008e0a:	6813      	ldr	r3, [r2, #0]
 8008e0c:	1c58      	adds	r0, r3, #1
 8008e0e:	6010      	str	r0, [r2, #0]
 8008e10:	7019      	strb	r1, [r3, #0]
 8008e12:	4608      	mov	r0, r1
 8008e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <__sfputs_r>:
 8008e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	460f      	mov	r7, r1
 8008e20:	4614      	mov	r4, r2
 8008e22:	18d5      	adds	r5, r2, r3
 8008e24:	42ac      	cmp	r4, r5
 8008e26:	d101      	bne.n	8008e2c <__sfputs_r+0x12>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	e007      	b.n	8008e3c <__sfputs_r+0x22>
 8008e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e30:	463a      	mov	r2, r7
 8008e32:	4630      	mov	r0, r6
 8008e34:	f7ff ffda 	bl	8008dec <__sfputc_r>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d1f3      	bne.n	8008e24 <__sfputs_r+0xa>
 8008e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e40 <_vfiprintf_r>:
 8008e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	460d      	mov	r5, r1
 8008e46:	b09d      	sub	sp, #116	; 0x74
 8008e48:	4614      	mov	r4, r2
 8008e4a:	4698      	mov	r8, r3
 8008e4c:	4606      	mov	r6, r0
 8008e4e:	b118      	cbz	r0, 8008e58 <_vfiprintf_r+0x18>
 8008e50:	6983      	ldr	r3, [r0, #24]
 8008e52:	b90b      	cbnz	r3, 8008e58 <_vfiprintf_r+0x18>
 8008e54:	f7ff fa72 	bl	800833c <__sinit>
 8008e58:	4b89      	ldr	r3, [pc, #548]	; (8009080 <_vfiprintf_r+0x240>)
 8008e5a:	429d      	cmp	r5, r3
 8008e5c:	d11b      	bne.n	8008e96 <_vfiprintf_r+0x56>
 8008e5e:	6875      	ldr	r5, [r6, #4]
 8008e60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e62:	07d9      	lsls	r1, r3, #31
 8008e64:	d405      	bmi.n	8008e72 <_vfiprintf_r+0x32>
 8008e66:	89ab      	ldrh	r3, [r5, #12]
 8008e68:	059a      	lsls	r2, r3, #22
 8008e6a:	d402      	bmi.n	8008e72 <_vfiprintf_r+0x32>
 8008e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e6e:	f7ff fb08 	bl	8008482 <__retarget_lock_acquire_recursive>
 8008e72:	89ab      	ldrh	r3, [r5, #12]
 8008e74:	071b      	lsls	r3, r3, #28
 8008e76:	d501      	bpl.n	8008e7c <_vfiprintf_r+0x3c>
 8008e78:	692b      	ldr	r3, [r5, #16]
 8008e7a:	b9eb      	cbnz	r3, 8008eb8 <_vfiprintf_r+0x78>
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f7fe fa5a 	bl	8007338 <__swsetup_r>
 8008e84:	b1c0      	cbz	r0, 8008eb8 <_vfiprintf_r+0x78>
 8008e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e88:	07dc      	lsls	r4, r3, #31
 8008e8a:	d50e      	bpl.n	8008eaa <_vfiprintf_r+0x6a>
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	b01d      	add	sp, #116	; 0x74
 8008e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e96:	4b7b      	ldr	r3, [pc, #492]	; (8009084 <_vfiprintf_r+0x244>)
 8008e98:	429d      	cmp	r5, r3
 8008e9a:	d101      	bne.n	8008ea0 <_vfiprintf_r+0x60>
 8008e9c:	68b5      	ldr	r5, [r6, #8]
 8008e9e:	e7df      	b.n	8008e60 <_vfiprintf_r+0x20>
 8008ea0:	4b79      	ldr	r3, [pc, #484]	; (8009088 <_vfiprintf_r+0x248>)
 8008ea2:	429d      	cmp	r5, r3
 8008ea4:	bf08      	it	eq
 8008ea6:	68f5      	ldreq	r5, [r6, #12]
 8008ea8:	e7da      	b.n	8008e60 <_vfiprintf_r+0x20>
 8008eaa:	89ab      	ldrh	r3, [r5, #12]
 8008eac:	0598      	lsls	r0, r3, #22
 8008eae:	d4ed      	bmi.n	8008e8c <_vfiprintf_r+0x4c>
 8008eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eb2:	f7ff fae7 	bl	8008484 <__retarget_lock_release_recursive>
 8008eb6:	e7e9      	b.n	8008e8c <_vfiprintf_r+0x4c>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9309      	str	r3, [sp, #36]	; 0x24
 8008ebc:	2320      	movs	r3, #32
 8008ebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ec6:	2330      	movs	r3, #48	; 0x30
 8008ec8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800908c <_vfiprintf_r+0x24c>
 8008ecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ed0:	f04f 0901 	mov.w	r9, #1
 8008ed4:	4623      	mov	r3, r4
 8008ed6:	469a      	mov	sl, r3
 8008ed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008edc:	b10a      	cbz	r2, 8008ee2 <_vfiprintf_r+0xa2>
 8008ede:	2a25      	cmp	r2, #37	; 0x25
 8008ee0:	d1f9      	bne.n	8008ed6 <_vfiprintf_r+0x96>
 8008ee2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ee6:	d00b      	beq.n	8008f00 <_vfiprintf_r+0xc0>
 8008ee8:	465b      	mov	r3, fp
 8008eea:	4622      	mov	r2, r4
 8008eec:	4629      	mov	r1, r5
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f7ff ff93 	bl	8008e1a <__sfputs_r>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	f000 80aa 	beq.w	800904e <_vfiprintf_r+0x20e>
 8008efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008efc:	445a      	add	r2, fp
 8008efe:	9209      	str	r2, [sp, #36]	; 0x24
 8008f00:	f89a 3000 	ldrb.w	r3, [sl]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 80a2 	beq.w	800904e <_vfiprintf_r+0x20e>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f14:	f10a 0a01 	add.w	sl, sl, #1
 8008f18:	9304      	str	r3, [sp, #16]
 8008f1a:	9307      	str	r3, [sp, #28]
 8008f1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f20:	931a      	str	r3, [sp, #104]	; 0x68
 8008f22:	4654      	mov	r4, sl
 8008f24:	2205      	movs	r2, #5
 8008f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f2a:	4858      	ldr	r0, [pc, #352]	; (800908c <_vfiprintf_r+0x24c>)
 8008f2c:	f7f7 f978 	bl	8000220 <memchr>
 8008f30:	9a04      	ldr	r2, [sp, #16]
 8008f32:	b9d8      	cbnz	r0, 8008f6c <_vfiprintf_r+0x12c>
 8008f34:	06d1      	lsls	r1, r2, #27
 8008f36:	bf44      	itt	mi
 8008f38:	2320      	movmi	r3, #32
 8008f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f3e:	0713      	lsls	r3, r2, #28
 8008f40:	bf44      	itt	mi
 8008f42:	232b      	movmi	r3, #43	; 0x2b
 8008f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f48:	f89a 3000 	ldrb.w	r3, [sl]
 8008f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f4e:	d015      	beq.n	8008f7c <_vfiprintf_r+0x13c>
 8008f50:	9a07      	ldr	r2, [sp, #28]
 8008f52:	4654      	mov	r4, sl
 8008f54:	2000      	movs	r0, #0
 8008f56:	f04f 0c0a 	mov.w	ip, #10
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f60:	3b30      	subs	r3, #48	; 0x30
 8008f62:	2b09      	cmp	r3, #9
 8008f64:	d94e      	bls.n	8009004 <_vfiprintf_r+0x1c4>
 8008f66:	b1b0      	cbz	r0, 8008f96 <_vfiprintf_r+0x156>
 8008f68:	9207      	str	r2, [sp, #28]
 8008f6a:	e014      	b.n	8008f96 <_vfiprintf_r+0x156>
 8008f6c:	eba0 0308 	sub.w	r3, r0, r8
 8008f70:	fa09 f303 	lsl.w	r3, r9, r3
 8008f74:	4313      	orrs	r3, r2
 8008f76:	9304      	str	r3, [sp, #16]
 8008f78:	46a2      	mov	sl, r4
 8008f7a:	e7d2      	b.n	8008f22 <_vfiprintf_r+0xe2>
 8008f7c:	9b03      	ldr	r3, [sp, #12]
 8008f7e:	1d19      	adds	r1, r3, #4
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	9103      	str	r1, [sp, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	bfbb      	ittet	lt
 8008f88:	425b      	neglt	r3, r3
 8008f8a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f8e:	9307      	strge	r3, [sp, #28]
 8008f90:	9307      	strlt	r3, [sp, #28]
 8008f92:	bfb8      	it	lt
 8008f94:	9204      	strlt	r2, [sp, #16]
 8008f96:	7823      	ldrb	r3, [r4, #0]
 8008f98:	2b2e      	cmp	r3, #46	; 0x2e
 8008f9a:	d10c      	bne.n	8008fb6 <_vfiprintf_r+0x176>
 8008f9c:	7863      	ldrb	r3, [r4, #1]
 8008f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa0:	d135      	bne.n	800900e <_vfiprintf_r+0x1ce>
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	1d1a      	adds	r2, r3, #4
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	9203      	str	r2, [sp, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	bfb8      	it	lt
 8008fae:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fb2:	3402      	adds	r4, #2
 8008fb4:	9305      	str	r3, [sp, #20]
 8008fb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800909c <_vfiprintf_r+0x25c>
 8008fba:	7821      	ldrb	r1, [r4, #0]
 8008fbc:	2203      	movs	r2, #3
 8008fbe:	4650      	mov	r0, sl
 8008fc0:	f7f7 f92e 	bl	8000220 <memchr>
 8008fc4:	b140      	cbz	r0, 8008fd8 <_vfiprintf_r+0x198>
 8008fc6:	2340      	movs	r3, #64	; 0x40
 8008fc8:	eba0 000a 	sub.w	r0, r0, sl
 8008fcc:	fa03 f000 	lsl.w	r0, r3, r0
 8008fd0:	9b04      	ldr	r3, [sp, #16]
 8008fd2:	4303      	orrs	r3, r0
 8008fd4:	3401      	adds	r4, #1
 8008fd6:	9304      	str	r3, [sp, #16]
 8008fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fdc:	482c      	ldr	r0, [pc, #176]	; (8009090 <_vfiprintf_r+0x250>)
 8008fde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fe2:	2206      	movs	r2, #6
 8008fe4:	f7f7 f91c 	bl	8000220 <memchr>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d03f      	beq.n	800906c <_vfiprintf_r+0x22c>
 8008fec:	4b29      	ldr	r3, [pc, #164]	; (8009094 <_vfiprintf_r+0x254>)
 8008fee:	bb1b      	cbnz	r3, 8009038 <_vfiprintf_r+0x1f8>
 8008ff0:	9b03      	ldr	r3, [sp, #12]
 8008ff2:	3307      	adds	r3, #7
 8008ff4:	f023 0307 	bic.w	r3, r3, #7
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	9303      	str	r3, [sp, #12]
 8008ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ffe:	443b      	add	r3, r7
 8009000:	9309      	str	r3, [sp, #36]	; 0x24
 8009002:	e767      	b.n	8008ed4 <_vfiprintf_r+0x94>
 8009004:	fb0c 3202 	mla	r2, ip, r2, r3
 8009008:	460c      	mov	r4, r1
 800900a:	2001      	movs	r0, #1
 800900c:	e7a5      	b.n	8008f5a <_vfiprintf_r+0x11a>
 800900e:	2300      	movs	r3, #0
 8009010:	3401      	adds	r4, #1
 8009012:	9305      	str	r3, [sp, #20]
 8009014:	4619      	mov	r1, r3
 8009016:	f04f 0c0a 	mov.w	ip, #10
 800901a:	4620      	mov	r0, r4
 800901c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009020:	3a30      	subs	r2, #48	; 0x30
 8009022:	2a09      	cmp	r2, #9
 8009024:	d903      	bls.n	800902e <_vfiprintf_r+0x1ee>
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0c5      	beq.n	8008fb6 <_vfiprintf_r+0x176>
 800902a:	9105      	str	r1, [sp, #20]
 800902c:	e7c3      	b.n	8008fb6 <_vfiprintf_r+0x176>
 800902e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009032:	4604      	mov	r4, r0
 8009034:	2301      	movs	r3, #1
 8009036:	e7f0      	b.n	800901a <_vfiprintf_r+0x1da>
 8009038:	ab03      	add	r3, sp, #12
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	462a      	mov	r2, r5
 800903e:	4b16      	ldr	r3, [pc, #88]	; (8009098 <_vfiprintf_r+0x258>)
 8009040:	a904      	add	r1, sp, #16
 8009042:	4630      	mov	r0, r6
 8009044:	f7fd fc08 	bl	8006858 <_printf_float>
 8009048:	4607      	mov	r7, r0
 800904a:	1c78      	adds	r0, r7, #1
 800904c:	d1d6      	bne.n	8008ffc <_vfiprintf_r+0x1bc>
 800904e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009050:	07d9      	lsls	r1, r3, #31
 8009052:	d405      	bmi.n	8009060 <_vfiprintf_r+0x220>
 8009054:	89ab      	ldrh	r3, [r5, #12]
 8009056:	059a      	lsls	r2, r3, #22
 8009058:	d402      	bmi.n	8009060 <_vfiprintf_r+0x220>
 800905a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800905c:	f7ff fa12 	bl	8008484 <__retarget_lock_release_recursive>
 8009060:	89ab      	ldrh	r3, [r5, #12]
 8009062:	065b      	lsls	r3, r3, #25
 8009064:	f53f af12 	bmi.w	8008e8c <_vfiprintf_r+0x4c>
 8009068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800906a:	e711      	b.n	8008e90 <_vfiprintf_r+0x50>
 800906c:	ab03      	add	r3, sp, #12
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	462a      	mov	r2, r5
 8009072:	4b09      	ldr	r3, [pc, #36]	; (8009098 <_vfiprintf_r+0x258>)
 8009074:	a904      	add	r1, sp, #16
 8009076:	4630      	mov	r0, r6
 8009078:	f7fd fe92 	bl	8006da0 <_printf_i>
 800907c:	e7e4      	b.n	8009048 <_vfiprintf_r+0x208>
 800907e:	bf00      	nop
 8009080:	080095ec 	.word	0x080095ec
 8009084:	0800960c 	.word	0x0800960c
 8009088:	080095cc 	.word	0x080095cc
 800908c:	0800978c 	.word	0x0800978c
 8009090:	08009796 	.word	0x08009796
 8009094:	08006859 	.word	0x08006859
 8009098:	08008e1b 	.word	0x08008e1b
 800909c:	08009792 	.word	0x08009792

080090a0 <_sbrk_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d06      	ldr	r5, [pc, #24]	; (80090bc <_sbrk_r+0x1c>)
 80090a4:	2300      	movs	r3, #0
 80090a6:	4604      	mov	r4, r0
 80090a8:	4608      	mov	r0, r1
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	f7fd fa90 	bl	80065d0 <_sbrk>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d102      	bne.n	80090ba <_sbrk_r+0x1a>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	b103      	cbz	r3, 80090ba <_sbrk_r+0x1a>
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	20000510 	.word	0x20000510

080090c0 <__sread>:
 80090c0:	b510      	push	{r4, lr}
 80090c2:	460c      	mov	r4, r1
 80090c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c8:	f000 f8e2 	bl	8009290 <_read_r>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	bfab      	itete	ge
 80090d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090d2:	89a3      	ldrhlt	r3, [r4, #12]
 80090d4:	181b      	addge	r3, r3, r0
 80090d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090da:	bfac      	ite	ge
 80090dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80090de:	81a3      	strhlt	r3, [r4, #12]
 80090e0:	bd10      	pop	{r4, pc}

080090e2 <__swrite>:
 80090e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e6:	461f      	mov	r7, r3
 80090e8:	898b      	ldrh	r3, [r1, #12]
 80090ea:	05db      	lsls	r3, r3, #23
 80090ec:	4605      	mov	r5, r0
 80090ee:	460c      	mov	r4, r1
 80090f0:	4616      	mov	r6, r2
 80090f2:	d505      	bpl.n	8009100 <__swrite+0x1e>
 80090f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f8:	2302      	movs	r3, #2
 80090fa:	2200      	movs	r2, #0
 80090fc:	f000 f898 	bl	8009230 <_lseek_r>
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	4632      	mov	r2, r6
 800910e:	463b      	mov	r3, r7
 8009110:	4628      	mov	r0, r5
 8009112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009116:	f000 b817 	b.w	8009148 <_write_r>

0800911a <__sseek>:
 800911a:	b510      	push	{r4, lr}
 800911c:	460c      	mov	r4, r1
 800911e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009122:	f000 f885 	bl	8009230 <_lseek_r>
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	bf15      	itete	ne
 800912c:	6560      	strne	r0, [r4, #84]	; 0x54
 800912e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009132:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009136:	81a3      	strheq	r3, [r4, #12]
 8009138:	bf18      	it	ne
 800913a:	81a3      	strhne	r3, [r4, #12]
 800913c:	bd10      	pop	{r4, pc}

0800913e <__sclose>:
 800913e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009142:	f000 b831 	b.w	80091a8 <_close_r>
	...

08009148 <_write_r>:
 8009148:	b538      	push	{r3, r4, r5, lr}
 800914a:	4d07      	ldr	r5, [pc, #28]	; (8009168 <_write_r+0x20>)
 800914c:	4604      	mov	r4, r0
 800914e:	4608      	mov	r0, r1
 8009150:	4611      	mov	r1, r2
 8009152:	2200      	movs	r2, #0
 8009154:	602a      	str	r2, [r5, #0]
 8009156:	461a      	mov	r2, r3
 8009158:	f7fc ff2a 	bl	8005fb0 <_write>
 800915c:	1c43      	adds	r3, r0, #1
 800915e:	d102      	bne.n	8009166 <_write_r+0x1e>
 8009160:	682b      	ldr	r3, [r5, #0]
 8009162:	b103      	cbz	r3, 8009166 <_write_r+0x1e>
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	20000510 	.word	0x20000510

0800916c <__assert_func>:
 800916c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800916e:	4614      	mov	r4, r2
 8009170:	461a      	mov	r2, r3
 8009172:	4b09      	ldr	r3, [pc, #36]	; (8009198 <__assert_func+0x2c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4605      	mov	r5, r0
 8009178:	68d8      	ldr	r0, [r3, #12]
 800917a:	b14c      	cbz	r4, 8009190 <__assert_func+0x24>
 800917c:	4b07      	ldr	r3, [pc, #28]	; (800919c <__assert_func+0x30>)
 800917e:	9100      	str	r1, [sp, #0]
 8009180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009184:	4906      	ldr	r1, [pc, #24]	; (80091a0 <__assert_func+0x34>)
 8009186:	462b      	mov	r3, r5
 8009188:	f000 f81e 	bl	80091c8 <fiprintf>
 800918c:	f000 f89f 	bl	80092ce <abort>
 8009190:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <__assert_func+0x38>)
 8009192:	461c      	mov	r4, r3
 8009194:	e7f3      	b.n	800917e <__assert_func+0x12>
 8009196:	bf00      	nop
 8009198:	2000000c 	.word	0x2000000c
 800919c:	0800979d 	.word	0x0800979d
 80091a0:	080097aa 	.word	0x080097aa
 80091a4:	080097d8 	.word	0x080097d8

080091a8 <_close_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4d06      	ldr	r5, [pc, #24]	; (80091c4 <_close_r+0x1c>)
 80091ac:	2300      	movs	r3, #0
 80091ae:	4604      	mov	r4, r0
 80091b0:	4608      	mov	r0, r1
 80091b2:	602b      	str	r3, [r5, #0]
 80091b4:	f7fc ff28 	bl	8006008 <_close>
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	d102      	bne.n	80091c2 <_close_r+0x1a>
 80091bc:	682b      	ldr	r3, [r5, #0]
 80091be:	b103      	cbz	r3, 80091c2 <_close_r+0x1a>
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	bd38      	pop	{r3, r4, r5, pc}
 80091c4:	20000510 	.word	0x20000510

080091c8 <fiprintf>:
 80091c8:	b40e      	push	{r1, r2, r3}
 80091ca:	b503      	push	{r0, r1, lr}
 80091cc:	4601      	mov	r1, r0
 80091ce:	ab03      	add	r3, sp, #12
 80091d0:	4805      	ldr	r0, [pc, #20]	; (80091e8 <fiprintf+0x20>)
 80091d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d6:	6800      	ldr	r0, [r0, #0]
 80091d8:	9301      	str	r3, [sp, #4]
 80091da:	f7ff fe31 	bl	8008e40 <_vfiprintf_r>
 80091de:	b002      	add	sp, #8
 80091e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091e4:	b003      	add	sp, #12
 80091e6:	4770      	bx	lr
 80091e8:	2000000c 	.word	0x2000000c

080091ec <_fstat_r>:
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	4d07      	ldr	r5, [pc, #28]	; (800920c <_fstat_r+0x20>)
 80091f0:	2300      	movs	r3, #0
 80091f2:	4604      	mov	r4, r0
 80091f4:	4608      	mov	r0, r1
 80091f6:	4611      	mov	r1, r2
 80091f8:	602b      	str	r3, [r5, #0]
 80091fa:	f7fc ff55 	bl	80060a8 <_fstat>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	d102      	bne.n	8009208 <_fstat_r+0x1c>
 8009202:	682b      	ldr	r3, [r5, #0]
 8009204:	b103      	cbz	r3, 8009208 <_fstat_r+0x1c>
 8009206:	6023      	str	r3, [r4, #0]
 8009208:	bd38      	pop	{r3, r4, r5, pc}
 800920a:	bf00      	nop
 800920c:	20000510 	.word	0x20000510

08009210 <_isatty_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4d06      	ldr	r5, [pc, #24]	; (800922c <_isatty_r+0x1c>)
 8009214:	2300      	movs	r3, #0
 8009216:	4604      	mov	r4, r0
 8009218:	4608      	mov	r0, r1
 800921a:	602b      	str	r3, [r5, #0]
 800921c:	f7fc feb2 	bl	8005f84 <_isatty>
 8009220:	1c43      	adds	r3, r0, #1
 8009222:	d102      	bne.n	800922a <_isatty_r+0x1a>
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	b103      	cbz	r3, 800922a <_isatty_r+0x1a>
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	bd38      	pop	{r3, r4, r5, pc}
 800922c:	20000510 	.word	0x20000510

08009230 <_lseek_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4d07      	ldr	r5, [pc, #28]	; (8009250 <_lseek_r+0x20>)
 8009234:	4604      	mov	r4, r0
 8009236:	4608      	mov	r0, r1
 8009238:	4611      	mov	r1, r2
 800923a:	2200      	movs	r2, #0
 800923c:	602a      	str	r2, [r5, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	f7fc fef9 	bl	8006036 <_lseek>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_lseek_r+0x1e>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b103      	cbz	r3, 800924e <_lseek_r+0x1e>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	20000510 	.word	0x20000510

08009254 <__ascii_mbtowc>:
 8009254:	b082      	sub	sp, #8
 8009256:	b901      	cbnz	r1, 800925a <__ascii_mbtowc+0x6>
 8009258:	a901      	add	r1, sp, #4
 800925a:	b142      	cbz	r2, 800926e <__ascii_mbtowc+0x1a>
 800925c:	b14b      	cbz	r3, 8009272 <__ascii_mbtowc+0x1e>
 800925e:	7813      	ldrb	r3, [r2, #0]
 8009260:	600b      	str	r3, [r1, #0]
 8009262:	7812      	ldrb	r2, [r2, #0]
 8009264:	1e10      	subs	r0, r2, #0
 8009266:	bf18      	it	ne
 8009268:	2001      	movne	r0, #1
 800926a:	b002      	add	sp, #8
 800926c:	4770      	bx	lr
 800926e:	4610      	mov	r0, r2
 8009270:	e7fb      	b.n	800926a <__ascii_mbtowc+0x16>
 8009272:	f06f 0001 	mvn.w	r0, #1
 8009276:	e7f8      	b.n	800926a <__ascii_mbtowc+0x16>

08009278 <__malloc_lock>:
 8009278:	4801      	ldr	r0, [pc, #4]	; (8009280 <__malloc_lock+0x8>)
 800927a:	f7ff b902 	b.w	8008482 <__retarget_lock_acquire_recursive>
 800927e:	bf00      	nop
 8009280:	20000508 	.word	0x20000508

08009284 <__malloc_unlock>:
 8009284:	4801      	ldr	r0, [pc, #4]	; (800928c <__malloc_unlock+0x8>)
 8009286:	f7ff b8fd 	b.w	8008484 <__retarget_lock_release_recursive>
 800928a:	bf00      	nop
 800928c:	20000508 	.word	0x20000508

08009290 <_read_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4d07      	ldr	r5, [pc, #28]	; (80092b0 <_read_r+0x20>)
 8009294:	4604      	mov	r4, r0
 8009296:	4608      	mov	r0, r1
 8009298:	4611      	mov	r1, r2
 800929a:	2200      	movs	r2, #0
 800929c:	602a      	str	r2, [r5, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	f7fc feda 	bl	8006058 <_read>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	d102      	bne.n	80092ae <_read_r+0x1e>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	b103      	cbz	r3, 80092ae <_read_r+0x1e>
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	bd38      	pop	{r3, r4, r5, pc}
 80092b0:	20000510 	.word	0x20000510

080092b4 <__ascii_wctomb>:
 80092b4:	b149      	cbz	r1, 80092ca <__ascii_wctomb+0x16>
 80092b6:	2aff      	cmp	r2, #255	; 0xff
 80092b8:	bf85      	ittet	hi
 80092ba:	238a      	movhi	r3, #138	; 0x8a
 80092bc:	6003      	strhi	r3, [r0, #0]
 80092be:	700a      	strbls	r2, [r1, #0]
 80092c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80092c4:	bf98      	it	ls
 80092c6:	2001      	movls	r0, #1
 80092c8:	4770      	bx	lr
 80092ca:	4608      	mov	r0, r1
 80092cc:	4770      	bx	lr

080092ce <abort>:
 80092ce:	b508      	push	{r3, lr}
 80092d0:	2006      	movs	r0, #6
 80092d2:	f000 f82b 	bl	800932c <raise>
 80092d6:	2001      	movs	r0, #1
 80092d8:	f000 f89a 	bl	8009410 <_exit>

080092dc <_raise_r>:
 80092dc:	291f      	cmp	r1, #31
 80092de:	b538      	push	{r3, r4, r5, lr}
 80092e0:	4604      	mov	r4, r0
 80092e2:	460d      	mov	r5, r1
 80092e4:	d904      	bls.n	80092f0 <_raise_r+0x14>
 80092e6:	2316      	movs	r3, #22
 80092e8:	6003      	str	r3, [r0, #0]
 80092ea:	f04f 30ff 	mov.w	r0, #4294967295
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092f2:	b112      	cbz	r2, 80092fa <_raise_r+0x1e>
 80092f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092f8:	b94b      	cbnz	r3, 800930e <_raise_r+0x32>
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 f830 	bl	8009360 <_getpid_r>
 8009300:	462a      	mov	r2, r5
 8009302:	4601      	mov	r1, r0
 8009304:	4620      	mov	r0, r4
 8009306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800930a:	f000 b817 	b.w	800933c <_kill_r>
 800930e:	2b01      	cmp	r3, #1
 8009310:	d00a      	beq.n	8009328 <_raise_r+0x4c>
 8009312:	1c59      	adds	r1, r3, #1
 8009314:	d103      	bne.n	800931e <_raise_r+0x42>
 8009316:	2316      	movs	r3, #22
 8009318:	6003      	str	r3, [r0, #0]
 800931a:	2001      	movs	r0, #1
 800931c:	e7e7      	b.n	80092ee <_raise_r+0x12>
 800931e:	2400      	movs	r4, #0
 8009320:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009324:	4628      	mov	r0, r5
 8009326:	4798      	blx	r3
 8009328:	2000      	movs	r0, #0
 800932a:	e7e0      	b.n	80092ee <_raise_r+0x12>

0800932c <raise>:
 800932c:	4b02      	ldr	r3, [pc, #8]	; (8009338 <raise+0xc>)
 800932e:	4601      	mov	r1, r0
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	f7ff bfd3 	b.w	80092dc <_raise_r>
 8009336:	bf00      	nop
 8009338:	2000000c 	.word	0x2000000c

0800933c <_kill_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	4d07      	ldr	r5, [pc, #28]	; (800935c <_kill_r+0x20>)
 8009340:	2300      	movs	r3, #0
 8009342:	4604      	mov	r4, r0
 8009344:	4608      	mov	r0, r1
 8009346:	4611      	mov	r1, r2
 8009348:	602b      	str	r3, [r5, #0]
 800934a:	f000 f859 	bl	8009400 <_kill>
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	d102      	bne.n	8009358 <_kill_r+0x1c>
 8009352:	682b      	ldr	r3, [r5, #0]
 8009354:	b103      	cbz	r3, 8009358 <_kill_r+0x1c>
 8009356:	6023      	str	r3, [r4, #0]
 8009358:	bd38      	pop	{r3, r4, r5, pc}
 800935a:	bf00      	nop
 800935c:	20000510 	.word	0x20000510

08009360 <_getpid_r>:
 8009360:	f000 b846 	b.w	80093f0 <_getpid>

08009364 <round>:
 8009364:	ec51 0b10 	vmov	r0, r1, d0
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800936e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8009372:	2c13      	cmp	r4, #19
 8009374:	ee10 2a10 	vmov	r2, s0
 8009378:	460b      	mov	r3, r1
 800937a:	dc19      	bgt.n	80093b0 <round+0x4c>
 800937c:	2c00      	cmp	r4, #0
 800937e:	da09      	bge.n	8009394 <round+0x30>
 8009380:	3401      	adds	r4, #1
 8009382:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009386:	d103      	bne.n	8009390 <round+0x2c>
 8009388:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800938c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009390:	2100      	movs	r1, #0
 8009392:	e028      	b.n	80093e6 <round+0x82>
 8009394:	4d15      	ldr	r5, [pc, #84]	; (80093ec <round+0x88>)
 8009396:	4125      	asrs	r5, r4
 8009398:	ea01 0605 	and.w	r6, r1, r5
 800939c:	4332      	orrs	r2, r6
 800939e:	d00e      	beq.n	80093be <round+0x5a>
 80093a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80093a4:	fa42 f404 	asr.w	r4, r2, r4
 80093a8:	4423      	add	r3, r4
 80093aa:	ea23 0305 	bic.w	r3, r3, r5
 80093ae:	e7ef      	b.n	8009390 <round+0x2c>
 80093b0:	2c33      	cmp	r4, #51	; 0x33
 80093b2:	dd07      	ble.n	80093c4 <round+0x60>
 80093b4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80093b8:	d101      	bne.n	80093be <round+0x5a>
 80093ba:	f7f6 ff87 	bl	80002cc <__adddf3>
 80093be:	ec41 0b10 	vmov	d0, r0, r1
 80093c2:	bd70      	pop	{r4, r5, r6, pc}
 80093c4:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80093c8:	f04f 35ff 	mov.w	r5, #4294967295
 80093cc:	40f5      	lsrs	r5, r6
 80093ce:	4228      	tst	r0, r5
 80093d0:	d0f5      	beq.n	80093be <round+0x5a>
 80093d2:	2101      	movs	r1, #1
 80093d4:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80093d8:	fa01 f404 	lsl.w	r4, r1, r4
 80093dc:	1912      	adds	r2, r2, r4
 80093de:	bf28      	it	cs
 80093e0:	185b      	addcs	r3, r3, r1
 80093e2:	ea22 0105 	bic.w	r1, r2, r5
 80093e6:	4608      	mov	r0, r1
 80093e8:	4619      	mov	r1, r3
 80093ea:	e7e8      	b.n	80093be <round+0x5a>
 80093ec:	000fffff 	.word	0x000fffff

080093f0 <_getpid>:
 80093f0:	4b02      	ldr	r3, [pc, #8]	; (80093fc <_getpid+0xc>)
 80093f2:	2258      	movs	r2, #88	; 0x58
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	f04f 30ff 	mov.w	r0, #4294967295
 80093fa:	4770      	bx	lr
 80093fc:	20000510 	.word	0x20000510

08009400 <_kill>:
 8009400:	4b02      	ldr	r3, [pc, #8]	; (800940c <_kill+0xc>)
 8009402:	2258      	movs	r2, #88	; 0x58
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	f04f 30ff 	mov.w	r0, #4294967295
 800940a:	4770      	bx	lr
 800940c:	20000510 	.word	0x20000510

08009410 <_exit>:
 8009410:	e7fe      	b.n	8009410 <_exit>
	...

08009414 <_init>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	bf00      	nop
 8009418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941a:	bc08      	pop	{r3}
 800941c:	469e      	mov	lr, r3
 800941e:	4770      	bx	lr

08009420 <_fini>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	bf00      	nop
 8009424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009426:	bc08      	pop	{r3}
 8009428:	469e      	mov	lr, r3
 800942a:	4770      	bx	lr
